{"version":3,"file":"static/js/main.93657cad.js","mappings":"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","sources":["../node_modules/.pnpm/react-dom@19.0.0-canary-a73c3450e-20240329_react@19.0.0-canary-a73c3450e-20240329/node_modules/react-dom/cjs/react-dom.production.js","../node_modules/.pnpm/react-dom@19.0.0-canary-a73c3450e-20240329_react@19.0.0-canary-a73c3450e-20240329/node_modules/react-dom/client.js","../node_modules/.pnpm/react-dom@19.0.0-canary-a73c3450e-20240329_react@19.0.0-canary-a73c3450e-20240329/node_modules/react-dom/index.js","../node_modules/.pnpm/react@19.0.0-canary-a73c3450e-20240329/node_modules/react/cjs/react-jsx-runtime.production.js","../node_modules/.pnpm/react@19.0.0-canary-a73c3450e-20240329/node_modules/react/cjs/react.production.js","../node_modules/.pnpm/react@19.0.0-canary-a73c3450e-20240329/node_modules/react/index.js","../node_modules/.pnpm/react@19.0.0-canary-a73c3450e-20240329/node_modules/react/jsx-runtime.js","../node_modules/.pnpm/scheduler@0.25.0-canary-a73c3450e-20240329/node_modules/scheduler/cjs/scheduler.production.js","../node_modules/.pnpm/scheduler@0.25.0-canary-a73c3450e-20240329/node_modules/scheduler/index.js","../webpack/bootstrap","../webpack/runtime/create fake namespace object","../webpack/runtime/define property getters","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/make namespace object","../node_modules/.pnpm/@remix-run+router@1.15.3/node_modules/@remix-run/router/history.ts","components/steps/OccupationStep.jsx","components/steps/InterestStep.jsx","components/steps/HaltStep3.jsx","components/steps/MathLevelStep.jsx","components/steps/FinalStep.jsx","../node_modules/.pnpm/@remix-run+router@1.15.3/node_modules/@remix-run/router/utils.ts","../node_modules/.pnpm/@remix-run+router@1.15.3/node_modules/@remix-run/router/router.ts","../node_modules/.pnpm/react-router@6.22.3_react@19.0.0-canary-a73c3450e-20240329/node_modules/react-router/lib/context.ts","../node_modules/.pnpm/react-router@6.22.3_react@19.0.0-canary-a73c3450e-20240329/node_modules/react-router/lib/hooks.tsx","../node_modules/.pnpm/react-router@6.22.3_react@19.0.0-canary-a73c3450e-20240329/node_modules/react-router/lib/components.tsx","components/DemoComponent.js","../node_modules/.pnpm/react-router-dom@6.22.3_react-dom@19.0.0-canary-a73c3450e-20240329_react@19.0.0-canary-a73c3450e-20240329/node_modules/react-router-dom/dom.ts","../node_modules/.pnpm/react-router-dom@6.22.3_react-dom@19.0.0-canary-a73c3450e-20240329_react@19.0.0-canary-a73c3450e-20240329/node_modules/react-router-dom/index.tsx","components/LearningPath.jsx","App.js","index.js"],"sourcesContent":["/**\n * @license React\n * react-dom.production.min.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar React = require('react');\nvar Scheduler = require('scheduler');\n\nfunction noop$3() {}\n\nconst DefaultDispatcher = {\n  prefetchDNS: noop$3,\n  preconnect: noop$3,\n  preload: noop$3,\n  preloadModule: noop$3,\n  preinitScript: noop$3,\n  preinitStyle: noop$3,\n  preinitModuleScript: noop$3\n};\nconst Internals = {\n  usingClientEntryPoint: false,\n  Events: null,\n  ReactDOMCurrentDispatcher: {\n    current: DefaultDispatcher\n  },\n  findDOMNode: null\n};\n\n// Do not require this module directly! Use normal `invariant` calls with\n// template literal strings. The messages will be replaced with error codes\n// during build.\nfunction formatProdErrorMessage(code) {\n  let url = 'https://react.dev/errors/' + code;\n\n  if (arguments.length > 1) {\n    url += '?args[]=' + encodeURIComponent(arguments[1]);\n\n    for (let i = 2; i < arguments.length; i++) {\n      url += '&args[]=' + encodeURIComponent(arguments[i]);\n    }\n  }\n\n  return \"Minified React error #\" + code + \"; visit \" + url + \" for the full message or \" + 'use the non-minified dev environment for full errors and additional ' + 'helpful warnings.';\n}\n\n// -----------------------------------------------------------------------------\n// Killswitch\n//\n// Flags that exist solely to turn off a change in case it causes a regression\n// when it rolls out to prod. We should remove these as soon as possible.\n// -----------------------------------------------------------------------------\n// -----------------------------------------------------------------------------\n// Land or remove (moderate effort)\n//\n// Flags that can be probably deleted or landed, but might require extra effort\n// like migrating internal callers or performance testing.\n// -----------------------------------------------------------------------------\n// TODO: Finish rolling out in www\n\nconst favorSafetyOverHydrationPerf = true;\nconst enableAsyncActions = true; // Need to remove didTimeout argument from Scheduler before landing\n// Slated for removal in the future (significant effort)\n//\n// These are experiments that didn't work out, and never shipped, but we can't\n// delete from the codebase until we migrate internal callers.\n// -----------------------------------------------------------------------------\n// Add a callback property to suspense to notify which promises are currently\n// in the update queue. This allows reporting and tracing of what is causing\n// the user to see a loading state.\n//\n// Also allows hydration callbacks to fire when a dehydrated boundary gets\n// hydrated or deleted.\n//\n// This will eventually be replaced by the Transition Tracing proposal.\n\nconst enableSuspenseCallback = false; // Experimental Scope support.\n\nconst enableLazyContextPropagation = false; // FB-only usage. The new API has different semantics.\n\nconst enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\nconst alwaysThrottleRetries = true;\nconst syncLaneExpirationMs = 250;\nconst transitionLaneExpirationMs = 5000; // -----------------------------------------------------------------------------\n// Ready for next major.\n//\n// Alias __NEXT_MAJOR__ to false for easier skimming.\n// -----------------------------------------------------------------------------\n\nconst __NEXT_MAJOR__ = false; // Removes legacy style context\nconst enableBigIntSupport = __NEXT_MAJOR__;\n// React DOM Chopping Block\n//\n// Similar to main Chopping Block but only flags related to React DOM. These are\n// grouped because we will likely batch all of them into a single major release.\n// -----------------------------------------------------------------------------\n// Disable support for comment nodes as React DOM containers. Already disabled\n// in open source, but www codebase still relies on it. Need to remove.\n\nconst disableCommentsAsDOMContainers = true;\n// Debugging and DevTools\n// -----------------------------------------------------------------------------\n// Adds user timing marks for e.g. state updates, suspense, and work loop stuff,\n// for an experimental timeline tool.\n\nconst enableSchedulingProfiler = false; // Helps identify side effects in render-phase lifecycle hooks and setState\n\nconst enableProfilerTimer = false; // Record durations for commit and passive effects phases.\n\nconst assign = Object.assign;\n\nconst ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nconst ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher; // Since the \"not pending\" value is always the same, we can reuse the\n// same object across all transitions.\n\nconst sharedNotPendingObject = {\n  pending: false,\n  data: null,\n  method: null,\n  action: null\n};\nconst NotPending = sharedNotPendingObject;\n\nfunction resolveDispatcher() {\n  // Copied from react/src/ReactHooks.js. It's the same thing but in a\n  // different package.\n  const dispatcher = ReactCurrentDispatcher$2.current;\n  // intentionally don't throw our own error because this is in a hot path.\n  // Also helps ensure this is inlined.\n\n\n  return dispatcher;\n}\n\nfunction useFormStatus() {\n  {\n    const dispatcher = resolveDispatcher(); // $FlowFixMe[not-a-function] We know this exists because of the feature check above.\n\n    return dispatcher.useHostTransitionStatus();\n  }\n}\nfunction useFormState(action, initialState, permalink) {\n  {\n    const dispatcher = resolveDispatcher(); // $FlowFixMe[not-a-function] This is unstable, thus optional\n\n    return dispatcher.useFormState(action, initialState, permalink);\n  }\n}\n\nconst valueStack = [];\n\nlet index = -1;\n\nfunction createCursor(defaultValue) {\n  return {\n    current: defaultValue\n  };\n}\n\nfunction pop(cursor, fiber) {\n  if (index < 0) {\n\n    return;\n  }\n\n  cursor.current = valueStack[index];\n  valueStack[index] = null;\n\n  index--;\n}\n\nfunction push(cursor, value, fiber) {\n  index++;\n  valueStack[index] = cursor.current;\n\n  cursor.current = value;\n}\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n// The Symbol used to tag the ReactElement-like types.\nconst REACT_ELEMENT_TYPE = Symbol.for('react.element');\nconst REACT_PORTAL_TYPE = Symbol.for('react.portal');\nconst REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\nconst REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\nconst REACT_PROFILER_TYPE = Symbol.for('react.profiler');\nconst REACT_PROVIDER_TYPE = Symbol.for('react.provider'); // TODO: Delete with enableRenderableContext\n\nconst REACT_CONSUMER_TYPE = Symbol.for('react.consumer');\nconst REACT_CONTEXT_TYPE = Symbol.for('react.context');\nconst REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\nconst REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\nconst REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\nconst REACT_MEMO_TYPE = Symbol.for('react.memo');\nconst REACT_LAZY_TYPE = Symbol.for('react.lazy');\nconst REACT_SCOPE_TYPE = Symbol.for('react.scope');\nconst REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for('react.debug_trace_mode');\nconst REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\nconst REACT_LEGACY_HIDDEN_TYPE = Symbol.for('react.legacy_hidden');\nconst REACT_CACHE_TYPE = Symbol.for('react.cache');\nconst REACT_TRACING_MARKER_TYPE = Symbol.for('react.tracing_marker');\nconst MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\nconst FAUX_ITERATOR_SYMBOL = '@@iterator';\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n\n  const maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n\n  return null;\n}\n\nconst contextStackCursor$1 = createCursor(null);\nconst contextFiberStackCursor = createCursor(null);\nconst rootInstanceStackCursor = createCursor(null); // Represents the nearest host transition provider (in React DOM, a <form />)\n// NOTE: Since forms cannot be nested, and this feature is only implemented by\n// React DOM, we don't technically need this to be a stack. It could be a single\n// module variable instead.\n\nconst hostTransitionProviderCursor = createCursor(null); // TODO: This should initialize to NotPendingTransition, a constant\n// imported from the fiber config. However, because of a cycle in the module\n// graph, that value isn't defined during this module's initialization. I can't\n// think of a way to work around this without moving that value out of the\n// fiber config. For now, the \"no provider\" case is handled when reading,\n// inside useHostTransitionStatus.\n\nconst HostTransitionContext = {\n  $$typeof: REACT_CONTEXT_TYPE,\n  Provider: null,\n  Consumer: null,\n  _currentValue: null,\n  _currentValue2: null,\n  _threadCount: 0\n};\n\nfunction requiredContext(c) {\n\n  return c;\n}\n\nfunction getCurrentRootHostContainer() {\n  return rootInstanceStackCursor.current;\n}\n\nfunction getRootHostContainer() {\n  const rootInstance = requiredContext(rootInstanceStackCursor.current);\n  return rootInstance;\n}\n\nfunction pushHostContainer(fiber, nextRootInstance) {\n  // Push current root instance onto the stack;\n  // This allows us to reset root when portals are popped.\n  push(rootInstanceStackCursor, nextRootInstance); // Track the context and the Fiber that provided it.\n  // This enables us to pop only Fibers that provide unique contexts.\n\n  push(contextFiberStackCursor, fiber); // Finally, we need to push the host context to the stack.\n  // However, we can't just call getRootHostContext() and push it because\n  // we'd have a different number of entries on the stack depending on\n  // whether getRootHostContext() throws somewhere in renderer code or not.\n  // So we push an empty value first. This lets us safely unwind on errors.\n\n  push(contextStackCursor$1, null);\n  const nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.\n\n  pop(contextStackCursor$1);\n  push(contextStackCursor$1, nextRootContext);\n}\n\nfunction popHostContainer(fiber) {\n  pop(contextStackCursor$1);\n  pop(contextFiberStackCursor);\n  pop(rootInstanceStackCursor);\n}\n\nfunction getHostContext() {\n  const context = requiredContext(contextStackCursor$1.current);\n  return context;\n}\n\nfunction pushHostContext(fiber) {\n  {\n    const stateHook = fiber.memoizedState;\n\n    if (stateHook !== null) {\n      // Only provide context if this fiber has been upgraded by a host\n      // transition. We use the same optimization for regular host context below.\n      push(hostTransitionProviderCursor, fiber);\n    }\n  }\n\n  const context = requiredContext(contextStackCursor$1.current);\n  const nextContext = getChildHostContext(context, fiber.type); // Don't push this Fiber's context unless it's unique.\n\n  if (context !== nextContext) {\n    // Track the context and the Fiber that provided it.\n    // This enables us to pop only Fibers that provide unique contexts.\n    push(contextFiberStackCursor, fiber);\n    push(contextStackCursor$1, nextContext);\n  }\n}\n\nfunction popHostContext(fiber) {\n  if (contextFiberStackCursor.current === fiber) {\n    // Do not pop unless this Fiber provided the current context.\n    // pushHostContext() only pushes Fibers that provide unique contexts.\n    pop(contextStackCursor$1);\n    pop(contextFiberStackCursor);\n  }\n\n  {\n    if (hostTransitionProviderCursor.current === fiber) {\n      // Do not pop unless this Fiber provided the current context. This is mostly\n      // a performance optimization, but conveniently it also prevents a potential\n      // data race where a host provider is upgraded (i.e. memoizedState becomes\n      // non-null) during a concurrent event. This is a bit of a flaw in the way\n      // we upgrade host components, but because we're accounting for it here, it\n      // should be fine.\n      pop(hostTransitionProviderCursor); // When popping the transition provider, we reset the context value back\n      // to `null`. We can do this because you're not allowd to nest forms. If\n      // we allowed for multiple nested host transition providers, then we'd\n      // need to reset this to the parent provider's status.\n\n      {\n        HostTransitionContext._currentValue = null;\n      }\n    }\n  }\n}\n\nconst NoFlags$1 =\n/*                      */\n0b0000000000000000000000000000;\nconst PerformedWork =\n/*                */\n0b0000000000000000000000000001;\nconst Placement =\n/*                    */\n0b0000000000000000000000000010;\nconst DidCapture =\n/*                   */\n0b0000000000000000000010000000;\nconst Hydrating =\n/*                    */\n0b0000000000000001000000000000; // You can change the rest (and add more).\n\nconst Update =\n/*                       */\n0b0000000000000000000000000100;\n/* Skipped value:                                 0b0000000000000000000000001000; */\n\nconst ChildDeletion =\n/*                */\n0b0000000000000000000000010000;\nconst ContentReset =\n/*                 */\n0b0000000000000000000000100000;\nconst Callback =\n/*                     */\n0b0000000000000000000001000000;\n/* Used by DidCapture:                            0b0000000000000000000010000000; */\n\nconst ForceClientRender =\n/*            */\n0b0000000000000000000100000000;\nconst Ref =\n/*                          */\n0b0000000000000000001000000000;\nconst Snapshot =\n/*                     */\n0b0000000000000000010000000000;\nconst Passive$1 =\n/*                      */\n0b0000000000000000100000000000;\n/* Used by Hydrating:                             0b0000000000000001000000000000; */\n\nconst Visibility =\n/*                   */\n0b0000000000000010000000000000;\nconst StoreConsistency =\n/*             */\n0b0000000000000100000000000000; // It's OK to reuse these bits because these flags are mutually exclusive for\n// different fiber types. We should really be doing this for as many flags as\n// possible, because we're about to run out of bits.\n\nconst ScheduleRetry = StoreConsistency;\nconst ShouldSuspendCommit = Visibility;\nconst DidDefer = ContentReset;\nconst LifecycleEffectMask = Passive$1 | Update | Callback | Ref | Snapshot | StoreConsistency; // Union of all commit flags (flags with the lifetime of a particular commit)\n\nconst HostEffectMask =\n/*               */\n0b0000000000000111111111111111; // These are not really side effects, but we still reuse this field.\n\nconst Incomplete =\n/*                   */\n0b0000000000001000000000000000;\nconst ShouldCapture =\n/*                */\n0b0000000000010000000000000000;\nconst ForceUpdateForLegacySuspense =\n/* */\n0b0000000000100000000000000000;\nconst Forked =\n/*                       */\n0b0000000100000000000000000000; // Static tags describe aspects of a fiber that are not specific to a render,\n// e.g. a fiber uses a passive effect (even if there are no updates on this particular render).\n// This enables us to defer more work in the unmount case,\n// since we can defer traversing the tree during layout to look for Passive effects,\n// and instead rely on the static flag as a signal that there may be cleanup work.\n\nconst RefStatic =\n/*                    */\n0b0000001000000000000000000000;\nconst LayoutStatic =\n/*                 */\n0b0000010000000000000000000000;\nconst PassiveStatic =\n/*                */\n0b0000100000000000000000000000;\nconst MaySuspendCommit =\n/*             */\n0b0001000000000000000000000000; // Flag used to identify newly inserted fibers. It isn't reset after commit unlike `Placement`.\n\nconst PlacementDEV =\n/*                 */\n0b0010000000000000000000000000;\n// don't contain effects, by checking subtreeFlags.\n\nconst BeforeMutationMask = // TODO: Remove Update flag from before mutation phase by re-landing Visibility\n// flag logic (see #20043)\nUpdate | Snapshot | (0);\nconst MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;\nconst LayoutMask = Update | Callback | Ref | Visibility; // TODO: Split into PassiveMountMask and PassiveUnmountMask\n\nconst PassiveMask = Passive$1 | Visibility | ChildDeletion; // Union of tags that don't get reset on clones.\n// This allows certain concepts to persist without recalculating them,\n// e.g. whether a subtree contains passive effects or portals.\n\nconst StaticMask = LayoutStatic | PassiveStatic | RefStatic | MaySuspendCommit;\n\n// This module only exists as an ESM wrapper around the external CommonJS\nconst scheduleCallback$3 = Scheduler.unstable_scheduleCallback;\nconst cancelCallback$1 = Scheduler.unstable_cancelCallback;\nconst shouldYield = Scheduler.unstable_shouldYield;\nconst requestPaint = Scheduler.unstable_requestPaint;\nconst now = Scheduler.unstable_now;\nconst getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;\nconst ImmediatePriority = Scheduler.unstable_ImmediatePriority;\nconst UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;\nconst NormalPriority$1 = Scheduler.unstable_NormalPriority;\nconst LowPriority = Scheduler.unstable_LowPriority;\nconst IdlePriority = Scheduler.unstable_IdlePriority; // this doesn't actually exist on the scheduler, but it *does*\n// on scheduler/unstable_mock, which we'll need for internal testing\n\nconst log$1 = Scheduler.log;\nconst unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;\n\nlet rendererID = null;\nlet injectedHook = null;\nfunction injectInternals(internals) {\n  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {\n    // No DevTools\n    return false;\n  }\n\n  const hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;\n\n  if (hook.isDisabled) {\n    // This isn't a real property on the hook, but it can be set to opt out\n    // of DevTools integration and associated warnings and logs.\n    // https://github.com/facebook/react/issues/3877\n    return true;\n  }\n\n  if (!hook.supportsFiber) {\n\n\n    return true;\n  }\n\n  try {\n    if (enableSchedulingProfiler) ;\n\n    rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.\n\n    injectedHook = hook;\n  } catch (err) {\n  }\n\n  if (hook.checkDCE) {\n    // This is the real DevTools.\n    return true;\n  } else {\n    // This is likely a hook installed by Fast Refresh runtime.\n    return false;\n  }\n}\nfunction onCommitRoot(root, eventPriority) {\n  if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') {\n    try {\n      const didError = (root.current.flags & DidCapture) === DidCapture;\n\n      if (enableProfilerTimer) ; else {\n        injectedHook.onCommitFiberRoot(rendererID, root, undefined, didError);\n      }\n    } catch (err) {\n    }\n  }\n}\nfunction onPostCommitRoot(root) {\n  if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === 'function') {\n    try {\n      injectedHook.onPostCommitFiberRoot(rendererID, root);\n    } catch (err) {\n    }\n  }\n}\nfunction onCommitUnmount(fiber) {\n  if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') {\n    try {\n      injectedHook.onCommitFiberUnmount(rendererID, fiber);\n    } catch (err) {\n    }\n  }\n}\nfunction setIsStrictModeForDevtools(newIsStrictMode) {\n  {\n    if (typeof log$1 === 'function') {\n      // We're in a test because Scheduler.log only exists\n      // in SchedulerMock. To reduce the noise in strict mode tests,\n      // suppress warnings and disable scheduler yielding during the double render\n      unstable_setDisableYieldValue(newIsStrictMode);\n    }\n\n    if (injectedHook && typeof injectedHook.setStrictMode === 'function') {\n      try {\n        injectedHook.setStrictMode(rendererID, newIsStrictMode);\n      } catch (err) {\n      }\n    }\n  }\n} // Profiler API hooks\n\nfunction injectProfilingHooks(profilingHooks) {\n}\n\nfunction getLaneLabelMap() {\n  {\n    return null;\n  }\n}\n\nconst NoMode =\n/*                         */\n0b0000000; // TODO: Remove ConcurrentMode by reading from the root tag instead\n\nconst ConcurrentMode =\n/*                 */\n0b0000001;\nconst ProfileMode =\n/*                    */\n0b0000010;\nconst StrictLegacyMode =\n/*               */\n0b0001000;\nconst StrictEffectsMode =\n/*              */\n0b0010000;\n\n// TODO: This is pretty well supported by browsers. Maybe we can drop it.\nconst clz32 = Math.clz32 ? Math.clz32 : clz32Fallback; // Count leading zeros.\n// Based on:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32\n\nconst log = Math.log;\nconst LN2 = Math.LN2;\n\nfunction clz32Fallback(x) {\n  const asUint = x >>> 0;\n\n  if (asUint === 0) {\n    return 32;\n  }\n\n  return 31 - (log(asUint) / LN2 | 0) | 0;\n}\n\n// TODO: Ideally these types would be opaque but that doesn't work well with\n// If those values are changed that package should be rebuilt and redeployed.\n\nconst TotalLanes = 31;\nconst NoLanes =\n/*                        */\n0b0000000000000000000000000000000;\nconst NoLane =\n/*                          */\n0b0000000000000000000000000000000;\nconst SyncHydrationLane =\n/*               */\n0b0000000000000000000000000000001;\nconst SyncLane =\n/*                        */\n0b0000000000000000000000000000010;\nconst SyncLaneIndex = 1;\nconst InputContinuousHydrationLane =\n/*    */\n0b0000000000000000000000000000100;\nconst InputContinuousLane =\n/*             */\n0b0000000000000000000000000001000;\nconst DefaultHydrationLane =\n/*            */\n0b0000000000000000000000000010000;\nconst DefaultLane =\n/*                     */\n0b0000000000000000000000000100000;\nconst SyncUpdateLanes = SyncLane | InputContinuousLane | DefaultLane ;\nconst TransitionHydrationLane =\n/*                */\n0b0000000000000000000000001000000;\nconst TransitionLanes =\n/*                       */\n0b0000000001111111111111110000000;\nconst TransitionLane1 =\n/*                        */\n0b0000000000000000000000010000000;\nconst TransitionLane2 =\n/*                        */\n0b0000000000000000000000100000000;\nconst TransitionLane3 =\n/*                        */\n0b0000000000000000000001000000000;\nconst TransitionLane4 =\n/*                        */\n0b0000000000000000000010000000000;\nconst TransitionLane5 =\n/*                        */\n0b0000000000000000000100000000000;\nconst TransitionLane6 =\n/*                        */\n0b0000000000000000001000000000000;\nconst TransitionLane7 =\n/*                        */\n0b0000000000000000010000000000000;\nconst TransitionLane8 =\n/*                        */\n0b0000000000000000100000000000000;\nconst TransitionLane9 =\n/*                        */\n0b0000000000000001000000000000000;\nconst TransitionLane10 =\n/*                       */\n0b0000000000000010000000000000000;\nconst TransitionLane11 =\n/*                       */\n0b0000000000000100000000000000000;\nconst TransitionLane12 =\n/*                       */\n0b0000000000001000000000000000000;\nconst TransitionLane13 =\n/*                       */\n0b0000000000010000000000000000000;\nconst TransitionLane14 =\n/*                       */\n0b0000000000100000000000000000000;\nconst TransitionLane15 =\n/*                       */\n0b0000000001000000000000000000000;\nconst RetryLanes =\n/*                            */\n0b0000011110000000000000000000000;\nconst RetryLane1 =\n/*                             */\n0b0000000010000000000000000000000;\nconst RetryLane2 =\n/*                             */\n0b0000000100000000000000000000000;\nconst RetryLane3 =\n/*                             */\n0b0000001000000000000000000000000;\nconst RetryLane4 =\n/*                             */\n0b0000010000000000000000000000000;\nconst SomeRetryLane = RetryLane1;\nconst SelectiveHydrationLane =\n/*          */\n0b0000100000000000000000000000000;\nconst NonIdleLanes =\n/*                          */\n0b0000111111111111111111111111111;\nconst IdleHydrationLane =\n/*               */\n0b0001000000000000000000000000000;\nconst IdleLane =\n/*                        */\n0b0010000000000000000000000000000;\nconst OffscreenLane =\n/*                   */\n0b0100000000000000000000000000000;\nconst DeferredLane =\n/*                    */\n0b1000000000000000000000000000000; // Any lane that might schedule an update. This is used to detect infinite\n// update loops, so it doesn't include hydration lanes or retries.\n\nconst UpdateLanes = SyncLane | InputContinuousLane | DefaultLane | TransitionLanes; // This function is used for the experimental timeline (react-devtools-timeline)\nconst NoTimestamp = -1;\nlet nextTransitionLane = TransitionLane1;\nlet nextRetryLane = RetryLane1;\n\nfunction getHighestPriorityLanes(lanes) {\n  {\n    const pendingSyncLanes = lanes & SyncUpdateLanes;\n\n    if (pendingSyncLanes !== 0) {\n      return pendingSyncLanes;\n    }\n  }\n\n  switch (getHighestPriorityLane(lanes)) {\n    case SyncHydrationLane:\n      return SyncHydrationLane;\n\n    case SyncLane:\n      return SyncLane;\n\n    case InputContinuousHydrationLane:\n      return InputContinuousHydrationLane;\n\n    case InputContinuousLane:\n      return InputContinuousLane;\n\n    case DefaultHydrationLane:\n      return DefaultHydrationLane;\n\n    case DefaultLane:\n      return DefaultLane;\n\n    case TransitionHydrationLane:\n      return TransitionHydrationLane;\n\n    case TransitionLane1:\n    case TransitionLane2:\n    case TransitionLane3:\n    case TransitionLane4:\n    case TransitionLane5:\n    case TransitionLane6:\n    case TransitionLane7:\n    case TransitionLane8:\n    case TransitionLane9:\n    case TransitionLane10:\n    case TransitionLane11:\n    case TransitionLane12:\n    case TransitionLane13:\n    case TransitionLane14:\n    case TransitionLane15:\n      return lanes & TransitionLanes;\n\n    case RetryLane1:\n    case RetryLane2:\n    case RetryLane3:\n    case RetryLane4:\n      return lanes & RetryLanes;\n\n    case SelectiveHydrationLane:\n      return SelectiveHydrationLane;\n\n    case IdleHydrationLane:\n      return IdleHydrationLane;\n\n    case IdleLane:\n      return IdleLane;\n\n    case OffscreenLane:\n      return OffscreenLane;\n\n    case DeferredLane:\n      // This shouldn't be reachable because deferred work is always entangled\n      // with something else.\n      return NoLanes;\n\n    default:\n\n\n      return lanes;\n  }\n}\n\nfunction getNextLanes(root, wipLanes) {\n  // Early bailout if there's no pending work left.\n  const pendingLanes = root.pendingLanes;\n\n  if (pendingLanes === NoLanes) {\n    return NoLanes;\n  }\n\n  let nextLanes = NoLanes;\n  const suspendedLanes = root.suspendedLanes;\n  const pingedLanes = root.pingedLanes; // Do not work on any idle work until all the non-idle work has finished,\n  // even if the work is suspended.\n\n  const nonIdlePendingLanes = pendingLanes & NonIdleLanes;\n\n  if (nonIdlePendingLanes !== NoLanes) {\n    const nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;\n\n    if (nonIdleUnblockedLanes !== NoLanes) {\n      nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);\n    } else {\n      const nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;\n\n      if (nonIdlePingedLanes !== NoLanes) {\n        nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);\n      }\n    }\n  } else {\n    // The only remaining work is Idle.\n    const unblockedLanes = pendingLanes & ~suspendedLanes;\n\n    if (unblockedLanes !== NoLanes) {\n      nextLanes = getHighestPriorityLanes(unblockedLanes);\n    } else {\n      if (pingedLanes !== NoLanes) {\n        nextLanes = getHighestPriorityLanes(pingedLanes);\n      }\n    }\n  }\n\n  if (nextLanes === NoLanes) {\n    // This should only be reachable if we're suspended\n    // TODO: Consider warning in this path if a fallback timer is not scheduled.\n    return NoLanes;\n  } // If we're already in the middle of a render, switching lanes will interrupt\n  // it and we'll lose our progress. We should only do this if the new lanes are\n  // higher priority.\n\n\n  if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't\n  // bother waiting until the root is complete.\n  (wipLanes & suspendedLanes) === NoLanes) {\n    const nextLane = getHighestPriorityLane(nextLanes);\n    const wipLane = getHighestPriorityLane(wipLanes);\n\n    if ( // Tests whether the next lane is equal or lower priority than the wip\n    // one. This works because the bits decrease in priority as you go left.\n    nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The\n    // only difference between default updates and transition updates is that\n    // default updates do not support refresh transitions.\n    nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes) {\n      // Keep working on the existing in-progress tree. Do not interrupt.\n      return wipLanes;\n    }\n  }\n\n  return nextLanes;\n}\nfunction getEntangledLanes(root, renderLanes) {\n  let entangledLanes = renderLanes;\n\n  if ((entangledLanes & InputContinuousLane) !== NoLanes) {\n    // When updates are sync by default, we entangle continuous priority updates\n    // and default updates, so they render in the same batch. The only reason\n    // they use separate lanes is because continuous updates should interrupt\n    // transitions, but default updates should not.\n    entangledLanes |= entangledLanes & DefaultLane;\n  } // Check for entangled lanes and add them to the batch.\n  //\n  // A lane is said to be entangled with another when it's not allowed to render\n  // in a batch that does not also include the other lane. Typically we do this\n  // when multiple updates have the same source, and we only want to respond to\n  // the most recent event from that source.\n  //\n  // Note that we apply entanglements *after* checking for partial work above.\n  // This means that if a lane is entangled during an interleaved event while\n  // it's already rendering, we won't interrupt it. This is intentional, since\n  // entanglement is usually \"best effort\": we'll try our best to render the\n  // lanes in the same batch, but it's not worth throwing out partially\n  // completed work in order to do it.\n  // TODO: Reconsider this. The counter-argument is that the partial work\n  // represents an intermediate state, which we don't want to show to the user.\n  // And by spending extra time finishing it, we're increasing the amount of\n  // time it takes to show the final state, which is what they are actually\n  // waiting for.\n  //\n  // For those exceptions where entanglement is semantically important,\n  // we should ensure that there is no partial work at the\n  // time we apply the entanglement.\n\n\n  const allEntangledLanes = root.entangledLanes;\n\n  if (allEntangledLanes !== NoLanes) {\n    const entanglements = root.entanglements;\n    let lanes = entangledLanes & allEntangledLanes;\n\n    while (lanes > 0) {\n      const index = pickArbitraryLaneIndex(lanes);\n      const lane = 1 << index;\n      entangledLanes |= entanglements[index];\n      lanes &= ~lane;\n    }\n  }\n\n  return entangledLanes;\n}\n\nfunction computeExpirationTime(lane, currentTime) {\n  switch (lane) {\n    case SyncHydrationLane:\n    case SyncLane:\n    case InputContinuousHydrationLane:\n    case InputContinuousLane:\n      // User interactions should expire slightly more quickly.\n      //\n      // NOTE: This is set to the corresponding constant as in Scheduler.js.\n      // When we made it larger, a product metric in www regressed, suggesting\n      // there's a user interaction that's being starved by a series of\n      // synchronous updates. If that theory is correct, the proper solution is\n      // to fix the starvation. However, this scenario supports the idea that\n      // expiration times are an important safeguard when starvation\n      // does happen.\n      return currentTime + syncLaneExpirationMs;\n\n    case DefaultHydrationLane:\n    case DefaultLane:\n    case TransitionHydrationLane:\n    case TransitionLane1:\n    case TransitionLane2:\n    case TransitionLane3:\n    case TransitionLane4:\n    case TransitionLane5:\n    case TransitionLane6:\n    case TransitionLane7:\n    case TransitionLane8:\n    case TransitionLane9:\n    case TransitionLane10:\n    case TransitionLane11:\n    case TransitionLane12:\n    case TransitionLane13:\n    case TransitionLane14:\n    case TransitionLane15:\n      return currentTime + transitionLaneExpirationMs;\n\n    case RetryLane1:\n    case RetryLane2:\n    case RetryLane3:\n    case RetryLane4:\n      // TODO: Retries should be allowed to expire if they are CPU bound for\n      // too long, but when I made this change it caused a spike in browser\n      // crashes. There must be some other underlying bug; not super urgent but\n      // ideally should figure out why and fix it. Unfortunately we don't have\n      // a repro for the crashes, only detected via production metrics.\n      return NoTimestamp;\n\n    case SelectiveHydrationLane:\n    case IdleHydrationLane:\n    case IdleLane:\n    case OffscreenLane:\n    case DeferredLane:\n      // Anything idle priority or lower should never expire.\n      return NoTimestamp;\n\n    default:\n\n      return NoTimestamp;\n  }\n}\n\nfunction markStarvedLanesAsExpired(root, currentTime) {\n  // TODO: This gets called every time we yield. We can optimize by storing\n  // the earliest expiration time on the root. Then use that to quickly bail out\n  // of this function.\n  const pendingLanes = root.pendingLanes;\n  const suspendedLanes = root.suspendedLanes;\n  const pingedLanes = root.pingedLanes;\n  const expirationTimes = root.expirationTimes; // Iterate through the pending lanes and check if we've reached their\n  // expiration time. If so, we'll assume the update is being starved and mark\n  // it as expired to force it to finish.\n  // TODO: We should be able to replace this with upgradePendingLanesToSync\n  //\n  // We exclude retry lanes because those must always be time sliced, in order\n  // to unwrap uncached promises.\n  // TODO: Write a test for this\n\n  let lanes = pendingLanes & ~RetryLanes;\n\n  while (lanes > 0) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n    const expirationTime = expirationTimes[index];\n\n    if (expirationTime === NoTimestamp) {\n      // Found a pending lane with no expiration time. If it's not suspended, or\n      // if it's pinged, assume it's CPU-bound. Compute a new expiration time\n      // using the current time.\n      if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {\n        // Assumes timestamps are monotonically increasing.\n        expirationTimes[index] = computeExpirationTime(lane, currentTime);\n      }\n    } else if (expirationTime <= currentTime) {\n      // This lane expired\n      root.expiredLanes |= lane;\n    }\n\n    lanes &= ~lane;\n  }\n} // This returns the highest priority pending lanes regardless of whether they\n// are suspended.\n\nfunction getHighestPriorityPendingLanes(root) {\n  return getHighestPriorityLanes(root.pendingLanes);\n}\nfunction getLanesToRetrySynchronouslyOnError(root, originallyAttemptedLanes) {\n  if (root.errorRecoveryDisabledLanes & originallyAttemptedLanes) {\n    // The error recovery mechanism is disabled until these lanes are cleared.\n    return NoLanes;\n  }\n\n  const everythingButOffscreen = root.pendingLanes & ~OffscreenLane;\n\n  if (everythingButOffscreen !== NoLanes) {\n    return everythingButOffscreen;\n  }\n\n  if (everythingButOffscreen & OffscreenLane) {\n    return OffscreenLane;\n  }\n\n  return NoLanes;\n}\nfunction includesSyncLane(lanes) {\n  return (lanes & (SyncLane | SyncHydrationLane)) !== NoLanes;\n}\nfunction includesNonIdleWork(lanes) {\n  return (lanes & NonIdleLanes) !== NoLanes;\n}\nfunction includesOnlyRetries(lanes) {\n  return (lanes & RetryLanes) === lanes;\n}\nfunction includesOnlyNonUrgentLanes(lanes) {\n  // TODO: Should hydration lanes be included here? This function is only\n  // used in `updateDeferredValueImpl`.\n  const UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;\n  return (lanes & UrgentLanes) === NoLanes;\n}\nfunction includesOnlyTransitions(lanes) {\n  return (lanes & TransitionLanes) === lanes;\n}\nfunction includesBlockingLane(root, lanes) {\n\n  const SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;\n  return (lanes & SyncDefaultLanes) !== NoLanes;\n}\nfunction includesExpiredLane(root, lanes) {\n  // This is a separate check from includesBlockingLane because a lane can\n  // expire after a render has already started.\n  return (lanes & root.expiredLanes) !== NoLanes;\n}\nfunction isTransitionLane(lane) {\n  return (lane & TransitionLanes) !== NoLanes;\n}\nfunction claimNextTransitionLane() {\n  // Cycle through the lanes, assigning each new transition to the next lane.\n  // In most cases, this means every transition gets its own lane, until we\n  // run out of lanes and cycle back to the beginning.\n  const lane = nextTransitionLane;\n  nextTransitionLane <<= 1;\n\n  if ((nextTransitionLane & TransitionLanes) === NoLanes) {\n    nextTransitionLane = TransitionLane1;\n  }\n\n  return lane;\n}\nfunction claimNextRetryLane() {\n  const lane = nextRetryLane;\n  nextRetryLane <<= 1;\n\n  if ((nextRetryLane & RetryLanes) === NoLanes) {\n    nextRetryLane = RetryLane1;\n  }\n\n  return lane;\n}\nfunction getHighestPriorityLane(lanes) {\n  return lanes & -lanes;\n}\nfunction pickArbitraryLane(lanes) {\n  // This wrapper function gets inlined. Only exists so to communicate that it\n  // doesn't matter which bit is selected; you can pick any bit without\n  // affecting the algorithms where its used. Here I'm using\n  // getHighestPriorityLane because it requires the fewest operations.\n  return getHighestPriorityLane(lanes);\n}\n\nfunction pickArbitraryLaneIndex(lanes) {\n  return 31 - clz32(lanes);\n}\n\nfunction laneToIndex(lane) {\n  return pickArbitraryLaneIndex(lane);\n}\n\nfunction includesSomeLane(a, b) {\n  return (a & b) !== NoLanes;\n}\nfunction isSubsetOfLanes(set, subset) {\n  return (set & subset) === subset;\n}\nfunction mergeLanes(a, b) {\n  return a | b;\n}\nfunction removeLanes(set, subset) {\n  return set & ~subset;\n}\nfunction intersectLanes(a, b) {\n  return a & b;\n} // Seems redundant, but it changes the type from a single lane (used for\n// updates) to a group of lanes (used for flushing work).\n\nfunction laneToLanes(lane) {\n  return lane;\n}\nfunction higherPriorityLane(a, b) {\n  // This works because the bit ranges decrease in priority as you go left.\n  return a !== NoLane && a < b ? a : b;\n}\nfunction createLaneMap(initial) {\n  // Intentionally pushing one by one.\n  // https://v8.dev/blog/elements-kinds#avoid-creating-holes\n  const laneMap = [];\n\n  for (let i = 0; i < TotalLanes; i++) {\n    laneMap.push(initial);\n  }\n\n  return laneMap;\n}\nfunction markRootUpdated$1(root, updateLane) {\n  root.pendingLanes |= updateLane; // If there are any suspended transitions, it's possible this new update\n  // could unblock them. Clear the suspended lanes so that we can try rendering\n  // them again.\n  //\n  // TODO: We really only need to unsuspend only lanes that are in the\n  // `subtreeLanes` of the updated fiber, or the update lanes of the return\n  // path. This would exclude suspended updates in an unrelated sibling tree,\n  // since there's no way for this update to unblock it.\n  //\n  // We don't do this if the incoming update is idle, because we never process\n  // idle updates until after all the regular updates have finished; there's no\n  // way it could unblock a transition.\n\n  if (updateLane !== IdleLane) {\n    root.suspendedLanes = NoLanes;\n    root.pingedLanes = NoLanes;\n  }\n}\nfunction markRootSuspended$1(root, suspendedLanes, spawnedLane) {\n  root.suspendedLanes |= suspendedLanes;\n  root.pingedLanes &= ~suspendedLanes; // The suspended lanes are no longer CPU-bound. Clear their expiration times.\n\n  const expirationTimes = root.expirationTimes;\n  let lanes = suspendedLanes;\n\n  while (lanes > 0) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n    expirationTimes[index] = NoTimestamp;\n    lanes &= ~lane;\n  }\n\n  if (spawnedLane !== NoLane) {\n    markSpawnedDeferredLane(root, spawnedLane, suspendedLanes);\n  }\n}\nfunction markRootPinged$1(root, pingedLanes) {\n  root.pingedLanes |= root.suspendedLanes & pingedLanes;\n}\nfunction markRootFinished(root, remainingLanes, spawnedLane) {\n  const noLongerPendingLanes = root.pendingLanes & ~remainingLanes;\n  root.pendingLanes = remainingLanes; // Let's try everything again\n\n  root.suspendedLanes = NoLanes;\n  root.pingedLanes = NoLanes;\n  root.expiredLanes &= remainingLanes;\n  root.entangledLanes &= remainingLanes;\n  root.errorRecoveryDisabledLanes &= remainingLanes;\n  root.shellSuspendCounter = 0;\n  const entanglements = root.entanglements;\n  const expirationTimes = root.expirationTimes;\n  const hiddenUpdates = root.hiddenUpdates; // Clear the lanes that no longer have pending work\n\n  let lanes = noLongerPendingLanes;\n\n  while (lanes > 0) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n    entanglements[index] = NoLanes;\n    expirationTimes[index] = NoTimestamp;\n    const hiddenUpdatesForLane = hiddenUpdates[index];\n\n    if (hiddenUpdatesForLane !== null) {\n      hiddenUpdates[index] = null; // \"Hidden\" updates are updates that were made to a hidden component. They\n      // have special logic associated with them because they may be entangled\n      // with updates that occur outside that tree. But once the outer tree\n      // commits, they behave like regular updates.\n\n      for (let i = 0; i < hiddenUpdatesForLane.length; i++) {\n        const update = hiddenUpdatesForLane[i];\n\n        if (update !== null) {\n          update.lane &= ~OffscreenLane;\n        }\n      }\n    }\n\n    lanes &= ~lane;\n  }\n\n  if (spawnedLane !== NoLane) {\n    markSpawnedDeferredLane(root, spawnedLane, // This render finished successfully without suspending, so we don't need\n    // to entangle the spawned task with the parent task.\n    NoLanes);\n  }\n}\n\nfunction markSpawnedDeferredLane(root, spawnedLane, entangledLanes) {\n  // This render spawned a deferred task. Mark it as pending.\n  root.pendingLanes |= spawnedLane;\n  root.suspendedLanes &= ~spawnedLane; // Entangle the spawned lane with the DeferredLane bit so that we know it\n  // was the result of another render. This lets us avoid a useDeferredValue\n  // waterfall — only the first level will defer.\n\n  const spawnedLaneIndex = laneToIndex(spawnedLane);\n  root.entangledLanes |= spawnedLane;\n  root.entanglements[spawnedLaneIndex] |= DeferredLane | // If the parent render task suspended, we must also entangle those lanes\n  // with the spawned task, so that the deferred task includes all the same\n  // updates that the parent task did. We can exclude any lane that is not\n  // used for updates (e.g. Offscreen).\n  entangledLanes & UpdateLanes;\n}\n\nfunction markRootEntangled(root, entangledLanes) {\n  // In addition to entangling each of the given lanes with each other, we also\n  // have to consider _transitive_ entanglements. For each lane that is already\n  // entangled with *any* of the given lanes, that lane is now transitively\n  // entangled with *all* the given lanes.\n  //\n  // Translated: If C is entangled with A, then entangling A with B also\n  // entangles C with B.\n  //\n  // If this is hard to grasp, it might help to intentionally break this\n  // function and look at the tests that fail in ReactTransition-test.js. Try\n  // commenting out one of the conditions below.\n  const rootEntangledLanes = root.entangledLanes |= entangledLanes;\n  const entanglements = root.entanglements;\n  let lanes = rootEntangledLanes;\n\n  while (lanes) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n\n    if ( // Is this one of the newly entangled lanes?\n    lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?\n    entanglements[index] & entangledLanes) {\n      entanglements[index] |= entangledLanes;\n    }\n\n    lanes &= ~lane;\n  }\n}\nfunction upgradePendingLaneToSync(root, lane) {\n  // Since we're upgrading the priority of the given lane, there is now pending\n  // sync work.\n  root.pendingLanes |= SyncLane; // Entangle the sync lane with the lane we're upgrading. This means SyncLane\n  // will not be allowed to finish without also finishing the given lane.\n\n  root.entangledLanes |= SyncLane;\n  root.entanglements[SyncLaneIndex] |= lane;\n}\nfunction upgradePendingLanesToSync(root, lanesToUpgrade) {\n  // Same as upgradePendingLaneToSync but accepts multiple lanes, so it's a\n  // bit slower.\n  root.pendingLanes |= SyncLane;\n  root.entangledLanes |= SyncLane;\n  let lanes = lanesToUpgrade;\n\n  while (lanes) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n    root.entanglements[SyncLaneIndex] |= lane;\n    lanes &= ~lane;\n  }\n}\nfunction markHiddenUpdate(root, update, lane) {\n  const index = laneToIndex(lane);\n  const hiddenUpdates = root.hiddenUpdates;\n  const hiddenUpdatesForLane = hiddenUpdates[index];\n\n  if (hiddenUpdatesForLane === null) {\n    hiddenUpdates[index] = [update];\n  } else {\n    hiddenUpdatesForLane.push(update);\n  }\n\n  update.lane = lane | OffscreenLane;\n}\nfunction getBumpedLaneForHydration(root, renderLanes) {\n  const renderLane = getHighestPriorityLane(renderLanes);\n  let lane;\n\n  if ((renderLane & SyncUpdateLanes) !== NoLane) {\n    lane = SyncHydrationLane;\n  } else {\n    switch (renderLane) {\n      case SyncLane:\n        lane = SyncHydrationLane;\n        break;\n\n      case InputContinuousLane:\n        lane = InputContinuousHydrationLane;\n        break;\n\n      case DefaultLane:\n        lane = DefaultHydrationLane;\n        break;\n\n      case TransitionLane1:\n      case TransitionLane2:\n      case TransitionLane3:\n      case TransitionLane4:\n      case TransitionLane5:\n      case TransitionLane6:\n      case TransitionLane7:\n      case TransitionLane8:\n      case TransitionLane9:\n      case TransitionLane10:\n      case TransitionLane11:\n      case TransitionLane12:\n      case TransitionLane13:\n      case TransitionLane14:\n      case TransitionLane15:\n      case RetryLane1:\n      case RetryLane2:\n      case RetryLane3:\n      case RetryLane4:\n        lane = TransitionHydrationLane;\n        break;\n\n      case IdleLane:\n        lane = IdleHydrationLane;\n        break;\n\n      default:\n        // Everything else is already either a hydration lane, or shouldn't\n        // be retried at a hydration lane.\n        lane = NoLane;\n        break;\n    }\n  } // Check if the lane we chose is suspended. If so, that indicates that we\n  // already attempted and failed to hydrate at that level. Also check if we're\n  // already rendering that lane, which is rare but could happen.\n\n\n  if ((lane & (root.suspendedLanes | renderLanes)) !== NoLane) {\n    // Give up trying to hydrate and fall back to client render.\n    return NoLane;\n  }\n\n  return lane;\n}\nfunction getTransitionsForLanes(root, lanes) {\n  {\n    return null;\n  }\n}\n\nconst DiscreteEventPriority = SyncLane;\nconst ContinuousEventPriority = InputContinuousLane;\nconst DefaultEventPriority = DefaultLane;\nconst IdleEventPriority = IdleLane;\nlet currentUpdatePriority = NoLane;\nfunction getCurrentUpdatePriority() {\n  return currentUpdatePriority;\n}\nfunction setCurrentUpdatePriority(newPriority) {\n  currentUpdatePriority = newPriority;\n}\nfunction runWithPriority(priority, fn) {\n  const previousPriority = currentUpdatePriority;\n\n  try {\n    currentUpdatePriority = priority;\n    return fn();\n  } finally {\n    currentUpdatePriority = previousPriority;\n  }\n}\nfunction higherEventPriority(a, b) {\n  return a !== 0 && a < b ? a : b;\n}\nfunction lowerEventPriority(a, b) {\n  return a === 0 || a > b ? a : b;\n}\nfunction isHigherEventPriority(a, b) {\n  return a !== 0 && a < b;\n}\nfunction lanesToEventPriority(lanes) {\n  const lane = getHighestPriorityLane(lanes);\n\n  if (!isHigherEventPriority(DiscreteEventPriority, lane)) {\n    return DiscreteEventPriority;\n  }\n\n  if (!isHigherEventPriority(ContinuousEventPriority, lane)) {\n    return ContinuousEventPriority;\n  }\n\n  if (includesNonIdleWork(lane)) {\n    return DefaultEventPriority;\n  }\n\n  return IdleEventPriority;\n}\n\n// $FlowFixMe[method-unbinding]\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\nconst FunctionComponent = 0;\nconst ClassComponent = 1;\nconst IndeterminateComponent = 2; // Before we know whether it is function or class\n\nconst HostRoot = 3; // Root of a host tree. Could be nested inside another node.\n\nconst HostPortal = 4; // A subtree. Could be an entry point to a different renderer.\n\nconst HostComponent = 5;\nconst HostText = 6;\nconst Fragment = 7;\nconst Mode = 8;\nconst ContextConsumer = 9;\nconst ContextProvider = 10;\nconst ForwardRef = 11;\nconst Profiler = 12;\nconst SuspenseComponent = 13;\nconst MemoComponent = 14;\nconst SimpleMemoComponent = 15;\nconst LazyComponent = 16;\nconst IncompleteClassComponent = 17;\nconst DehydratedFragment = 18;\nconst SuspenseListComponent = 19;\nconst ScopeComponent = 21;\nconst OffscreenComponent = 22;\nconst LegacyHiddenComponent = 23;\nconst CacheComponent = 24;\nconst TracingMarkerComponent = 25;\nconst HostHoistable = 26;\nconst HostSingleton = 27;\n\nconst randomKey = Math.random().toString(36).slice(2);\nconst internalInstanceKey = '__reactFiber$' + randomKey;\nconst internalPropsKey = '__reactProps$' + randomKey;\nconst internalContainerInstanceKey = '__reactContainer$' + randomKey;\nconst internalEventHandlersKey = '__reactEvents$' + randomKey;\nconst internalEventHandlerListenersKey = '__reactListeners$' + randomKey;\nconst internalEventHandlesSetKey = '__reactHandles$' + randomKey;\nconst internalRootNodeResourcesKey = '__reactResources$' + randomKey;\nconst internalHoistableMarker = '__reactMarker$' + randomKey;\nfunction detachDeletedInstance(node) {\n  // TODO: This function is only called on host components. I don't think all of\n  // these fields are relevant.\n  delete node[internalInstanceKey];\n  delete node[internalPropsKey];\n  delete node[internalEventHandlersKey];\n  delete node[internalEventHandlerListenersKey];\n  delete node[internalEventHandlesSetKey];\n}\nfunction precacheFiberNode(hostInst, node) {\n  node[internalInstanceKey] = hostInst;\n}\nfunction markContainerAsRoot(hostRoot, node) {\n  // $FlowFixMe[prop-missing]\n  node[internalContainerInstanceKey] = hostRoot;\n}\nfunction unmarkContainerAsRoot(node) {\n  // $FlowFixMe[prop-missing]\n  node[internalContainerInstanceKey] = null;\n}\nfunction isContainerMarkedAsRoot(node) {\n  // $FlowFixMe[prop-missing]\n  return !!node[internalContainerInstanceKey];\n} // Given a DOM node, return the closest HostComponent or HostText fiber ancestor.\n// If the target node is part of a hydrated or not yet rendered subtree, then\n// this may also return a SuspenseComponent or HostRoot to indicate that.\n// Conceptually the HostRoot fiber is a child of the Container node. So if you\n// pass the Container node as the targetNode, you will not actually get the\n// HostRoot back. To get to the HostRoot, you need to pass a child of it.\n// The same thing applies to Suspense boundaries.\n\nfunction getClosestInstanceFromNode(targetNode) {\n  let targetInst = targetNode[internalInstanceKey];\n\n  if (targetInst) {\n    // Don't return HostRoot or SuspenseComponent here.\n    return targetInst;\n  } // If the direct event target isn't a React owned DOM node, we need to look\n  // to see if one of its parents is a React owned DOM node.\n\n\n  let parentNode = targetNode.parentNode;\n\n  while (parentNode) {\n    // We'll check if this is a container root that could include\n    // React nodes in the future. We need to check this first because\n    // if we're a child of a dehydrated container, we need to first\n    // find that inner container before moving on to finding the parent\n    // instance. Note that we don't check this field on  the targetNode\n    // itself because the fibers are conceptually between the container\n    // node and the first child. It isn't surrounding the container node.\n    // If it's not a container, we check if it's an instance.\n    targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];\n\n    if (targetInst) {\n      // Since this wasn't the direct target of the event, we might have\n      // stepped past dehydrated DOM nodes to get here. However they could\n      // also have been non-React nodes. We need to answer which one.\n      // If we the instance doesn't have any children, then there can't be\n      // a nested suspense boundary within it. So we can use this as a fast\n      // bailout. Most of the time, when people add non-React children to\n      // the tree, it is using a ref to a child-less DOM node.\n      // Normally we'd only need to check one of the fibers because if it\n      // has ever gone from having children to deleting them or vice versa\n      // it would have deleted the dehydrated boundary nested inside already.\n      // However, since the HostRoot starts out with an alternate it might\n      // have one on the alternate so we need to check in case this was a\n      // root.\n      const alternate = targetInst.alternate;\n\n      if (targetInst.child !== null || alternate !== null && alternate.child !== null) {\n        // Next we need to figure out if the node that skipped past is\n        // nested within a dehydrated boundary and if so, which one.\n        let suspenseInstance = getParentSuspenseInstance(targetNode);\n\n        while (suspenseInstance !== null) {\n          // We found a suspense instance. That means that we haven't\n          // hydrated it yet. Even though we leave the comments in the\n          // DOM after hydrating, and there are boundaries in the DOM\n          // that could already be hydrated, we wouldn't have found them\n          // through this pass since if the target is hydrated it would\n          // have had an internalInstanceKey on it.\n          // Let's get the fiber associated with the SuspenseComponent\n          // as the deepest instance.\n          // $FlowFixMe[prop-missing]\n          const targetSuspenseInst = suspenseInstance[internalInstanceKey];\n\n          if (targetSuspenseInst) {\n            return targetSuspenseInst;\n          } // If we don't find a Fiber on the comment, it might be because\n          // we haven't gotten to hydrate it yet. There might still be a\n          // parent boundary that hasn't above this one so we need to find\n          // the outer most that is known.\n\n\n          suspenseInstance = getParentSuspenseInstance(suspenseInstance); // If we don't find one, then that should mean that the parent\n          // host component also hasn't hydrated yet. We can return it\n          // below since it will bail out on the isMounted check later.\n        }\n      }\n\n      return targetInst;\n    }\n\n    targetNode = parentNode;\n    parentNode = targetNode.parentNode;\n  }\n\n  return null;\n}\n/**\n * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent\n * instance, or null if the node was not rendered by this React.\n */\n\nfunction getInstanceFromNode(node) {\n  const inst = node[internalInstanceKey] || node[internalContainerInstanceKey];\n\n  if (inst) {\n    const tag = inst.tag;\n\n    if (tag === HostComponent || tag === HostText || tag === SuspenseComponent || tag === HostHoistable || tag === HostSingleton || tag === HostRoot) {\n      return inst;\n    } else {\n      return null;\n    }\n  }\n\n  return null;\n}\n/**\n * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding\n * DOM node.\n */\n\nfunction getNodeFromInstance(inst) {\n  const tag = inst.tag;\n\n  if (tag === HostComponent || tag === HostHoistable || tag === HostSingleton || tag === HostText) {\n    // In Fiber this, is just the state node right now. We assume it will be\n    // a host component or host text.\n    return inst.stateNode;\n  } // Without this first invariant, passing a non-DOM-component triggers the next\n  // invariant for a missing parent, which is super confusing.\n\n\n  throw Error(formatProdErrorMessage(33));\n}\nfunction getFiberCurrentPropsFromNode(node) {\n  return node[internalPropsKey] || null;\n}\nfunction updateFiberProps(node, props) {\n  node[internalPropsKey] = props;\n}\nfunction getEventListenerSet(node) {\n  let elementListenerSet = node[internalEventHandlersKey];\n\n  if (elementListenerSet === undefined) {\n    elementListenerSet = node[internalEventHandlersKey] = new Set();\n  }\n\n  return elementListenerSet;\n}\nfunction getResourcesFromRoot(root) {\n  let resources = root[internalRootNodeResourcesKey];\n\n  if (!resources) {\n    resources = root[internalRootNodeResourcesKey] = {\n      hoistableStyles: new Map(),\n      hoistableScripts: new Map()\n    };\n  }\n\n  return resources;\n}\nfunction isMarkedHoistable(node) {\n  return !!node[internalHoistableMarker];\n}\nfunction markNodeAsHoistable(node) {\n  node[internalHoistableMarker] = true;\n}\nfunction isOwnedInstance(node) {\n  return !!(node[internalHoistableMarker] || node[internalInstanceKey]);\n}\n\nconst allNativeEvents = new Set();\n/**\n * Mapping from registration name to event name\n */\n\n\nconst registrationNameDependencies = {};\n\nfunction registerTwoPhaseEvent(registrationName, dependencies) {\n  registerDirectEvent(registrationName, dependencies);\n  registerDirectEvent(registrationName + 'Capture', dependencies);\n}\nfunction registerDirectEvent(registrationName, dependencies) {\n\n  registrationNameDependencies[registrationName] = dependencies;\n\n  for (let i = 0; i < dependencies.length; i++) {\n    allNativeEvents.add(dependencies[i]);\n  }\n}\n\nconst canUseDOM = !!(typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined');\n\n/* eslint-disable max-len */\n\nconst ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\n/* eslint-enable max-len */\n\nconst ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + '\\\\-.0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040';\nconst VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');\nconst illegalAttributeNameCache = {};\nconst validatedAttributeNameCache = {};\nfunction isAttributeNameSafe(attributeName) {\n  if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {\n    return true;\n  }\n\n  if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {\n    return false;\n  }\n\n  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {\n    validatedAttributeNameCache[attributeName] = true;\n    return true;\n  }\n\n  illegalAttributeNameCache[attributeName] = true;\n\n  return false;\n}\n\nfunction setValueForAttribute(node, name, value) {\n  if (isAttributeNameSafe(name)) {\n    // If the prop isn't in the special list, treat it as a simple attribute.\n    // shouldRemoveAttribute\n    if (value === null) {\n      node.removeAttribute(name);\n      return;\n    }\n\n    switch (typeof value) {\n      case 'undefined':\n      case 'function':\n      case 'symbol':\n        // eslint-disable-line\n        node.removeAttribute(name);\n        return;\n\n      case 'boolean':\n        {\n          const prefix = name.toLowerCase().slice(0, 5);\n\n          if (prefix !== 'data-' && prefix !== 'aria-') {\n            node.removeAttribute(name);\n            return;\n          }\n        }\n    }\n\n    node.setAttribute(name, '' + value);\n  }\n}\nfunction setValueForKnownAttribute(node, name, value) {\n  if (value === null) {\n    node.removeAttribute(name);\n    return;\n  }\n\n  switch (typeof value) {\n    case 'undefined':\n    case 'function':\n    case 'symbol':\n    case 'boolean':\n      {\n        node.removeAttribute(name);\n        return;\n      }\n  }\n\n  node.setAttribute(name, '' + value);\n}\nfunction setValueForNamespacedAttribute(node, namespace, name, value) {\n  if (value === null) {\n    node.removeAttribute(name);\n    return;\n  }\n\n  switch (typeof value) {\n    case 'undefined':\n    case 'function':\n    case 'symbol':\n    case 'boolean':\n      {\n        node.removeAttribute(name);\n        return;\n      }\n  }\n\n  node.setAttributeNS(namespace, name, '' + value);\n}\n\nlet prefix;\nfunction describeBuiltInComponentFrame(name, ownerFn) {\n  {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        const match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = match && match[1] || '';\n      }\n    } // We use the prefix to ensure our stacks line up with native stack frames.\n\n\n    return '\\n' + prefix + name;\n  }\n}\nfunction describeDebugInfoFrame(name, env) {\n  return describeBuiltInComponentFrame(name + (env ? ' (' + env + ')' : ''));\n}\nlet reentry = false;\nlet componentFrameCache;\n/**\n * Leverages native browser/VM stack frames to get proper details (e.g.\n * filename, line + col number) for a single component in a component stack. We\n * do this by:\n *   (1) throwing and catching an error in the function - this will be our\n *       control error.\n *   (2) calling the component which will eventually throw an error that we'll\n *       catch - this will be our sample error.\n *   (3) diffing the control and sample error stacks to find the stack frame\n *       which represents our component.\n */\n\n\nfunction describeNativeComponentFrame(fn, construct) {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if (!fn || reentry) {\n    return '';\n  }\n\n  reentry = true;\n  const previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe[incompatible-type] It does accept undefined.\n\n  Error.prepareStackTrace = undefined;\n  /**\n   * Finding a common stack frame between sample and control errors can be\n   * tricky given the different types and levels of stack trace truncation from\n   * different JS VMs. So instead we'll attempt to control what that common\n   * frame should be through this object method:\n   * Having both the sample and control errors be in the function under the\n   * `DescribeNativeComponentFrameRoot` property, + setting the `name` and\n   * `displayName` properties of the function ensures that a stack\n   * frame exists that has the method name `DescribeNativeComponentFrameRoot` in\n   * it for both control and sample stacks.\n   */\n\n\n  const RunInRootFrame = {\n    DetermineComponentFrameRoot() {\n      let control;\n\n      try {\n        // This should throw.\n        if (construct) {\n          // Something should be setting the props in the constructor.\n          const Fake = function () {\n            throw Error();\n          }; // $FlowFixMe[prop-missing]\n\n\n          Object.defineProperty(Fake.prototype, 'props', {\n            set: function () {\n              // We use a throwing setter instead of frozen or non-writable props\n              // because that won't throw in a non-strict mode function.\n              throw Error();\n            }\n          });\n\n          if (typeof Reflect === 'object' && Reflect.construct) {\n            // We construct a different control for this case to include any extra\n            // frames added by the construct call.\n            try {\n              Reflect.construct(Fake, []);\n            } catch (x) {\n              control = x;\n            }\n\n            Reflect.construct(fn, [], Fake);\n          } else {\n            try {\n              Fake.call();\n            } catch (x) {\n              control = x;\n            } // $FlowFixMe[prop-missing] found when upgrading Flow\n\n\n            fn.call(Fake.prototype);\n          }\n        } else {\n          try {\n            throw Error();\n          } catch (x) {\n            control = x;\n          } // TODO(luna): This will currently only throw if the function component\n          // tries to access React/ReactDOM/props. We should probably make this throw\n          // in simple components too\n\n\n          const maybePromise = fn(); // If the function component returns a promise, it's likely an async\n          // component, which we don't yet support. Attach a noop catch handler to\n          // silence the error.\n          // TODO: Implement component stacks for async client components?\n\n          if (maybePromise && typeof maybePromise.catch === 'function') {\n            maybePromise.catch(() => {});\n          }\n        }\n      } catch (sample) {\n        // This is inlined manually because closure doesn't do it for us.\n        if (sample && control && typeof sample.stack === 'string') {\n          return [sample.stack, control.stack];\n        }\n      }\n\n      return [null, null];\n    }\n\n  }; // $FlowFixMe[prop-missing]\n\n  RunInRootFrame.DetermineComponentFrameRoot.displayName = 'DetermineComponentFrameRoot';\n  const namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, 'name'); // Before ES6, the `name` property was not configurable.\n\n  if (namePropDescriptor && namePropDescriptor.configurable) {\n    // V8 utilizes a function's `name` property when generating a stack trace.\n    Object.defineProperty(RunInRootFrame.DetermineComponentFrameRoot, // Configurable properties can be updated even if its writable descriptor\n    // is set to `false`.\n    // $FlowFixMe[cannot-write]\n    'name', {\n      value: 'DetermineComponentFrameRoot'\n    });\n  }\n\n  try {\n    const _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(),\n          sampleStack = _RunInRootFrame$Deter[0],\n          controlStack = _RunInRootFrame$Deter[1];\n\n    if (sampleStack && controlStack) {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      const sampleLines = sampleStack.split('\\n');\n      const controlLines = controlStack.split('\\n');\n      let s = 0;\n      let c = 0;\n\n      while (s < sampleLines.length && !sampleLines[s].includes('DetermineComponentFrameRoot')) {\n        s++;\n      }\n\n      while (c < controlLines.length && !controlLines[c].includes('DetermineComponentFrameRoot')) {\n        c++;\n      } // We couldn't find our intentionally injected common root frame, attempt\n      // to find another common root frame by search from the bottom of the\n      // control stack...\n\n\n      if (s === sampleLines.length || c === controlLines.length) {\n        s = sampleLines.length - 1;\n        c = controlLines.length - 1;\n\n        while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n          // We expect at least one stack frame to be shared.\n          // Typically this will be the root most one. However, stack frames may be\n          // cut off due to maximum stack limits. In this case, one maybe cut off\n          // earlier than the other. We assume that the sample is longer or the same\n          // and there for cut off earlier. So we should find the root most frame in\n          // the sample somewhere in the control.\n          c--;\n        }\n      }\n\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--; // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                let frame = '\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \"<anonymous>\"\n                // but we have a user-provided \"displayName\"\n                // splice it in to make the stack more readable.\n\n                if (fn.displayName && frame.includes('<anonymous>')) {\n                  frame = frame.replace('<anonymous>', fn.displayName);\n                }\n\n                if (false) ; // Return the line we found.\n\n\n                return frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  } // Fallback to just using the name if we couldn't make it throw.\n\n\n  const name = fn ? fn.displayName || fn.name : '';\n  const syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n\n  return syntheticFrame;\n}\n\nfunction describeClassComponentFrame(ctor, ownerFn) {\n  {\n    return describeNativeComponentFrame(ctor, true);\n  }\n}\nfunction describeFunctionComponentFrame(fn, ownerFn) {\n  {\n    return describeNativeComponentFrame(fn, false);\n  }\n}\n\nfunction describeFiber(fiber) {\n\n  switch (fiber.tag) {\n    case HostHoistable:\n    case HostSingleton:\n    case HostComponent:\n      return describeBuiltInComponentFrame(fiber.type);\n\n    case LazyComponent:\n      return describeBuiltInComponentFrame('Lazy');\n\n    case SuspenseComponent:\n      return describeBuiltInComponentFrame('Suspense');\n\n    case SuspenseListComponent:\n      return describeBuiltInComponentFrame('SuspenseList');\n\n    case FunctionComponent:\n    case IndeterminateComponent:\n    case SimpleMemoComponent:\n      return describeFunctionComponentFrame(fiber.type);\n\n    case ForwardRef:\n      return describeFunctionComponentFrame(fiber.type.render);\n\n    case ClassComponent:\n      return describeClassComponentFrame(fiber.type);\n\n    default:\n      return '';\n  }\n}\n\nfunction getStackByFiberInDevAndProd(workInProgress) {\n  try {\n    let info = '';\n    let node = workInProgress;\n\n    do {\n      info += describeFiber(node);\n\n      if (false) ; // $FlowFixMe[incompatible-type] we bail out when we get a null\n\n\n      node = node.return;\n    } while (node);\n\n    return info;\n  } catch (x) {\n    return '\\nError generating stack: ' + x.message + '\\n' + x.stack;\n  }\n}\n\nfunction getWrappedName$1(outerType, innerType, wrapperName) {\n  const displayName = outerType.displayName;\n\n  if (displayName) {\n    return displayName;\n  }\n\n  const functionName = innerType.displayName || innerType.name || '';\n  return functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n} // Keep in sync with react-reconciler/getComponentNameFromFiber\n\n\nfunction getContextName$1(type) {\n  return type.displayName || 'Context';\n}\n\nconst REACT_CLIENT_REFERENCE = Symbol.for('react.client.reference'); // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n\nfunction getComponentNameFromType(type) {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n\n  if (typeof type === 'function') {\n    if (type.$$typeof === REACT_CLIENT_REFERENCE) {\n      // TODO: Create a convention for naming client references with debug info.\n      return null;\n    }\n\n    return type.displayName || type.name || null;\n  }\n\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n\n    case REACT_CACHE_TYPE:\n      {\n        return 'Cache';\n      }\n\n  }\n\n  if (typeof type === 'object') {\n\n    switch (type.$$typeof) {\n      case REACT_PROVIDER_TYPE:\n        {\n          const provider = type;\n          return getContextName$1(provider._context) + '.Provider';\n        }\n\n      case REACT_CONTEXT_TYPE:\n        const context = type;\n\n        {\n          return getContextName$1(context) + '.Consumer';\n        }\n\n      case REACT_CONSUMER_TYPE:\n        {\n          return null;\n        }\n\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName$1(type, type.render, 'ForwardRef');\n\n      case REACT_MEMO_TYPE:\n        const outerName = type.displayName || null;\n\n        if (outerName !== null) {\n          return outerName;\n        }\n\n        return getComponentNameFromType(type.type) || 'Memo';\n\n      case REACT_LAZY_TYPE:\n        {\n          const lazyComponent = type;\n          const payload = lazyComponent._payload;\n          const init = lazyComponent._init;\n\n          try {\n            return getComponentNameFromType(init(payload));\n          } catch (x) {\n            return null;\n          }\n        }\n    }\n  }\n\n  return null;\n}\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  const functionName = innerType.displayName || innerType.name || '';\n  return outerType.displayName || (functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName);\n} // Keep in sync with shared/getComponentNameFromType\n\n\nfunction getContextName(type) {\n  return type.displayName || 'Context';\n}\n\nfunction getComponentNameFromFiber(fiber) {\n  const tag = fiber.tag,\n        type = fiber.type;\n\n  switch (tag) {\n    case CacheComponent:\n      return 'Cache';\n\n    case ContextConsumer:\n      {\n        const context = type;\n        return getContextName(context) + '.Consumer';\n      }\n\n    case ContextProvider:\n      {\n        const provider = type;\n        return getContextName(provider._context) + '.Provider';\n      }\n\n    case DehydratedFragment:\n      return 'DehydratedFragment';\n\n    case ForwardRef:\n      return getWrappedName(type, type.render, 'ForwardRef');\n\n    case Fragment:\n      return 'Fragment';\n\n    case HostHoistable:\n    case HostSingleton:\n    case HostComponent:\n      // Host component type is the display name (e.g. \"div\", \"View\")\n      return type;\n\n    case HostPortal:\n      return 'Portal';\n\n    case HostRoot:\n      return 'Root';\n\n    case HostText:\n      return 'Text';\n\n    case LazyComponent:\n      // Name comes from the type in this case; we don't have a tag.\n      return getComponentNameFromType(type);\n\n    case Mode:\n      if (type === REACT_STRICT_MODE_TYPE) {\n        // Don't be less specific than shared/getComponentNameFromType\n        return 'StrictMode';\n      }\n\n      return 'Mode';\n\n    case OffscreenComponent:\n      return 'Offscreen';\n\n    case Profiler:\n      return 'Profiler';\n\n    case ScopeComponent:\n      return 'Scope';\n\n    case SuspenseComponent:\n      return 'Suspense';\n\n    case SuspenseListComponent:\n      return 'SuspenseList';\n\n    case TracingMarkerComponent:\n      return 'TracingMarker';\n    // The display name for this tags come from the user-provided type:\n\n    case ClassComponent:\n    case FunctionComponent:\n    case IncompleteClassComponent:\n    case IndeterminateComponent:\n    case MemoComponent:\n    case SimpleMemoComponent:\n      if (typeof type === 'function') {\n        return type.displayName || type.name || null;\n      }\n\n      if (typeof type === 'string') {\n        return type;\n      }\n\n      break;\n\n  }\n\n  return null;\n}\n\n// around this limitation, we use an opaque type that can only be obtained by\n// passing the value through getToStringValue first.\n\nfunction toString(value) {\n  // The coercion safety check is performed in getToStringValue().\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  return '' + value;\n}\nfunction getToStringValue(value) {\n  switch (typeof value) {\n    case 'bigint':\n      {\n        // bigint is assigned as empty string\n        return '';\n      }\n\n    // fallthrough for BigInt support\n\n    case 'boolean':\n    case 'number':\n    case 'string':\n    case 'undefined':\n      return value;\n\n    case 'object':\n\n      return value;\n\n    default:\n      // function, symbol are assigned as empty strings\n      return '';\n  }\n}\n\nfunction isCheckable(elem) {\n  const type = elem.type;\n  const nodeName = elem.nodeName;\n  return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');\n}\n\nfunction getTracker(node) {\n  return node._valueTracker;\n}\n\nfunction detachTracker(node) {\n  node._valueTracker = null;\n}\n\nfunction getValueFromNode(node) {\n  let value = '';\n\n  if (!node) {\n    return value;\n  }\n\n  if (isCheckable(node)) {\n    value = node.checked ? 'true' : 'false';\n  } else {\n    value = node.value;\n  }\n\n  return value;\n}\n\nfunction trackValueOnNode(node) {\n  const valueField = isCheckable(node) ? 'checked' : 'value';\n  const descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);\n\n  let currentValue = '' + node[valueField]; // if someone has already defined a value or Safari, then bail\n  // and don't track value will cause over reporting of changes,\n  // but it's better then a hard failure\n  // (needed for certain tests that spyOn input values and Safari)\n\n  if (node.hasOwnProperty(valueField) || typeof descriptor === 'undefined' || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {\n    return;\n  }\n\n  const get = descriptor.get,\n        set = descriptor.set;\n  Object.defineProperty(node, valueField, {\n    configurable: true,\n    // $FlowFixMe[missing-this-annot]\n    get: function () {\n      return get.call(this);\n    },\n    // $FlowFixMe[missing-local-annot]\n    // $FlowFixMe[missing-this-annot]\n    set: function (value) {\n\n      currentValue = '' + value;\n      set.call(this, value);\n    }\n  }); // We could've passed this the first time\n  // but it triggers a bug in IE11 and Edge 14/15.\n  // Calling defineProperty() again should be equivalent.\n  // https://github.com/facebook/react/issues/11768\n\n  Object.defineProperty(node, valueField, {\n    enumerable: descriptor.enumerable\n  });\n  const tracker = {\n    getValue() {\n      return currentValue;\n    },\n\n    setValue(value) {\n\n      currentValue = '' + value;\n    },\n\n    stopTracking() {\n      detachTracker(node);\n      delete node[valueField];\n    }\n\n  };\n  return tracker;\n}\n\nfunction track(node) {\n  if (getTracker(node)) {\n    return;\n  }\n\n  node._valueTracker = trackValueOnNode(node);\n}\nfunction updateValueIfChanged(node) {\n  if (!node) {\n    return false;\n  }\n\n  const tracker = getTracker(node); // if there is no tracker at this point it's unlikely\n  // that trying again will succeed\n\n  if (!tracker) {\n    return true;\n  }\n\n  const lastValue = tracker.getValue();\n  const nextValue = getValueFromNode(node);\n\n  if (nextValue !== lastValue) {\n    tracker.setValue(nextValue);\n    return true;\n  }\n\n  return false;\n}\n\nfunction getActiveElement(doc) {\n  doc = doc || (typeof document !== 'undefined' ? document : undefined);\n\n  if (typeof doc === 'undefined') {\n    return null;\n  }\n\n  try {\n    return doc.activeElement || doc.body;\n  } catch (e) {\n    return doc.body;\n  }\n}\n\n// When passing user input into querySelector(All) the embedded string must not alter\n// the semantics of the query. This escape function is safe to use when we know the\n// provided value is going to be wrapped in double quotes as part of an attribute selector\n// Do not use it anywhere else\n// we escape double quotes and backslashes\nconst escapeSelectorAttributeValueInsideDoubleQuotesRegex = /[\\n\\\"\\\\]/g;\nfunction escapeSelectorAttributeValueInsideDoubleQuotes(value) {\n  return value.replace(escapeSelectorAttributeValueInsideDoubleQuotesRegex, ch => '\\\\' + ch.charCodeAt(0).toString(16) + ' ');\n}\n\nfunction updateInput(element, value, defaultValue, lastDefaultValue, checked, defaultChecked, type, name) {\n  const node = element; // Temporarily disconnect the input from any radio buttons.\n  // Changing the type or name as the same time as changing the checked value\n  // needs to be atomically applied. We can only ensure that by disconnecting\n  // the name while do the mutations and then reapply the name after that's done.\n\n  node.name = '';\n\n  if (type != null && typeof type !== 'function' && typeof type !== 'symbol' && typeof type !== 'boolean') {\n\n    node.type = type;\n  } else {\n    node.removeAttribute('type');\n  }\n\n  if (value != null) {\n    if (type === 'number') {\n      if ( // $FlowFixMe[incompatible-type]\n      value === 0 && node.value === '' || // We explicitly want to coerce to number here if possible.\n      // eslint-disable-next-line\n      node.value != value) {\n        node.value = toString(getToStringValue(value));\n      }\n    } else if (node.value !== toString(getToStringValue(value))) {\n      node.value = toString(getToStringValue(value));\n    }\n  } else if (type === 'submit' || type === 'reset') {\n    // Submit/reset inputs need the attribute removed completely to avoid\n    // blank-text buttons.\n    node.removeAttribute('value');\n  }\n\n  {\n    // When syncing the value attribute, the value comes from a cascade of\n    // properties:\n    //  1. The value React property\n    //  2. The defaultValue React property\n    //  3. Otherwise there should be no change\n    if (value != null) {\n      setDefaultValue(node, type, getToStringValue(value));\n    } else if (defaultValue != null) {\n      setDefaultValue(node, type, getToStringValue(defaultValue));\n    } else if (lastDefaultValue != null) {\n      node.removeAttribute('value');\n    }\n  }\n\n  {\n    // When syncing the checked attribute, it only changes when it needs\n    // to be removed, such as transitioning from a checkbox into a text input\n    if (checked == null && defaultChecked != null) {\n      node.defaultChecked = !!defaultChecked;\n    }\n  }\n\n  if (checked != null) {\n    // Important to set this even if it's not a change in order to update input\n    // value tracking with radio buttons\n    // TODO: Should really update input value tracking for the whole radio\n    // button group in an effect or something (similar to #27024)\n    node.checked = checked && typeof checked !== 'function' && typeof checked !== 'symbol';\n  }\n\n  if (name != null && typeof name !== 'function' && typeof name !== 'symbol' && typeof name !== 'boolean') {\n\n    node.name = toString(getToStringValue(name));\n  } else {\n    node.removeAttribute('name');\n  }\n}\nfunction initInput(element, value, defaultValue, checked, defaultChecked, type, name, isHydrating) {\n  const node = element;\n\n  if (type != null && typeof type !== 'function' && typeof type !== 'symbol' && typeof type !== 'boolean') {\n\n    node.type = type;\n  }\n\n  if (value != null || defaultValue != null) {\n    const isButton = type === 'submit' || type === 'reset'; // Avoid setting value attribute on submit/reset inputs as it overrides the\n    // default value provided by the browser. See: #12872\n\n    if (isButton && (value === undefined || value === null)) {\n      return;\n    }\n\n    const defaultValueStr = defaultValue != null ? toString(getToStringValue(defaultValue)) : '';\n    const initialValue = value != null ? toString(getToStringValue(value)) : defaultValueStr; // Do not assign value if it is already set. This prevents user text input\n    // from being lost during SSR hydration.\n\n    if (!isHydrating) {\n      {\n        // When syncing the value attribute, the value property should use\n        // the wrapperState._initialValue property. This uses:\n        //\n        //   1. The value React property when present\n        //   2. The defaultValue React property when present\n        //   3. An empty string\n        if (initialValue !== node.value) {\n          node.value = initialValue;\n        }\n      }\n    }\n\n    {\n      // Otherwise, the value attribute is synchronized to the property,\n      // so we assign defaultValue to the same thing as the value property\n      // assignment step above.\n      node.defaultValue = initialValue;\n    }\n  } // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug\n  // this is needed to work around a chrome bug where setting defaultChecked\n  // will sometimes influence the value of checked (even after detachment).\n  // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416\n  // We need to temporarily unset name to avoid disrupting radio button groups.\n\n\n  const checkedOrDefault = checked != null ? checked : defaultChecked; // TODO: This 'function' or 'symbol' check isn't replicated in other places\n  // so this semantic is inconsistent.\n\n  const initialChecked = typeof checkedOrDefault !== 'function' && typeof checkedOrDefault !== 'symbol' && !!checkedOrDefault;\n\n  if (isHydrating) {\n    // Detach .checked from .defaultChecked but leave user input alone\n    node.checked = node.checked;\n  } else {\n    node.checked = !!initialChecked;\n  }\n\n  {\n    // When syncing the checked attribute, both the checked property and\n    // attribute are assigned at the same time using defaultChecked. This uses:\n    //\n    //   1. The checked React property when present\n    //   2. The defaultChecked React property when present\n    //   3. Otherwise, false\n    node.defaultChecked = !node.defaultChecked;\n    node.defaultChecked = !!initialChecked;\n  } // Name needs to be set at the end so that it applies atomically to connected radio buttons.\n\n\n  if (name != null && typeof name !== 'function' && typeof name !== 'symbol' && typeof name !== 'boolean') {\n\n    node.name = name;\n  }\n}\nfunction restoreControlledInputState(element, props) {\n  const rootNode = element;\n  updateInput(rootNode, props.value, props.defaultValue, props.defaultValue, props.checked, props.defaultChecked, props.type, props.name);\n  const name = props.name;\n\n  if (props.type === 'radio' && name != null) {\n    let queryRoot = rootNode;\n\n    while (queryRoot.parentNode) {\n      queryRoot = queryRoot.parentNode;\n    } // If `rootNode.form` was non-null, then we could try `form.elements`,\n\n    const group = queryRoot.querySelectorAll('input[name=\"' + escapeSelectorAttributeValueInsideDoubleQuotes('' + name) + '\"][type=\"radio\"]');\n\n    for (let i = 0; i < group.length; i++) {\n      const otherNode = group[i];\n\n      if (otherNode === rootNode || otherNode.form !== rootNode.form) {\n        continue;\n      } // This will throw if radio buttons rendered by different copies of React\n      // and the same name are rendered into the same form (same as #1939).\n      // That's probably okay; we don't support it just as we don't support\n      // mixing React radio buttons with non-React ones.\n\n\n      const otherProps = getFiberCurrentPropsFromNode(otherNode);\n\n      if (!otherProps) {\n        throw Error(formatProdErrorMessage(90));\n      } // If this is a controlled radio button group, forcing the input that\n      // was previously checked to update will cause it to be come re-checked\n      // as appropriate.\n\n\n      updateInput(otherNode, otherProps.value, otherProps.defaultValue, otherProps.defaultValue, otherProps.checked, otherProps.defaultChecked, otherProps.type, otherProps.name);\n    } // If any updateInput() call set .checked to true, an input in this group\n    // (often, `rootNode` itself) may have become unchecked\n\n\n    for (let i = 0; i < group.length; i++) {\n      const otherNode = group[i];\n\n      if (otherNode.form !== rootNode.form) {\n        continue;\n      }\n\n      updateValueIfChanged(otherNode);\n    }\n  }\n} // In Chrome, assigning defaultValue to certain input types triggers input validation.\n// For number inputs, the display value loses trailing decimal points. For email inputs,\n// Chrome raises \"The specified value <x> is not a valid email address\".\n//\n// Here we check to see if the defaultValue has actually changed, avoiding these problems\n// when the user is inputting text\n//\n// https://github.com/facebook/react/issues/7253\n\nfunction setDefaultValue(node, type, value) {\n  if ( // Focused number inputs synchronize on blur. See ChangeEventPlugin.js\n  type !== 'number' || getActiveElement(node.ownerDocument) !== node) {\n    if (node.defaultValue !== toString(value)) {\n      node.defaultValue = toString(value);\n    }\n  }\n}\n\nconst isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\nfunction isArray(a) {\n  return isArrayImpl(a);\n}\n\n// TODO: direct imports like some-package/src/* are bad. Fix me.\n\nfunction updateOptions(node, multiple, propValue, setDefaultSelected) {\n  const options = node.options;\n\n  if (multiple) {\n    const selectedValues = propValue;\n    const selectedValue = {};\n\n    for (let i = 0; i < selectedValues.length; i++) {\n      // Prefix to avoid chaos with special keys.\n      selectedValue['$' + selectedValues[i]] = true;\n    }\n\n    for (let i = 0; i < options.length; i++) {\n      const selected = selectedValue.hasOwnProperty('$' + options[i].value);\n\n      if (options[i].selected !== selected) {\n        options[i].selected = selected;\n      }\n\n      if (selected && setDefaultSelected) {\n        options[i].defaultSelected = true;\n      }\n    }\n  } else {\n    // Do not set `select.value` as exact behavior isn't consistent across all\n    // browsers for all cases.\n    const selectedValue = toString(getToStringValue(propValue));\n    let defaultSelected = null;\n\n    for (let i = 0; i < options.length; i++) {\n      if (options[i].value === selectedValue) {\n        options[i].selected = true;\n\n        if (setDefaultSelected) {\n          options[i].defaultSelected = true;\n        }\n\n        return;\n      }\n\n      if (defaultSelected === null && !options[i].disabled) {\n        defaultSelected = options[i];\n      }\n    }\n\n    if (defaultSelected !== null) {\n      defaultSelected.selected = true;\n    }\n  }\n}\nfunction initSelect(element, value, defaultValue, multiple) {\n  const node = element;\n  node.multiple = !!multiple;\n\n  if (value != null) {\n    updateOptions(node, !!multiple, value, false);\n  } else if (defaultValue != null) {\n    updateOptions(node, !!multiple, defaultValue, true);\n  }\n}\nfunction updateSelect(element, value, defaultValue, multiple, wasMultiple) {\n  const node = element;\n\n  if (value != null) {\n    updateOptions(node, !!multiple, value, false);\n  } else if (!!wasMultiple !== !!multiple) {\n    // For simplicity, reapply `defaultValue` if `multiple` is toggled.\n    if (defaultValue != null) {\n      updateOptions(node, !!multiple, defaultValue, true);\n    } else {\n      // Revert the select back to its default unselected state.\n      updateOptions(node, !!multiple, multiple ? [] : '', false);\n    }\n  }\n}\nfunction restoreControlledSelectState(element, props) {\n  const node = element;\n  const value = props.value;\n\n  if (value != null) {\n    updateOptions(node, !!props.multiple, value, false);\n  }\n}\n\nfunction updateTextarea(element, value, defaultValue) {\n  const node = element;\n\n  if (value != null) {\n    // Cast `value` to a string to ensure the value is set correctly. While\n    // browsers typically do this as necessary, jsdom doesn't.\n    const newValue = toString(getToStringValue(value)); // To avoid side effects (such as losing text selection), only set value if changed\n\n    if (newValue !== node.value) {\n      node.value = newValue;\n    } // TOOO: This should respect disableInputAttributeSyncing flag.\n\n\n    if (defaultValue == null) {\n      if (node.defaultValue !== newValue) {\n        node.defaultValue = newValue;\n      }\n\n      return;\n    }\n  }\n\n  if (defaultValue != null) {\n    node.defaultValue = toString(getToStringValue(defaultValue));\n  } else {\n    node.defaultValue = '';\n  }\n}\nfunction initTextarea(element, value, defaultValue, children) {\n  const node = element;\n  let initialValue = value; // Only bother fetching default value if we're going to use it\n\n  if (initialValue == null) {\n    if (children != null) {\n      {\n        if (defaultValue != null) {\n          throw Error(formatProdErrorMessage(92));\n        }\n\n        if (isArray(children)) {\n          if (children.length > 1) {\n            throw Error(formatProdErrorMessage(93));\n          }\n\n          children = children[0];\n        }\n\n        defaultValue = children;\n      }\n    }\n\n    if (defaultValue == null) {\n      defaultValue = '';\n    }\n\n    initialValue = defaultValue;\n  }\n\n  const stringValue = getToStringValue(initialValue);\n  node.defaultValue = stringValue; // This will be toString:ed.\n  // This is in postMount because we need access to the DOM node, which is not\n  // available until after the component has mounted.\n\n  const textContent = node.textContent; // Only set node.value if textContent is equal to the expected\n  // initial value. In IE10/IE11 there is a bug where the placeholder attribute\n  // will populate textContent as well.\n  // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/\n\n  if (textContent === stringValue) {\n    if (textContent !== '' && textContent !== null) {\n      node.value = textContent;\n    }\n  }\n}\nfunction restoreControlledTextareaState(element, props) {\n  // DOM component is still mounted; update\n  updateTextarea(element, props.value, props.defaultValue);\n}\n\nconst MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';\nconst SVG_NAMESPACE = 'http://www.w3.org/2000/svg';\n\n/* globals MSApp */\n\nlet reusableSVGContainer;\n\nfunction setInnerHTMLImpl(node, html) {\n  if (node.namespaceURI === SVG_NAMESPACE) {\n\n    if (!('innerHTML' in node)) {\n      // IE does not have innerHTML for SVG nodes, so instead we inject the\n      // new markup in a temp node and then move the child nodes across into\n      // the target node\n      reusableSVGContainer = reusableSVGContainer || document.createElement('div');\n      reusableSVGContainer.innerHTML = '<svg>' + html.valueOf().toString() + '</svg>';\n      const svgNode = reusableSVGContainer.firstChild;\n\n      while (node.firstChild) {\n        node.removeChild(node.firstChild);\n      } // $FlowFixMe[incompatible-use]\n      // $FlowFixMe[incompatible-type]\n\n\n      while (svgNode.firstChild) {\n        node.appendChild(svgNode.firstChild);\n      }\n\n      return;\n    }\n  }\n\n  node.innerHTML = html;\n}\n\nlet setInnerHTML = setInnerHTMLImpl; // $FlowFixMe[cannot-resolve-name]\n\nif (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {\n  /**\n   * Create a function which has 'unsafe' privileges (required by windows8 apps)\n   */\n  setInnerHTML = function (node, html) {\n    // $FlowFixMe[cannot-resolve-name]\n    return MSApp.execUnsafeLocalFunction(function () {\n      return setInnerHTMLImpl(node, html);\n    });\n  };\n}\n\nvar setInnerHTML$1 = setInnerHTML;\n\n/**\n * HTML nodeType values that represent the type of the node\n */\nconst ELEMENT_NODE = 1;\nconst TEXT_NODE = 3;\nconst COMMENT_NODE = 8;\nconst DOCUMENT_NODE = 9;\nconst DOCUMENT_TYPE_NODE = 10;\nconst DOCUMENT_FRAGMENT_NODE = 11;\n\n/**\n * Set the textContent property of a node. For text updates, it's faster\n * to set the `nodeValue` of the Text node directly instead of using\n * `.textContent` which will remove the existing node and create a new one.\n *\n * @param {DOMElement} node\n * @param {string} text\n * @internal\n */\n\nfunction setTextContent(node, text) {\n  if (text) {\n    const firstChild = node.firstChild;\n\n    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {\n      firstChild.nodeValue = text;\n      return;\n    }\n  }\n\n  node.textContent = text;\n}\n\n/**\n * CSS properties which accept numbers but are not in units of \"px\".\n */\nconst unitlessNumbers = new Set(['animationIterationCount', 'aspectRatio', 'borderImageOutset', 'borderImageSlice', 'borderImageWidth', 'boxFlex', 'boxFlexGroup', 'boxOrdinalGroup', 'columnCount', 'columns', 'flex', 'flexGrow', 'flexPositive', 'flexShrink', 'flexNegative', 'flexOrder', 'gridArea', 'gridRow', 'gridRowEnd', 'gridRowSpan', 'gridRowStart', 'gridColumn', 'gridColumnEnd', 'gridColumnSpan', 'gridColumnStart', 'fontWeight', 'lineClamp', 'lineHeight', 'opacity', 'order', 'orphans', 'scale', 'tabSize', 'widows', 'zIndex', 'fillOpacity', // SVG-related properties\n'floodOpacity', 'stopOpacity', 'strokeDasharray', 'strokeDashoffset', 'strokeMiterlimit', 'strokeOpacity', 'strokeWidth', 'MozAnimationIterationCount', // Known Prefixed Properties\n'MozBoxFlex', // TODO: Remove these since they shouldn't be used in modern code\n'MozBoxFlexGroup', 'MozLineClamp', 'msAnimationIterationCount', 'msFlex', 'msFlexGrow', 'msFlexNegative', 'msFlexOrder', 'msFlexPositive', 'msFlexShrink', 'msGridColumn', 'msGridColumnSpan', 'msGridRow', 'msGridRowSpan', 'WebkitAnimationIterationCount', 'WebkitBoxFlex', 'WebKitBoxFlexGroup', 'WebkitBoxOrdinalGroup', 'WebkitColumnCount', 'WebkitColumns', 'WebkitFlex', 'WebkitFlexGrow', 'WebkitFlexPositive', 'WebkitFlexShrink', 'WebkitLineClamp']);\nfunction isUnitlessNumber (name) {\n  return unitlessNumbers.has(name);\n}\n\nfunction setValueForStyle(style, styleName, value) {\n  const isCustomProperty = styleName.indexOf('--') === 0;\n\n  if (value == null || typeof value === 'boolean' || value === '') {\n    if (isCustomProperty) {\n      style.setProperty(styleName, '');\n    } else if (styleName === 'float') {\n      style.cssFloat = '';\n    } else {\n      style[styleName] = '';\n    }\n  } else if (isCustomProperty) {\n    style.setProperty(styleName, value);\n  } else if (typeof value === 'number' && value !== 0 && !isUnitlessNumber(styleName)) {\n    style[styleName] = value + 'px'; // Presumes implicit 'px' suffix for unitless numbers\n  } else {\n    if (styleName === 'float') {\n      style.cssFloat = value;\n    } else {\n\n      style[styleName] = ('' + value).trim();\n    }\n  }\n}\n/**\n * Sets the value for multiple styles on a node.  If a value is specified as\n * '' (empty string), the corresponding style property will be unset.\n *\n * @param {DOMElement} node\n * @param {object} styles\n */\n\n\nfunction setValueForStyles(node, styles, prevStyles) {\n  if (styles != null && typeof styles !== 'object') {\n    throw Error(formatProdErrorMessage(62));\n  }\n\n  const style = node.style;\n\n  if (prevStyles != null) {\n\n    for (const styleName in prevStyles) {\n      if (prevStyles.hasOwnProperty(styleName) && (styles == null || !styles.hasOwnProperty(styleName))) {\n        // Clear style\n        const isCustomProperty = styleName.indexOf('--') === 0;\n\n        if (isCustomProperty) {\n          style.setProperty(styleName, '');\n        } else if (styleName === 'float') {\n          style.cssFloat = '';\n        } else {\n          style[styleName] = '';\n        }\n      }\n    }\n\n    for (const styleName in styles) {\n      const value = styles[styleName];\n\n      if (styles.hasOwnProperty(styleName) && prevStyles[styleName] !== value) {\n        setValueForStyle(style, styleName, value);\n      }\n    }\n  } else {\n    for (const styleName in styles) {\n      if (styles.hasOwnProperty(styleName)) {\n        const value = styles[styleName];\n        setValueForStyle(style, styleName, value);\n      }\n    }\n  }\n}\n\nfunction isCustomElement(tagName, props) {\n  if (tagName.indexOf('-') === -1) {\n    return false;\n  }\n\n  switch (tagName) {\n    // These are reserved SVG and MathML elements.\n    // We don't mind this list too much because we expect it to never grow.\n    // The alternative is to track the namespace in a few places which is convoluted.\n    // https://html.spec.whatwg.org/multipage/custom-elements.html#custom-elements-core-concepts\n    case 'annotation-xml':\n    case 'color-profile':\n    case 'font-face':\n    case 'font-face-src':\n    case 'font-face-uri':\n    case 'font-face-format':\n    case 'font-face-name':\n    case 'missing-glyph':\n      return false;\n\n    default:\n      return true;\n  }\n}\n\nconst aliases = new Map([['acceptCharset', 'accept-charset'], ['htmlFor', 'for'], ['httpEquiv', 'http-equiv'], // HTML and SVG attributes, but the SVG attribute is case sensitive.],\n['crossOrigin', 'crossorigin'], // This is a list of all SVG attributes that need special casing.\n// Regular attributes that just accept strings.],\n['accentHeight', 'accent-height'], ['alignmentBaseline', 'alignment-baseline'], ['arabicForm', 'arabic-form'], ['baselineShift', 'baseline-shift'], ['capHeight', 'cap-height'], ['clipPath', 'clip-path'], ['clipRule', 'clip-rule'], ['colorInterpolation', 'color-interpolation'], ['colorInterpolationFilters', 'color-interpolation-filters'], ['colorProfile', 'color-profile'], ['colorRendering', 'color-rendering'], ['dominantBaseline', 'dominant-baseline'], ['enableBackground', 'enable-background'], ['fillOpacity', 'fill-opacity'], ['fillRule', 'fill-rule'], ['floodColor', 'flood-color'], ['floodOpacity', 'flood-opacity'], ['fontFamily', 'font-family'], ['fontSize', 'font-size'], ['fontSizeAdjust', 'font-size-adjust'], ['fontStretch', 'font-stretch'], ['fontStyle', 'font-style'], ['fontVariant', 'font-variant'], ['fontWeight', 'font-weight'], ['glyphName', 'glyph-name'], ['glyphOrientationHorizontal', 'glyph-orientation-horizontal'], ['glyphOrientationVertical', 'glyph-orientation-vertical'], ['horizAdvX', 'horiz-adv-x'], ['horizOriginX', 'horiz-origin-x'], ['imageRendering', 'image-rendering'], ['letterSpacing', 'letter-spacing'], ['lightingColor', 'lighting-color'], ['markerEnd', 'marker-end'], ['markerMid', 'marker-mid'], ['markerStart', 'marker-start'], ['overlinePosition', 'overline-position'], ['overlineThickness', 'overline-thickness'], ['paintOrder', 'paint-order'], ['panose-1', 'panose-1'], ['pointerEvents', 'pointer-events'], ['renderingIntent', 'rendering-intent'], ['shapeRendering', 'shape-rendering'], ['stopColor', 'stop-color'], ['stopOpacity', 'stop-opacity'], ['strikethroughPosition', 'strikethrough-position'], ['strikethroughThickness', 'strikethrough-thickness'], ['strokeDasharray', 'stroke-dasharray'], ['strokeDashoffset', 'stroke-dashoffset'], ['strokeLinecap', 'stroke-linecap'], ['strokeLinejoin', 'stroke-linejoin'], ['strokeMiterlimit', 'stroke-miterlimit'], ['strokeOpacity', 'stroke-opacity'], ['strokeWidth', 'stroke-width'], ['textAnchor', 'text-anchor'], ['textDecoration', 'text-decoration'], ['textRendering', 'text-rendering'], ['transformOrigin', 'transform-origin'], ['underlinePosition', 'underline-position'], ['underlineThickness', 'underline-thickness'], ['unicodeBidi', 'unicode-bidi'], ['unicodeRange', 'unicode-range'], ['unitsPerEm', 'units-per-em'], ['vAlphabetic', 'v-alphabetic'], ['vHanging', 'v-hanging'], ['vIdeographic', 'v-ideographic'], ['vMathematical', 'v-mathematical'], ['vectorEffect', 'vector-effect'], ['vertAdvY', 'vert-adv-y'], ['vertOriginX', 'vert-origin-x'], ['vertOriginY', 'vert-origin-y'], ['wordSpacing', 'word-spacing'], ['writingMode', 'writing-mode'], ['xmlnsXlink', 'xmlns:xlink'], ['xHeight', 'x-height']]);\nfunction getAttributeAlias (name) {\n  return aliases.get(name) || name;\n}\n\n// A javascript: URL can contain leading C0 control or \\u0020 SPACE,\n// and any newline or tab are filtered out as if they're not part of the URL.\n// https://url.spec.whatwg.org/#url-parsing\n// Tab or newline are defined as \\r\\n\\t:\n// https://infra.spec.whatwg.org/#ascii-tab-or-newline\n// A C0 control is a code point in the range \\u0000 NULL to \\u001F\n// INFORMATION SEPARATOR ONE, inclusive:\n// https://infra.spec.whatwg.org/#c0-control-or-space\n\n/* eslint-disable max-len */\nconst isJavaScriptProtocol = /^[\\u0000-\\u001F ]*j[\\r\\n\\t]*a[\\r\\n\\t]*v[\\r\\n\\t]*a[\\r\\n\\t]*s[\\r\\n\\t]*c[\\r\\n\\t]*r[\\r\\n\\t]*i[\\r\\n\\t]*p[\\r\\n\\t]*t[\\r\\n\\t]*\\:/i;\n\nfunction sanitizeURL(url) {\n  // We should never have symbols here because they get filtered out elsewhere.\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  if (isJavaScriptProtocol.test('' + url)) {\n    // Return a different javascript: url that doesn't cause any side-effects and just\n    // throws if ever visited.\n    // eslint-disable-next-line no-script-url\n    return \"javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')\";\n  }\n\n  return url;\n}\n\nconst IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;\nconst IS_NON_DELEGATED = 1 << 1;\nconst IS_CAPTURE_PHASE = 1 << 2;\n// set to LEGACY_FB_SUPPORT. LEGACY_FB_SUPPORT only gets set when\n// we call willDeferLaterForLegacyFBSupport, thus not bailing out\n// will result in endless cycles like an infinite loop.\n// We also don't want to defer during event replaying.\n\nconst SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;\n\n// This exists to avoid circular dependency between ReactDOMEventReplaying\n// and DOMPluginEventSystem.\nlet currentReplayingEvent = null;\nfunction setReplayingEvent(event) {\n\n  currentReplayingEvent = event;\n}\nfunction resetReplayingEvent() {\n\n  currentReplayingEvent = null;\n}\nfunction isReplayingEvent(event) {\n  return event === currentReplayingEvent;\n}\n\n/**\n * Gets the target node from a native browser event by accounting for\n * inconsistencies in browser DOM APIs.\n *\n * @param {object} nativeEvent Native browser event.\n * @return {DOMEventTarget} Target node.\n */\n\nfunction getEventTarget(nativeEvent) {\n  // Fallback to nativeEvent.srcElement for IE9\n  // https://github.com/facebook/react/issues/12506\n  let target = nativeEvent.target || nativeEvent.srcElement || window; // Normalize SVG <use> element events #4963\n\n  if (target.correspondingUseElement) {\n    target = target.correspondingUseElement;\n  } // Safari may fire events on text nodes (Node.TEXT_NODE is 3).\n  // @see http://www.quirksmode.org/js/events_properties.html\n\n\n  return target.nodeType === TEXT_NODE ? target.parentNode : target;\n}\n\nlet restoreTarget = null;\nlet restoreQueue = null;\n\nfunction restoreStateOfTarget(target) {\n  // We perform this translation at the end of the event loop so that we\n  // always receive the correct fiber here\n  const internalInstance = getInstanceFromNode(target);\n\n  if (!internalInstance) {\n    // Unmounted\n    return;\n  }\n\n  const stateNode = internalInstance.stateNode; // Guard against Fiber being unmounted.\n\n  if (stateNode) {\n    const props = getFiberCurrentPropsFromNode(stateNode);\n    restoreControlledState(internalInstance.stateNode, internalInstance.type, props);\n  }\n}\n\nfunction enqueueStateRestore(target) {\n  if (restoreTarget) {\n    if (restoreQueue) {\n      restoreQueue.push(target);\n    } else {\n      restoreQueue = [target];\n    }\n  } else {\n    restoreTarget = target;\n  }\n}\nfunction needsStateRestore() {\n  return restoreTarget !== null || restoreQueue !== null;\n}\nfunction restoreStateIfNeeded() {\n  if (!restoreTarget) {\n    return;\n  }\n\n  const target = restoreTarget;\n  const queuedTargets = restoreQueue;\n  restoreTarget = null;\n  restoreQueue = null;\n  restoreStateOfTarget(target);\n\n  if (queuedTargets) {\n    for (let i = 0; i < queuedTargets.length; i++) {\n      restoreStateOfTarget(queuedTargets[i]);\n    }\n  }\n}\n\n/**\n * `ReactInstanceMap` maintains a mapping from a public facing stateful\n * instance (key) and the internal representation (value). This allows public\n * methods to accept the user facing instance as an argument and map them back\n * to internal methods.\n *\n * Note that this module is currently shared and assumed to be stateless.\n * If this becomes an actual Map, that will break.\n */\nfunction get(key) {\n  return key._reactInternals;\n}\nfunction has(key) {\n  return key._reactInternals !== undefined;\n}\nfunction set(key, value) {\n  key._reactInternals = value;\n}\n\nfunction getNearestMountedFiber(fiber) {\n  let node = fiber;\n  let nearestMounted = fiber;\n\n  if (!fiber.alternate) {\n    // If there is no alternate, this might be a new tree that isn't inserted\n    // yet. If it is, then it will have a pending insertion effect on it.\n    let nextNode = node;\n\n    do {\n      node = nextNode;\n\n      if ((node.flags & (Placement | Hydrating)) !== NoFlags$1) {\n        // This is an insertion or in-progress hydration. The nearest possible\n        // mounted fiber is the parent but we need to continue to figure out\n        // if that one is still mounted.\n        nearestMounted = node.return;\n      } // $FlowFixMe[incompatible-type] we bail out when we get a null\n\n\n      nextNode = node.return;\n    } while (nextNode);\n  } else {\n    while (node.return) {\n      node = node.return;\n    }\n  }\n\n  if (node.tag === HostRoot) {\n    // TODO: Check if this was a nested HostRoot when used with\n    // renderContainerIntoSubtree.\n    return nearestMounted;\n  } // If we didn't hit the root, that means that we're in an disconnected tree\n  // that has been unmounted.\n\n\n  return null;\n}\nfunction getSuspenseInstanceFromFiber(fiber) {\n  if (fiber.tag === SuspenseComponent) {\n    let suspenseState = fiber.memoizedState;\n\n    if (suspenseState === null) {\n      const current = fiber.alternate;\n\n      if (current !== null) {\n        suspenseState = current.memoizedState;\n      }\n    }\n\n    if (suspenseState !== null) {\n      return suspenseState.dehydrated;\n    }\n  }\n\n  return null;\n}\nfunction getContainerFromFiber(fiber) {\n  return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;\n}\nfunction isFiberMounted(fiber) {\n  return getNearestMountedFiber(fiber) === fiber;\n}\nfunction isMounted(component) {\n\n  const fiber = get(component);\n\n  if (!fiber) {\n    return false;\n  }\n\n  return getNearestMountedFiber(fiber) === fiber;\n}\n\nfunction assertIsMounted(fiber) {\n  if (getNearestMountedFiber(fiber) !== fiber) {\n    throw Error(formatProdErrorMessage(188));\n  }\n}\n\nfunction findCurrentFiberUsingSlowPath(fiber) {\n  const alternate = fiber.alternate;\n\n  if (!alternate) {\n    // If there is no alternate, then we only need to check if it is mounted.\n    const nearestMounted = getNearestMountedFiber(fiber);\n\n    if (nearestMounted === null) {\n      throw Error(formatProdErrorMessage(188));\n    }\n\n    if (nearestMounted !== fiber) {\n      return null;\n    }\n\n    return fiber;\n  } // If we have two possible branches, we'll walk backwards up to the root\n  // to see what path the root points to. On the way we may hit one of the\n  // special cases and we'll deal with them.\n\n\n  let a = fiber;\n  let b = alternate;\n\n  while (true) {\n    const parentA = a.return;\n\n    if (parentA === null) {\n      // We're at the root.\n      break;\n    }\n\n    const parentB = parentA.alternate;\n\n    if (parentB === null) {\n      // There is no alternate. This is an unusual case. Currently, it only\n      // happens when a Suspense component is hidden. An extra fragment fiber\n      // is inserted in between the Suspense fiber and its children. Skip\n      // over this extra fragment fiber and proceed to the next parent.\n      const nextParent = parentA.return;\n\n      if (nextParent !== null) {\n        a = b = nextParent;\n        continue;\n      } // If there's no parent, we're at the root.\n\n\n      break;\n    } // If both copies of the parent fiber point to the same child, we can\n    // assume that the child is current. This happens when we bailout on low\n    // priority: the bailed out fiber's child reuses the current child.\n\n\n    if (parentA.child === parentB.child) {\n      let child = parentA.child;\n\n      while (child) {\n        if (child === a) {\n          // We've determined that A is the current branch.\n          assertIsMounted(parentA);\n          return fiber;\n        }\n\n        if (child === b) {\n          // We've determined that B is the current branch.\n          assertIsMounted(parentA);\n          return alternate;\n        }\n\n        child = child.sibling;\n      } // We should never have an alternate for any mounting node. So the only\n      // way this could possibly happen is if this was unmounted, if at all.\n\n\n      throw Error(formatProdErrorMessage(188));\n    }\n\n    if (a.return !== b.return) {\n      // The return pointer of A and the return pointer of B point to different\n      // fibers. We assume that return pointers never criss-cross, so A must\n      // belong to the child set of A.return, and B must belong to the child\n      // set of B.return.\n      a = parentA;\n      b = parentB;\n    } else {\n      // The return pointers point to the same fiber. We'll have to use the\n      // default, slow path: scan the child sets of each parent alternate to see\n      // which child belongs to which set.\n      //\n      // Search parent A's child set\n      let didFindChild = false;\n      let child = parentA.child;\n\n      while (child) {\n        if (child === a) {\n          didFindChild = true;\n          a = parentA;\n          b = parentB;\n          break;\n        }\n\n        if (child === b) {\n          didFindChild = true;\n          b = parentA;\n          a = parentB;\n          break;\n        }\n\n        child = child.sibling;\n      }\n\n      if (!didFindChild) {\n        // Search parent B's child set\n        child = parentB.child;\n\n        while (child) {\n          if (child === a) {\n            didFindChild = true;\n            a = parentB;\n            b = parentA;\n            break;\n          }\n\n          if (child === b) {\n            didFindChild = true;\n            b = parentB;\n            a = parentA;\n            break;\n          }\n\n          child = child.sibling;\n        }\n\n        if (!didFindChild) {\n          throw Error(formatProdErrorMessage(189));\n        }\n      }\n    }\n\n    if (a.alternate !== b) {\n      throw Error(formatProdErrorMessage(190));\n    }\n  } // If the root is not a host container, we're in a disconnected tree. I.e.\n  // unmounted.\n\n\n  if (a.tag !== HostRoot) {\n    throw Error(formatProdErrorMessage(188));\n  }\n\n  if (a.stateNode.current === a) {\n    // We've determined that A is the current branch.\n    return fiber;\n  } // Otherwise B has to be current branch.\n\n\n  return alternate;\n}\nfunction findCurrentHostFiber(parent) {\n  const currentParent = findCurrentFiberUsingSlowPath(parent);\n  return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;\n}\n\nfunction findCurrentHostFiberImpl(node) {\n  // Next we'll drill down this component to find the first HostComponent/Text.\n  const tag = node.tag;\n\n  if (tag === HostComponent || tag === HostHoistable || tag === HostSingleton || tag === HostText) {\n    return node;\n  }\n\n  let child = node.child;\n\n  while (child !== null) {\n    const match = findCurrentHostFiberImpl(child);\n\n    if (match !== null) {\n      return match;\n    }\n\n    child = child.sibling;\n  }\n\n  return null;\n}\n\nconst emptyContextObject = {};\n\n\nconst contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.\n\nconst didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.\n// We use this to get access to the parent context after we have already\n// pushed the next context provider, and now need to merge their contexts.\n\nlet previousContext = emptyContextObject;\n\nfunction getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {\n  {\n    if (didPushOwnContextIfProvider && isContextProvider(Component)) {\n      // If the fiber is a context provider itself, when we read its context\n      // we may have already pushed its own child context on the stack. A context\n      // provider should not \"see\" its own child context. Therefore we read the\n      // previous (parent) context instead for a context provider.\n      return previousContext;\n    }\n\n    return contextStackCursor.current;\n  }\n}\n\nfunction cacheContext(workInProgress, unmaskedContext, maskedContext) {\n  {\n    const instance = workInProgress.stateNode;\n    instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;\n    instance.__reactInternalMemoizedMaskedChildContext = maskedContext;\n  }\n}\n\nfunction getMaskedContext(workInProgress, unmaskedContext) {\n  {\n    const type = workInProgress.type;\n    const contextTypes = type.contextTypes;\n\n    if (!contextTypes) {\n      return emptyContextObject;\n    } // Avoid recreating masked context unless unmasked context has changed.\n    // Failing to do this will result in unnecessary calls to componentWillReceiveProps.\n    // This may trigger infinite loops if componentWillReceiveProps calls setState.\n\n\n    const instance = workInProgress.stateNode;\n\n    if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {\n      return instance.__reactInternalMemoizedMaskedChildContext;\n    }\n\n    const context = {};\n\n    for (const key in contextTypes) {\n      context[key] = unmaskedContext[key];\n    } // Cache unmasked context so we can avoid recreating masked context unless necessary.\n    // Context is created before the class component is instantiated so check for instance.\n\n\n    if (instance) {\n      cacheContext(workInProgress, unmaskedContext, context);\n    }\n\n    return context;\n  }\n}\n\nfunction hasContextChanged() {\n  {\n    return didPerformWorkStackCursor.current;\n  }\n}\n\nfunction isContextProvider(type) {\n  {\n    const childContextTypes = type.childContextTypes;\n    return childContextTypes !== null && childContextTypes !== undefined;\n  }\n}\n\nfunction popContext(fiber) {\n  {\n    pop(didPerformWorkStackCursor);\n    pop(contextStackCursor);\n  }\n}\n\nfunction popTopLevelContextObject(fiber) {\n  {\n    pop(didPerformWorkStackCursor);\n    pop(contextStackCursor);\n  }\n}\n\nfunction pushTopLevelContextObject(fiber, context, didChange) {\n  {\n    if (contextStackCursor.current !== emptyContextObject) {\n      throw Error(formatProdErrorMessage(168));\n    }\n\n    push(contextStackCursor, context);\n    push(didPerformWorkStackCursor, didChange);\n  }\n}\n\nfunction processChildContext(fiber, type, parentContext) {\n  {\n    const instance = fiber.stateNode;\n    const childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.\n    // It has only been added in Fiber to match the (unintentional) behavior in Stack.\n\n    if (typeof instance.getChildContext !== 'function') {\n\n      return parentContext;\n    }\n\n    const childContext = instance.getChildContext();\n\n    for (const contextKey in childContext) {\n      if (!(contextKey in childContextTypes)) {\n        throw Error(formatProdErrorMessage(108, getComponentNameFromFiber(fiber) || 'Unknown', contextKey));\n      }\n    }\n\n    return assign({}, parentContext, childContext);\n  }\n}\n\nfunction pushContextProvider(workInProgress) {\n  {\n    const instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.\n    // If the instance does not exist yet, we will push null at first,\n    // and replace it on the stack later when invalidating the context.\n\n    const memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.\n    // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.\n\n    previousContext = contextStackCursor.current;\n    push(contextStackCursor, memoizedMergedChildContext);\n    push(didPerformWorkStackCursor, didPerformWorkStackCursor.current);\n    return true;\n  }\n}\n\nfunction invalidateContextProvider(workInProgress, type, didChange) {\n  {\n    const instance = workInProgress.stateNode;\n\n    if (!instance) {\n      throw Error(formatProdErrorMessage(169));\n    }\n\n    if (didChange) {\n      // Merge parent and own context.\n      // Skip this if we're not updating due to sCU.\n      // This avoids unnecessarily recomputing memoized values.\n      const mergedContext = processChildContext(workInProgress, type, previousContext);\n      instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.\n      // It is important to unwind the context in the reverse order.\n\n      pop(didPerformWorkStackCursor);\n      pop(contextStackCursor); // Now push the new context and mark that it has changed.\n\n      push(contextStackCursor, mergedContext);\n      push(didPerformWorkStackCursor, didChange);\n    } else {\n      pop(didPerformWorkStackCursor);\n      push(didPerformWorkStackCursor, didChange);\n    }\n  }\n}\n\nfunction findCurrentUnmaskedContext(fiber) {\n  {\n    // Currently this is only used with renderSubtreeIntoContainer; not sure if it\n    // makes sense elsewhere\n    if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {\n      throw Error(formatProdErrorMessage(170));\n    }\n\n    let node = fiber;\n\n    do {\n      switch (node.tag) {\n        case HostRoot:\n          return node.stateNode.context;\n\n        case ClassComponent:\n          {\n            const Component = node.type;\n\n            if (isContextProvider(Component)) {\n              return node.stateNode.__reactInternalMemoizedMergedChildContext;\n            }\n\n            break;\n          }\n      } // $FlowFixMe[incompatible-type] we bail out when we get a null\n\n\n      node = node.return;\n    } while (node !== null);\n\n    throw Error(formatProdErrorMessage(171));\n  }\n}\n\nconst LegacyRoot = 0;\nconst ConcurrentRoot = 1;\n\n// We use the existence of the state object as an indicator that the component\n// is hidden.\nconst OffscreenVisible =\n/*                     */\n0b001;\nconst OffscreenDetached =\n/*                    */\n0b010;\nconst OffscreenPassiveEffectsConnected =\n/*     */\n0b100;\nfunction isOffscreenManual(offscreenFiber) {\n  return offscreenFiber.memoizedProps !== null && offscreenFiber.memoizedProps.mode === 'manual';\n}\n\n/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */\nfunction is(x, y) {\n  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare\n  ;\n}\n\nconst objectIs = // $FlowFixMe[method-unbinding]\ntypeof Object.is === 'function' ? Object.is : is;\n\n// This is imported by the event replaying implementation in React DOM. It's\n// in a separate file to break a circular dependency between the renderer and\n// the reconciler.\nfunction isRootDehydrated(root) {\n  const currentState = root.current.memoizedState;\n  return currentState.isDehydrated;\n}\n\n// Ids are base 32 strings whose binary representation corresponds to the\n// Intentionally not using it yet to derisk the initial implementation, because\n// the way we push/pop these values is a bit unusual. If there's a mistake, I'd\n// rather the ids be wrong than crash the whole reconciler.\n\nconst forkStack = [];\nlet forkStackIndex = 0;\nlet treeForkProvider = null;\nlet treeForkCount = 0;\nconst idStack = [];\nlet idStackIndex = 0;\nlet treeContextProvider = null;\nlet treeContextId = 1;\nlet treeContextOverflow = '';\nfunction isForkedChild(workInProgress) {\n  return (workInProgress.flags & Forked) !== NoFlags$1;\n}\nfunction getForksAtLevel(workInProgress) {\n  return treeForkCount;\n}\nfunction getTreeId() {\n  const overflow = treeContextOverflow;\n  const idWithLeadingBit = treeContextId;\n  const id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);\n  return id.toString(32) + overflow;\n}\nfunction pushTreeFork(workInProgress, totalChildren) {\n  forkStack[forkStackIndex++] = treeForkCount;\n  forkStack[forkStackIndex++] = treeForkProvider;\n  treeForkProvider = workInProgress;\n  treeForkCount = totalChildren;\n}\nfunction pushTreeId(workInProgress, totalChildren, index) {\n  idStack[idStackIndex++] = treeContextId;\n  idStack[idStackIndex++] = treeContextOverflow;\n  idStack[idStackIndex++] = treeContextProvider;\n  treeContextProvider = workInProgress;\n  const baseIdWithLeadingBit = treeContextId;\n  const baseOverflow = treeContextOverflow; // The leftmost 1 marks the end of the sequence, non-inclusive. It's not part\n  // of the id; we use it to account for leading 0s.\n\n  const baseLength = getBitLength(baseIdWithLeadingBit) - 1;\n  const baseId = baseIdWithLeadingBit & ~(1 << baseLength);\n  const slot = index + 1;\n  const length = getBitLength(totalChildren) + baseLength; // 30 is the max length we can store without overflowing, taking into\n  // consideration the leading 1 we use to mark the end of the sequence.\n\n  if (length > 30) {\n    // We overflowed the bitwise-safe range. Fall back to slower algorithm.\n    // This branch assumes the length of the base id is greater than 5; it won't\n    // work for smaller ids, because you need 5 bits per character.\n    //\n    // We encode the id in multiple steps: first the base id, then the\n    // remaining digits.\n    //\n    // Each 5 bit sequence corresponds to a single base 32 character. So for\n    // example, if the current id is 23 bits long, we can convert 20 of those\n    // bits into a string of 4 characters, with 3 bits left over.\n    //\n    // First calculate how many bits in the base id represent a complete\n    // sequence of characters.\n    const numberOfOverflowBits = baseLength - baseLength % 5; // Then create a bitmask that selects only those bits.\n\n    const newOverflowBits = (1 << numberOfOverflowBits) - 1; // Select the bits, and convert them to a base 32 string.\n\n    const newOverflow = (baseId & newOverflowBits).toString(32); // Now we can remove those bits from the base id.\n\n    const restOfBaseId = baseId >> numberOfOverflowBits;\n    const restOfBaseLength = baseLength - numberOfOverflowBits; // Finally, encode the rest of the bits using the normal algorithm. Because\n    // we made more room, this time it won't overflow.\n\n    const restOfLength = getBitLength(totalChildren) + restOfBaseLength;\n    const restOfNewBits = slot << restOfBaseLength;\n    const id = restOfNewBits | restOfBaseId;\n    const overflow = newOverflow + baseOverflow;\n    treeContextId = 1 << restOfLength | id;\n    treeContextOverflow = overflow;\n  } else {\n    // Normal path\n    const newBits = slot << baseLength;\n    const id = newBits | baseId;\n    const overflow = baseOverflow;\n    treeContextId = 1 << length | id;\n    treeContextOverflow = overflow;\n  }\n}\nfunction pushMaterializedTreeId(workInProgress) {\n  // in its children.\n\n  const returnFiber = workInProgress.return;\n\n  if (returnFiber !== null) {\n    const numberOfForks = 1;\n    const slotIndex = 0;\n    pushTreeFork(workInProgress, numberOfForks);\n    pushTreeId(workInProgress, numberOfForks, slotIndex);\n  }\n}\n\nfunction getBitLength(number) {\n  return 32 - clz32(number);\n}\n\nfunction getLeadingBit(id) {\n  return 1 << getBitLength(id) - 1;\n}\n\nfunction popTreeContext(workInProgress) {\n  // Restore the previous values.\n  // This is a bit more complicated than other context-like modules in Fiber\n  // because the same Fiber may appear on the stack multiple times and for\n  // different reasons. We have to keep popping until the work-in-progress is\n  // no longer at the top of the stack.\n  while (workInProgress === treeForkProvider) {\n    treeForkProvider = forkStack[--forkStackIndex];\n    forkStack[forkStackIndex] = null;\n    treeForkCount = forkStack[--forkStackIndex];\n    forkStack[forkStackIndex] = null;\n  }\n\n  while (workInProgress === treeContextProvider) {\n    treeContextProvider = idStack[--idStackIndex];\n    idStack[idStackIndex] = null;\n    treeContextOverflow = idStack[--idStackIndex];\n    idStack[idStackIndex] = null;\n    treeContextId = idStack[--idStackIndex];\n    idStack[idStackIndex] = null;\n  }\n}\nfunction getSuspendedTreeContext() {\n\n  if (treeContextProvider !== null) {\n    return {\n      id: treeContextId,\n      overflow: treeContextOverflow\n    };\n  } else {\n    return null;\n  }\n}\nfunction restoreSuspendedTreeContext(workInProgress, suspendedContext) {\n  idStack[idStackIndex++] = treeContextId;\n  idStack[idStackIndex++] = treeContextOverflow;\n  idStack[idStackIndex++] = treeContextProvider;\n  treeContextId = suspendedContext.id;\n  treeContextOverflow = suspendedContext.overflow;\n  treeContextProvider = workInProgress;\n}\n\n// This may have been an insertion or a hydration.\n\nlet hydrationParentFiber = null;\nlet nextHydratableInstance = null;\nlet isHydrating = false; // This flag allows for warning supression when we expect there to be mismatches\n\nlet hydrationErrors = null;\nlet rootOrSingletonContext = false; // Builds a common ancestor tree from the root down for collecting diffs.\n\nfunction enterHydrationState(fiber) {\n\n  const parentInstance = fiber.stateNode.containerInfo;\n  nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);\n  hydrationParentFiber = fiber;\n  isHydrating = true;\n  hydrationErrors = null;\n  rootOrSingletonContext = true;\n  return true;\n}\n\nfunction reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {\n\n  nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);\n  hydrationParentFiber = fiber;\n  isHydrating = true;\n  hydrationErrors = null;\n  rootOrSingletonContext = false;\n\n  if (treeContext !== null) {\n    restoreSuspendedTreeContext(fiber, treeContext);\n  }\n\n  return true;\n}\n\nfunction tryHydrateInstance(fiber, nextInstance, hostContext) {\n  // fiber is a HostComponent Fiber\n  const instance = canHydrateInstance(nextInstance, fiber.type, fiber.pendingProps, rootOrSingletonContext);\n\n  if (instance !== null) {\n    fiber.stateNode = instance;\n\n    hydrationParentFiber = fiber;\n    nextHydratableInstance = getFirstHydratableChild(instance);\n    rootOrSingletonContext = false;\n    return true;\n  }\n\n  return false;\n}\n\nfunction tryHydrateText(fiber, nextInstance) {\n  // fiber is a HostText Fiber\n  const text = fiber.pendingProps;\n  const textInstance = canHydrateTextInstance(nextInstance, text, rootOrSingletonContext);\n\n  if (textInstance !== null) {\n    fiber.stateNode = textInstance;\n    hydrationParentFiber = fiber; // Text Instances don't have children so there's nothing to hydrate.\n\n    nextHydratableInstance = null;\n    return true;\n  }\n\n  return false;\n}\n\nfunction tryHydrateSuspense(fiber, nextInstance) {\n  // fiber is a SuspenseComponent Fiber\n  const suspenseInstance = canHydrateSuspenseInstance(nextInstance, rootOrSingletonContext);\n\n  if (suspenseInstance !== null) {\n    const suspenseState = {\n      dehydrated: suspenseInstance,\n      treeContext: getSuspendedTreeContext(),\n      retryLane: OffscreenLane\n    };\n    fiber.memoizedState = suspenseState; // Store the dehydrated fragment as a child fiber.\n    // This simplifies the code for getHostSibling and deleting nodes,\n    // since it doesn't have to consider all Suspense boundaries and\n    // check if they're dehydrated ones or not.\n\n    const dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);\n    dehydratedFragment.return = fiber;\n    fiber.child = dehydratedFragment;\n    hydrationParentFiber = fiber; // While a Suspense Instance does have children, we won't step into\n    // it during the first pass. Instead, we'll reenter it later.\n\n    nextHydratableInstance = null;\n    return true;\n  }\n\n  return false;\n}\n\nfunction throwOnHydrationMismatch(fiber) {\n  let diff = '';\n\n  throw Error(formatProdErrorMessage(418, diff));\n}\n\nfunction claimHydratableSingleton(fiber) {\n  {\n    if (!isHydrating) {\n      return;\n    }\n\n    const currentRootContainer = getRootHostContainer();\n    const instance = fiber.stateNode = resolveSingletonInstance(fiber.type, fiber.pendingProps, currentRootContainer);\n\n    hydrationParentFiber = fiber;\n    rootOrSingletonContext = true;\n    nextHydratableInstance = getFirstHydratableChild(instance);\n  }\n}\n\nfunction tryToClaimNextHydratableInstance(fiber) {\n  if (!isHydrating) {\n    return;\n  } // Validate that this is ok to render here before any mismatches.\n  const nextInstance = nextHydratableInstance;\n\n  if (!nextInstance || !tryHydrateInstance(fiber, nextInstance)) {\n\n    throwOnHydrationMismatch();\n  }\n}\n\nfunction tryToClaimNextHydratableTextInstance(fiber) {\n  if (!isHydrating) {\n    return;\n  }\n  const nextInstance = nextHydratableInstance;\n\n  if (!nextInstance || !tryHydrateText(fiber, nextInstance)) {\n\n    throwOnHydrationMismatch();\n  }\n}\n\nfunction tryToClaimNextHydratableSuspenseInstance(fiber) {\n  if (!isHydrating) {\n    return;\n  }\n\n  const nextInstance = nextHydratableInstance;\n\n  if (!nextInstance || !tryHydrateSuspense(fiber, nextInstance)) {\n    throwOnHydrationMismatch();\n  }\n}\n\nfunction tryToClaimNextHydratableFormMarkerInstance(fiber) {\n  if (!isHydrating) {\n    return false;\n  }\n\n  if (nextHydratableInstance) {\n    const markerInstance = canHydrateFormStateMarker(nextHydratableInstance, rootOrSingletonContext);\n\n    if (markerInstance) {\n      // Found the marker instance.\n      nextHydratableInstance = getNextHydratableSibling(markerInstance); // Return true if this marker instance should use the state passed\n      // to hydrateRoot.\n      // TODO: As an optimization, Fizz should only emit these markers if form\n      // state is passed at the root.\n\n      return isFormStateMarkerMatching(markerInstance);\n    }\n  } // Should have found a marker instance. Throw an error to trigger client\n  // rendering. We don't bother to check if we're in a concurrent root because\n  // useActionState is a new API, so backwards compat is not an issue.\n\n\n  throwOnHydrationMismatch();\n  return false;\n}\n\nfunction prepareToHydrateHostInstance(fiber, hostContext) {\n\n  const instance = fiber.stateNode;\n  const didHydrate = hydrateInstance(instance, fiber.type, fiber.memoizedProps, hostContext, fiber);\n\n  if (!didHydrate && favorSafetyOverHydrationPerf) {\n    throwOnHydrationMismatch();\n  }\n}\n\nfunction prepareToHydrateHostTextInstance(fiber) {\n\n  const textInstance = fiber.stateNode;\n  const textContent = fiber.memoizedProps;\n  let parentProps = null; // We assume that prepareToHydrateHostTextInstance is called in a context where the\n  // hydration parent is the parent host component of this host text.\n\n  const returnFiber = hydrationParentFiber;\n\n  if (returnFiber !== null) {\n    switch (returnFiber.tag) {\n      case HostRoot:\n        {\n\n          break;\n        }\n\n      case HostSingleton:\n      case HostComponent:\n        {\n          parentProps = returnFiber.memoizedProps;\n\n          break;\n        }\n    } // TODO: What if it's a SuspenseInstance?\n\n  }\n\n  const didHydrate = hydrateTextInstance(textInstance, textContent, fiber, parentProps);\n\n  if (!didHydrate && favorSafetyOverHydrationPerf) {\n    throwOnHydrationMismatch();\n  }\n}\n\nfunction prepareToHydrateHostSuspenseInstance(fiber) {\n\n  const suspenseState = fiber.memoizedState;\n  const suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;\n\n  if (!suspenseInstance) {\n    throw Error(formatProdErrorMessage(317));\n  }\n\n  hydrateSuspenseInstance(suspenseInstance, fiber);\n}\n\nfunction skipPastDehydratedSuspenseInstance(fiber) {\n\n  const suspenseState = fiber.memoizedState;\n  const suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;\n\n  if (!suspenseInstance) {\n    throw Error(formatProdErrorMessage(317));\n  }\n\n  return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);\n}\n\nfunction popToNextHostParent(fiber) {\n  hydrationParentFiber = fiber.return;\n\n  while (hydrationParentFiber) {\n    switch (hydrationParentFiber.tag) {\n      case HostRoot:\n      case HostSingleton:\n        rootOrSingletonContext = true;\n        return;\n\n      case HostComponent:\n      case SuspenseComponent:\n        rootOrSingletonContext = false;\n        return;\n\n      default:\n        hydrationParentFiber = hydrationParentFiber.return;\n    }\n  }\n}\n\nfunction popHydrationState(fiber) {\n\n  if (fiber !== hydrationParentFiber) {\n    // We're deeper than the current hydration context, inside an inserted\n    // tree.\n    return false;\n  }\n\n  if (!isHydrating) {\n    // If we're not currently hydrating but we're in a hydration context, then\n    // we were an insertion and now need to pop up reenter hydration of our\n    // siblings.\n    popToNextHostParent(fiber);\n    isHydrating = true;\n    return false;\n  }\n\n  let shouldClear = false;\n\n  {\n    // With float we never clear the Root, or Singleton instances. We also do not clear Instances\n    // that have singleton text content\n    if (fiber.tag !== HostRoot && fiber.tag !== HostSingleton && !(fiber.tag === HostComponent && (!shouldDeleteUnhydratedTailInstances(fiber.type) || shouldSetTextContent(fiber.type, fiber.memoizedProps)))) {\n      shouldClear = true;\n    }\n  }\n\n  if (shouldClear) {\n    const nextInstance = nextHydratableInstance;\n\n    if (nextInstance) {\n      throwOnHydrationMismatch();\n    }\n  }\n\n  popToNextHostParent(fiber);\n\n  if (fiber.tag === SuspenseComponent) {\n    nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);\n  } else {\n    nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;\n  }\n\n  return true;\n}\n\nfunction resetHydrationState() {\n\n  hydrationParentFiber = null;\n  nextHydratableInstance = null;\n  isHydrating = false;\n}\n\nfunction upgradeHydrationErrorsToRecoverable() {\n  if (hydrationErrors !== null) {\n    // Successfully completed a forced client render. The errors that occurred\n    // during the hydration attempt are now recovered. We will log them in\n    // commit phase, once the entire tree has finished.\n    queueRecoverableErrors(hydrationErrors);\n    hydrationErrors = null;\n  }\n}\n\nfunction getIsHydrating() {\n  return isHydrating;\n}\n\nfunction queueHydrationError(error) {\n  if (hydrationErrors === null) {\n    hydrationErrors = [error];\n  } else {\n    hydrationErrors.push(error);\n  }\n}\n\n// we wait until the current render is over (either finished or interrupted)\n// before adding it to the fiber/hook queue. Push to this array so we can\n// access the queue, fiber, update, et al later.\n\nconst concurrentQueues = [];\nlet concurrentQueuesIndex = 0;\nlet concurrentlyUpdatedLanes = NoLanes;\nfunction finishQueueingConcurrentUpdates() {\n  const endIndex = concurrentQueuesIndex;\n  concurrentQueuesIndex = 0;\n  concurrentlyUpdatedLanes = NoLanes;\n  let i = 0;\n\n  while (i < endIndex) {\n    const fiber = concurrentQueues[i];\n    concurrentQueues[i++] = null;\n    const queue = concurrentQueues[i];\n    concurrentQueues[i++] = null;\n    const update = concurrentQueues[i];\n    concurrentQueues[i++] = null;\n    const lane = concurrentQueues[i];\n    concurrentQueues[i++] = null;\n\n    if (queue !== null && update !== null) {\n      const pending = queue.pending;\n\n      if (pending === null) {\n        // This is the first update. Create a circular list.\n        update.next = update;\n      } else {\n        update.next = pending.next;\n        pending.next = update;\n      }\n\n      queue.pending = update;\n    }\n\n    if (lane !== NoLane) {\n      markUpdateLaneFromFiberToRoot(fiber, update, lane);\n    }\n  }\n}\nfunction getConcurrentlyUpdatedLanes() {\n  return concurrentlyUpdatedLanes;\n}\n\nfunction enqueueUpdate$1(fiber, queue, update, lane) {\n  // Don't update the `childLanes` on the return path yet. If we already in\n  // the middle of rendering, wait until after it has completed.\n  concurrentQueues[concurrentQueuesIndex++] = fiber;\n  concurrentQueues[concurrentQueuesIndex++] = queue;\n  concurrentQueues[concurrentQueuesIndex++] = update;\n  concurrentQueues[concurrentQueuesIndex++] = lane;\n  concurrentlyUpdatedLanes = mergeLanes(concurrentlyUpdatedLanes, lane); // The fiber's `lane` field is used in some places to check if any work is\n  // scheduled, to perform an eager bailout, so we need to update it immediately.\n  // TODO: We should probably move this to the \"shared\" queue instead.\n\n  fiber.lanes = mergeLanes(fiber.lanes, lane);\n  const alternate = fiber.alternate;\n\n  if (alternate !== null) {\n    alternate.lanes = mergeLanes(alternate.lanes, lane);\n  }\n}\n\nfunction enqueueConcurrentHookUpdate(fiber, queue, update, lane) {\n  const concurrentQueue = queue;\n  const concurrentUpdate = update;\n  enqueueUpdate$1(fiber, concurrentQueue, concurrentUpdate, lane);\n  return getRootForUpdatedFiber(fiber);\n}\nfunction enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update) {\n  // This function is used to queue an update that doesn't need a rerender. The\n  // only reason we queue it is in case there's a subsequent higher priority\n  // update that causes it to be rebased.\n  const lane = NoLane;\n  const concurrentQueue = queue;\n  const concurrentUpdate = update;\n  enqueueUpdate$1(fiber, concurrentQueue, concurrentUpdate, lane); // Usually we can rely on the upcoming render phase to process the concurrent\n  // queue. However, since this is a bail out, we're not scheduling any work\n  // here. So the update we just queued will leak until something else happens\n  // to schedule work (if ever).\n  //\n  // Check if we're currently in the middle of rendering a tree, and if not,\n  // process the queue immediately to prevent a leak.\n\n  const isConcurrentlyRendering = getWorkInProgressRoot() !== null;\n\n  if (!isConcurrentlyRendering) {\n    finishQueueingConcurrentUpdates();\n  }\n}\nfunction enqueueConcurrentClassUpdate(fiber, queue, update, lane) {\n  const concurrentQueue = queue;\n  const concurrentUpdate = update;\n  enqueueUpdate$1(fiber, concurrentQueue, concurrentUpdate, lane);\n  return getRootForUpdatedFiber(fiber);\n}\nfunction enqueueConcurrentRenderForLane(fiber, lane) {\n  enqueueUpdate$1(fiber, null, null, lane);\n  return getRootForUpdatedFiber(fiber);\n} // Calling this function outside this module should only be done for backwards\n// compatibility and should always be accompanied by a warning.\n\nfunction unsafe_markUpdateLaneFromFiberToRoot(sourceFiber, lane) {\n  // NOTE: For Hyrum's Law reasons, if an infinite update loop is detected, it\n  // should throw before `markUpdateLaneFromFiberToRoot` is called. But this is\n  // undefined behavior and we can change it if we need to; it just so happens\n  // that, at the time of this writing, there's an internal product test that\n  // happens to rely on this.\n  const root = getRootForUpdatedFiber(sourceFiber);\n  markUpdateLaneFromFiberToRoot(sourceFiber, null, lane);\n  return root;\n}\n\nfunction markUpdateLaneFromFiberToRoot(sourceFiber, update, lane) {\n  // Update the source fiber's lanes\n  sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);\n  let alternate = sourceFiber.alternate;\n\n  if (alternate !== null) {\n    alternate.lanes = mergeLanes(alternate.lanes, lane);\n  } // Walk the parent path to the root and update the child lanes.\n\n\n  let isHidden = false;\n  let parent = sourceFiber.return;\n  let node = sourceFiber;\n\n  while (parent !== null) {\n    parent.childLanes = mergeLanes(parent.childLanes, lane);\n    alternate = parent.alternate;\n\n    if (alternate !== null) {\n      alternate.childLanes = mergeLanes(alternate.childLanes, lane);\n    }\n\n    if (parent.tag === OffscreenComponent) {\n      // Check if this offscreen boundary is currently hidden.\n      //\n      // The instance may be null if the Offscreen parent was unmounted. Usually\n      // the parent wouldn't be reachable in that case because we disconnect\n      // fibers from the tree when they are deleted. However, there's a weird\n      // edge case where setState is called on a fiber that was interrupted\n      // before it ever mounted. Because it never mounts, it also never gets\n      // deleted. Because it never gets deleted, its return pointer never gets\n      // disconnected. Which means it may be attached to a deleted Offscreen\n      // parent node. (This discovery suggests it may be better for memory usage\n      // if we don't attach the `return` pointer until the commit phase, though\n      // in order to do that we'd need some other way to track the return\n      // pointer during the initial render, like on the stack.)\n      //\n      // This case is always accompanied by a warning, but we still need to\n      // account for it. (There may be other cases that we haven't discovered,\n      // too.)\n      const offscreenInstance = parent.stateNode;\n\n      if (offscreenInstance !== null && !(offscreenInstance._visibility & OffscreenVisible)) {\n        isHidden = true;\n      }\n    }\n\n    node = parent;\n    parent = parent.return;\n  }\n\n  if (isHidden && update !== null && node.tag === HostRoot) {\n    const root = node.stateNode;\n    markHiddenUpdate(root, update, lane);\n  }\n}\n\nfunction getRootForUpdatedFiber(sourceFiber) {\n  // TODO: We will detect and infinite update loop and throw even if this fiber\n  // has already unmounted. This isn't really necessary but it happens to be the\n  // current behavior we've used for several release cycles. Consider not\n  // performing this check if the updated fiber already unmounted, since it's\n  // not possible for that to cause an infinite update loop.\n  throwIfInfiniteUpdateLoopDetected(); // When a setState happens, we must ensure the root is scheduled. Because\n  let node = sourceFiber;\n  let parent = node.return;\n\n  while (parent !== null) {\n    node = parent;\n    parent = node.return;\n  }\n\n  return node.tag === HostRoot ? node.stateNode : null;\n}\n\n// there's only a single root, but we do support multi root apps, hence this\n// extra complexity. But this module is optimized for the single root case.\n\nlet firstScheduledRoot = null;\nlet lastScheduledRoot = null; // Used to prevent redundant mircotasks from being scheduled.\n\nlet didScheduleMicrotask = false; // `act` \"microtasks\" are scheduled on the `act` queue instead of an actual\n\nlet mightHavePendingSyncWork = false;\nlet isFlushingWork = false;\nlet currentEventTransitionLane = NoLane;\nfunction ensureRootIsScheduled(root) {\n  // This function is called whenever a root receives an update. It does two\n  // things 1) it ensures the root is in the root schedule, and 2) it ensures\n  // there's a pending microtask to process the root schedule.\n  //\n  // Most of the actual scheduling logic does not happen until\n  // `scheduleTaskForRootDuringMicrotask` runs.\n  // Add the root to the schedule\n  if (root === lastScheduledRoot || root.next !== null) ; else {\n    if (lastScheduledRoot === null) {\n      firstScheduledRoot = lastScheduledRoot = root;\n    } else {\n      lastScheduledRoot.next = root;\n      lastScheduledRoot = root;\n    }\n  } // Any time a root received an update, we set this to true until the next time\n  // we process the schedule. If it's false, then we can quickly exit flushSync\n  // without consulting the schedule.\n\n\n  mightHavePendingSyncWork = true; // At the end of the current event, go through each of the roots and ensure\n  // there's a task scheduled for each one at the correct priority.\n\n  {\n    if (!didScheduleMicrotask) {\n      didScheduleMicrotask = true;\n      scheduleImmediateTask(processRootScheduleInMicrotask);\n    }\n  }\n}\nfunction flushSyncWorkOnAllRoots() {\n  // This is allowed to be called synchronously, but the caller should check\n  // the execution context first.\n  flushSyncWorkAcrossRoots_impl(false);\n}\nfunction flushSyncWorkOnLegacyRootsOnly() {\n  // This is allowed to be called synchronously, but the caller should check\n  // the execution context first.\n  flushSyncWorkAcrossRoots_impl(true);\n}\n\nfunction flushSyncWorkAcrossRoots_impl(onlyLegacy) {\n  if (isFlushingWork) {\n    // Prevent reentrancy.\n    // TODO: Is this overly defensive? The callers must check the execution\n    // context first regardless.\n    return;\n  }\n\n  if (!mightHavePendingSyncWork) {\n    // Fast path. There's no sync work to do.\n    return;\n  } // There may or may not be synchronous work scheduled. Let's check.\n\n\n  let didPerformSomeWork;\n  isFlushingWork = true;\n\n  do {\n    didPerformSomeWork = false;\n    let root = firstScheduledRoot;\n\n    while (root !== null) {\n      if (onlyLegacy && root.tag !== LegacyRoot) ; else {\n        const workInProgressRoot = getWorkInProgressRoot();\n        const workInProgressRootRenderLanes = getWorkInProgressRootRenderLanes();\n        const nextLanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);\n\n        if (includesSyncLane(nextLanes)) {\n          // This root has pending sync work. Flush it now.\n          didPerformSomeWork = true;\n          performSyncWorkOnRoot(root, nextLanes);\n        }\n      }\n\n      root = root.next;\n    }\n  } while (didPerformSomeWork);\n\n  isFlushingWork = false;\n}\n\nfunction processRootScheduleInMicrotask() {\n  // This function is always called inside a microtask. It should never be\n  // called synchronously.\n  didScheduleMicrotask = false;\n\n\n  mightHavePendingSyncWork = false;\n  const currentTime = now();\n  let prev = null;\n  let root = firstScheduledRoot;\n\n  while (root !== null) {\n    const next = root.next;\n\n    if (currentEventTransitionLane !== NoLane && shouldAttemptEagerTransition()) {\n      // A transition was scheduled during an event, but we're going to try to\n      // render it synchronously anyway. We do this during a popstate event to\n      // preserve the scroll position of the previous page.\n      upgradePendingLaneToSync(root, currentEventTransitionLane);\n    }\n\n    const nextLanes = scheduleTaskForRootDuringMicrotask(root, currentTime);\n\n    if (nextLanes === NoLane) {\n      // This root has no more pending work. Remove it from the schedule. To\n      // guard against subtle reentrancy bugs, this microtask is the only place\n      // we do this — you can add roots to the schedule whenever, but you can\n      // only remove them here.\n      // Null this out so we know it's been removed from the schedule.\n      root.next = null;\n\n      if (prev === null) {\n        // This is the new head of the list\n        firstScheduledRoot = next;\n      } else {\n        prev.next = next;\n      }\n\n      if (next === null) {\n        // This is the new tail of the list\n        lastScheduledRoot = prev;\n      }\n    } else {\n      // This root still has work. Keep it in the list.\n      prev = root;\n\n      if (includesSyncLane(nextLanes)) {\n        mightHavePendingSyncWork = true;\n      }\n    }\n\n    root = next;\n  }\n\n  currentEventTransitionLane = NoLane; // At the end of the microtask, flush any pending synchronous work. This has\n  // to come at the end, because it does actual rendering work that might throw.\n\n  flushSyncWorkOnAllRoots();\n}\n\nfunction scheduleTaskForRootDuringMicrotask(root, currentTime) {\n  // This function is always called inside a microtask, or at the very end of a\n  // rendering task right before we yield to the main thread. It should never be\n  // called synchronously.\n  //\n  // TODO: Unless enableDeferRootSchedulingToMicrotask is off. We need to land\n  // that ASAP to unblock additional features we have planned.\n  //\n  // This function also never performs React work synchronously; it should\n  // only schedule work to be performed later, in a separate task or microtask.\n  // Check if any lanes are being starved by other work. If so, mark them as\n  // expired so we know to work on those next.\n  markStarvedLanesAsExpired(root, currentTime); // Determine the next lanes to work on, and their priority.\n\n  const workInProgressRoot = getWorkInProgressRoot();\n  const workInProgressRootRenderLanes = getWorkInProgressRootRenderLanes();\n  const nextLanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);\n  const existingCallbackNode = root.callbackNode;\n\n  if ( // Check if there's nothing to work on\n  nextLanes === NoLanes || // If this root is currently suspended and waiting for data to resolve, don't\n  // schedule a task to render it. We'll either wait for a ping, or wait to\n  // receive an update.\n  //\n  // Suspended render phase\n  root === workInProgressRoot && isWorkLoopSuspendedOnData() || // Suspended commit phase\n  root.cancelPendingCommit !== null) {\n    // Fast path: There's nothing to work on.\n    if (existingCallbackNode !== null) {\n      cancelCallback(existingCallbackNode);\n    }\n\n    root.callbackNode = null;\n    root.callbackPriority = NoLane;\n    return NoLane;\n  } // Schedule a new callback in the host environment.\n\n\n  if (includesSyncLane(nextLanes)) {\n    // Synchronous work is always flushed at the end of the microtask, so we\n    // don't need to schedule an additional task.\n    if (existingCallbackNode !== null) {\n      cancelCallback(existingCallbackNode);\n    }\n\n    root.callbackPriority = SyncLane;\n    root.callbackNode = null;\n    return SyncLane;\n  } else {\n    // We use the highest priority lane to represent the priority of the callback.\n    const existingCallbackPriority = root.callbackPriority;\n    const newCallbackPriority = getHighestPriorityLane(nextLanes);\n\n    if (newCallbackPriority === existingCallbackPriority && // Special case related to `act`. If the currently scheduled task is a\n    // Scheduler task, rather than an `act` task, cancel it and re-schedule\n    // on the `act` queue.\n    !(false  )) {\n      // The priority hasn't changed. We can reuse the existing task.\n      return newCallbackPriority;\n    } else {\n      // Cancel the existing callback. We'll schedule a new one below.\n      cancelCallback(existingCallbackNode);\n    }\n\n    let schedulerPriorityLevel;\n\n    switch (lanesToEventPriority(nextLanes)) {\n      case DiscreteEventPriority:\n        schedulerPriorityLevel = ImmediatePriority;\n        break;\n\n      case ContinuousEventPriority:\n        schedulerPriorityLevel = UserBlockingPriority;\n        break;\n\n      case DefaultEventPriority:\n        schedulerPriorityLevel = NormalPriority$1;\n        break;\n\n      case IdleEventPriority:\n        schedulerPriorityLevel = IdlePriority;\n        break;\n\n      default:\n        schedulerPriorityLevel = NormalPriority$1;\n        break;\n    }\n\n    const newCallbackNode = scheduleCallback$2(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root));\n    root.callbackPriority = newCallbackPriority;\n    root.callbackNode = newCallbackNode;\n    return newCallbackPriority;\n  }\n}\n\nfunction getContinuationForRoot(root, originalCallbackNode) {\n  // This is called at the end of `performConcurrentWorkOnRoot` to determine\n  // if we need to schedule a continuation task.\n  //\n  // Usually `scheduleTaskForRootDuringMicrotask` only runs inside a microtask;\n  // however, since most of the logic for determining if we need a continuation\n  // versus a new task is the same, we cheat a bit and call it here. This is\n  // only safe to do because we know we're at the end of the browser task.\n  // So although it's not an actual microtask, it might as well be.\n  scheduleTaskForRootDuringMicrotask(root, now());\n\n  if (root.callbackNode === originalCallbackNode) {\n    // The task node scheduled for this root is the same one that's\n    // currently executed. Need to return a continuation.\n    return performConcurrentWorkOnRoot.bind(null, root);\n  }\n\n  return null;\n}\n\nfunction scheduleCallback$2(priorityLevel, callback) {\n  {\n    return scheduleCallback$3(priorityLevel, callback);\n  }\n}\n\nfunction cancelCallback(callbackNode) {\n  if (callbackNode !== null) {\n    cancelCallback$1(callbackNode);\n  }\n}\n\nfunction scheduleImmediateTask(cb) {\n  // Alternatively, can we move this check to the host config?\n\n\n  {\n    scheduleMicrotask(() => {\n      // In Safari, appending an iframe forces microtasks to run.\n      // https://github.com/facebook/react/issues/22459\n      // We don't support running callbacks in the middle of render\n      // or commit so we need to check against that.\n      const executionContext = getExecutionContext();\n\n      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n        // Note that this would still prematurely flush the callbacks\n        // if this happens outside render or commit phase (e.g. in an event).\n        // Intentionally using a macrotask instead of a microtask here. This is\n        // wrong semantically but it prevents an infinite loop. The bug is\n        // Safari's, not ours, so we just do our best to not crash even though\n        // the behavior isn't completely correct.\n        scheduleCallback$3(ImmediatePriority, cb);\n        return;\n      }\n\n      cb();\n    });\n  }\n}\n\nfunction requestTransitionLane( // This argument isn't used, it's only here to encourage the caller to\n// check that it's inside a transition before calling this function.\n// TODO: Make this non-nullable. Requires a tweak to useOptimistic.\ntransition) {\n  // The algorithm for assigning an update to a lane should be stable for all\n  // updates at the same priority within the same event. To do this, the\n  // inputs to the algorithm must be the same.\n  //\n  // The trick we use is to cache the first of each of these inputs within an\n  // event. Then reset the cached values once we can be sure the event is\n  // over. Our heuristic for that is whenever we enter a concurrent work loop.\n  if (currentEventTransitionLane === NoLane) {\n    // All transitions within the same event are assigned the same lane.\n    currentEventTransitionLane = claimNextTransitionLane();\n  }\n\n  return currentEventTransitionLane;\n}\n\n// transition updates that occur while the async action is still in progress\n// are treated as part of the action.\n//\n// The ideal behavior would be to treat each async function as an independent\n// action. However, without a mechanism like AsyncContext, we can't tell which\n// action an update corresponds to. So instead, we entangle them all into one.\n// The listeners to notify once the entangled scope completes.\n\nlet currentEntangledListeners = null; // The number of pending async actions in the entangled scope.\n\nlet currentEntangledPendingCount = 0; // The transition lane shared by all updates in the entangled scope.\n\nlet currentEntangledLane = NoLane; // A thenable that resolves when the entangled scope completes. It does not\n// resolve to a particular value because it's only used for suspending the UI\n// until the async action scope has completed.\n\nlet currentEntangledActionThenable = null;\nfunction entangleAsyncAction(transition, thenable) {\n  // `thenable` is the return value of the async action scope function. Create\n  // a combined thenable that resolves once every entangled scope function\n  // has finished.\n  if (currentEntangledListeners === null) {\n    // There's no outer async action scope. Create a new one.\n    const entangledListeners = currentEntangledListeners = [];\n    currentEntangledPendingCount = 0;\n    currentEntangledLane = requestTransitionLane();\n    const entangledThenable = {\n      status: 'pending',\n      value: undefined,\n\n      then(resolve) {\n        entangledListeners.push(resolve);\n      }\n\n    };\n    currentEntangledActionThenable = entangledThenable;\n  }\n\n  currentEntangledPendingCount++;\n  thenable.then(pingEngtangledActionScope, pingEngtangledActionScope);\n  return thenable;\n}\n\nfunction pingEngtangledActionScope() {\n  if (currentEntangledListeners !== null && --currentEntangledPendingCount === 0) {\n    // All the actions have finished. Close the entangled async action scope\n    // and notify all the listeners.\n    if (currentEntangledActionThenable !== null) {\n      const fulfilledThenable = currentEntangledActionThenable;\n      fulfilledThenable.status = 'fulfilled';\n    }\n\n    const listeners = currentEntangledListeners;\n    currentEntangledListeners = null;\n    currentEntangledLane = NoLane;\n    currentEntangledActionThenable = null;\n\n    for (let i = 0; i < listeners.length; i++) {\n      const listener = listeners[i];\n      listener();\n    }\n  }\n}\n\nfunction chainThenableValue(thenable, result) {\n  // Equivalent to: Promise.resolve(thenable).then(() => result), except we can\n  // cheat a bit since we know that that this thenable is only ever consumed\n  // by React.\n  //\n  // We don't technically require promise support on the client yet, hence this\n  // extra code.\n  const listeners = [];\n  const thenableWithOverride = {\n    status: 'pending',\n    value: null,\n    reason: null,\n\n    then(resolve) {\n      listeners.push(resolve);\n    }\n\n  };\n  thenable.then(value => {\n    const fulfilledThenable = thenableWithOverride;\n    fulfilledThenable.status = 'fulfilled';\n    fulfilledThenable.value = result;\n\n    for (let i = 0; i < listeners.length; i++) {\n      const listener = listeners[i];\n      listener(result);\n    }\n  }, error => {\n    const rejectedThenable = thenableWithOverride;\n    rejectedThenable.status = 'rejected';\n    rejectedThenable.reason = error;\n\n    for (let i = 0; i < listeners.length; i++) {\n      const listener = listeners[i]; // This is a perf hack where we call the `onFulfill` ping function\n      // instead of `onReject`, because we know that React is the only\n      // consumer of these promises, and it passes the same listener to both.\n      // We also know that it will read the error directly off the\n      // `.reason` field.\n\n      listener(undefined);\n    }\n  });\n  return thenableWithOverride;\n}\nfunction peekEntangledActionLane() {\n  return currentEntangledLane;\n}\nfunction peekEntangledActionThenable() {\n  return currentEntangledActionThenable;\n}\n\nconst UpdateState = 0;\nconst ReplaceState = 1;\nconst ForceUpdate = 2;\nconst CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.\n// It should only be read right after calling `processUpdateQueue`, via\n// `checkHasForceUpdateAfterProcessing`.\n\nlet hasForceUpdate = false;\n\nfunction initializeUpdateQueue(fiber) {\n  const queue = {\n    baseState: fiber.memoizedState,\n    firstBaseUpdate: null,\n    lastBaseUpdate: null,\n    shared: {\n      pending: null,\n      lanes: NoLanes,\n      hiddenCallbacks: null\n    },\n    callbacks: null\n  };\n  fiber.updateQueue = queue;\n}\nfunction cloneUpdateQueue(current, workInProgress) {\n  // Clone the update queue from current. Unless it's already a clone.\n  const queue = workInProgress.updateQueue;\n  const currentQueue = current.updateQueue;\n\n  if (queue === currentQueue) {\n    const clone = {\n      baseState: currentQueue.baseState,\n      firstBaseUpdate: currentQueue.firstBaseUpdate,\n      lastBaseUpdate: currentQueue.lastBaseUpdate,\n      shared: currentQueue.shared,\n      callbacks: null\n    };\n    workInProgress.updateQueue = clone;\n  }\n}\nfunction createUpdate(lane) {\n  const update = {\n    lane,\n    tag: UpdateState,\n    payload: null,\n    callback: null,\n    next: null\n  };\n  return update;\n}\nfunction enqueueUpdate(fiber, update, lane) {\n  const updateQueue = fiber.updateQueue;\n\n  if (updateQueue === null) {\n    // Only occurs if the fiber has been unmounted.\n    return null;\n  }\n\n  const sharedQueue = updateQueue.shared;\n\n  if (isUnsafeClassRenderPhaseUpdate()) {\n    // This is an unsafe render phase update. Add directly to the update\n    // queue so we can process it immediately during the current render.\n    const pending = sharedQueue.pending;\n\n    if (pending === null) {\n      // This is the first update. Create a circular list.\n      update.next = update;\n    } else {\n      update.next = pending.next;\n      pending.next = update;\n    }\n\n    sharedQueue.pending = update; // Update the childLanes even though we're most likely already rendering\n    // this fiber. This is for backwards compatibility in the case where you\n    // update a different component during render phase than the one that is\n    // currently renderings (a pattern that is accompanied by a warning).\n\n    return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);\n  } else {\n    return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);\n  }\n}\nfunction entangleTransitions(root, fiber, lane) {\n  const updateQueue = fiber.updateQueue;\n\n  if (updateQueue === null) {\n    // Only occurs if the fiber has been unmounted.\n    return;\n  }\n\n  const sharedQueue = updateQueue.shared;\n\n  if (isTransitionLane(lane)) {\n    let queueLanes = sharedQueue.lanes; // If any entangled lanes are no longer pending on the root, then they must\n    // have finished. We can remove them from the shared queue, which represents\n    // a superset of the actually pending lanes. In some cases we may entangle\n    // more than we need to, but that's OK. In fact it's worse if we *don't*\n    // entangle when we should.\n\n    queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.\n\n    const newQueueLanes = mergeLanes(queueLanes, lane);\n    sharedQueue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if\n    // the lane finished since the last time we entangled it. So we need to\n    // entangle it again, just to be sure.\n\n    markRootEntangled(root, newQueueLanes);\n  }\n}\nfunction enqueueCapturedUpdate(workInProgress, capturedUpdate) {\n  // Captured updates are updates that are thrown by a child during the render\n  // phase. They should be discarded if the render is aborted. Therefore,\n  // we should only put them on the work-in-progress queue, not the current one.\n  let queue = workInProgress.updateQueue; // Check if the work-in-progress queue is a clone.\n\n  const current = workInProgress.alternate;\n\n  if (current !== null) {\n    const currentQueue = current.updateQueue;\n\n    if (queue === currentQueue) {\n      // The work-in-progress queue is the same as current. This happens when\n      // we bail out on a parent fiber that then captures an error thrown by\n      // a child. Since we want to append the update only to the work-in\n      // -progress queue, we need to clone the updates. We usually clone during\n      // processUpdateQueue, but that didn't happen in this case because we\n      // skipped over the parent when we bailed out.\n      let newFirst = null;\n      let newLast = null;\n      const firstBaseUpdate = queue.firstBaseUpdate;\n\n      if (firstBaseUpdate !== null) {\n        // Loop through the updates and clone them.\n        let update = firstBaseUpdate;\n\n        do {\n          const clone = {\n            lane: update.lane,\n            tag: update.tag,\n            payload: update.payload,\n            // When this update is rebased, we should not fire its\n            // callback again.\n            callback: null,\n            next: null\n          };\n\n          if (newLast === null) {\n            newFirst = newLast = clone;\n          } else {\n            newLast.next = clone;\n            newLast = clone;\n          } // $FlowFixMe[incompatible-type] we bail out when we get a null\n\n\n          update = update.next;\n        } while (update !== null); // Append the captured update the end of the cloned list.\n\n\n        if (newLast === null) {\n          newFirst = newLast = capturedUpdate;\n        } else {\n          newLast.next = capturedUpdate;\n          newLast = capturedUpdate;\n        }\n      } else {\n        // There are no base updates.\n        newFirst = newLast = capturedUpdate;\n      }\n\n      queue = {\n        baseState: currentQueue.baseState,\n        firstBaseUpdate: newFirst,\n        lastBaseUpdate: newLast,\n        shared: currentQueue.shared,\n        callbacks: currentQueue.callbacks\n      };\n      workInProgress.updateQueue = queue;\n      return;\n    }\n  } // Append the update to the end of the list.\n\n\n  const lastBaseUpdate = queue.lastBaseUpdate;\n\n  if (lastBaseUpdate === null) {\n    queue.firstBaseUpdate = capturedUpdate;\n  } else {\n    lastBaseUpdate.next = capturedUpdate;\n  }\n\n  queue.lastBaseUpdate = capturedUpdate;\n}\n\nfunction getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {\n  switch (update.tag) {\n    case ReplaceState:\n      {\n        const payload = update.payload;\n\n        if (typeof payload === 'function') {\n\n          const nextState = payload.call(instance, prevState, nextProps);\n\n          return nextState;\n        } // State object\n\n\n        return payload;\n      }\n\n    case CaptureUpdate:\n      {\n        workInProgress.flags = workInProgress.flags & ~ShouldCapture | DidCapture;\n      }\n    // Intentional fallthrough\n\n    case UpdateState:\n      {\n        const payload = update.payload;\n        let partialState;\n\n        if (typeof payload === 'function') {\n\n          partialState = payload.call(instance, prevState, nextProps);\n        } else {\n          // Partial state object\n          partialState = payload;\n        }\n\n        if (partialState === null || partialState === undefined) {\n          // Null and undefined are treated as no-ops.\n          return prevState;\n        } // Merge the partial state and the previous state.\n\n\n        return assign({}, prevState, partialState);\n      }\n\n    case ForceUpdate:\n      {\n        hasForceUpdate = true;\n        return prevState;\n      }\n  }\n\n  return prevState;\n}\n\nlet didReadFromEntangledAsyncAction = false; // Each call to processUpdateQueue should be accompanied by a call to this. It's\n// only in a separate function because in updateHostRoot, it must happen after\n// all the context stacks have been pushed to, to prevent a stack mismatch. A\n// bit unfortunate.\n\nfunction suspendIfUpdateReadFromEntangledAsyncAction() {\n  // Check if this update is part of a pending async action. If so, we'll\n  // need to suspend until the action has finished, so that it's batched\n  // together with future updates in the same action.\n  // TODO: Once we support hooks inside useMemo (or an equivalent\n  // memoization boundary like Forget), hoist this logic so that it only\n  // suspends if the memo boundary produces a new value.\n  if (didReadFromEntangledAsyncAction) {\n    const entangledActionThenable = peekEntangledActionThenable();\n\n    if (entangledActionThenable !== null) {\n      // TODO: Instead of the throwing the thenable directly, throw a\n      // special object like `use` does so we can detect if it's captured\n      // by userspace.\n      throw entangledActionThenable;\n    }\n  }\n}\nfunction processUpdateQueue(workInProgress, props, instance, renderLanes) {\n  didReadFromEntangledAsyncAction = false; // This is always non-null on a ClassComponent or HostRoot\n\n  const queue = workInProgress.updateQueue;\n  hasForceUpdate = false;\n\n  let firstBaseUpdate = queue.firstBaseUpdate;\n  let lastBaseUpdate = queue.lastBaseUpdate; // Check if there are pending updates. If so, transfer them to the base queue.\n\n  let pendingQueue = queue.shared.pending;\n\n  if (pendingQueue !== null) {\n    queue.shared.pending = null; // The pending queue is circular. Disconnect the pointer between first\n    // and last so that it's non-circular.\n\n    const lastPendingUpdate = pendingQueue;\n    const firstPendingUpdate = lastPendingUpdate.next;\n    lastPendingUpdate.next = null; // Append pending updates to base queue\n\n    if (lastBaseUpdate === null) {\n      firstBaseUpdate = firstPendingUpdate;\n    } else {\n      lastBaseUpdate.next = firstPendingUpdate;\n    }\n\n    lastBaseUpdate = lastPendingUpdate; // If there's a current queue, and it's different from the base queue, then\n    // we need to transfer the updates to that queue, too. Because the base\n    // queue is a singly-linked list with no cycles, we can append to both\n    // lists and take advantage of structural sharing.\n    // TODO: Pass `current` as argument\n\n    const current = workInProgress.alternate;\n\n    if (current !== null) {\n      // This is always non-null on a ClassComponent or HostRoot\n      const currentQueue = current.updateQueue;\n      const currentLastBaseUpdate = currentQueue.lastBaseUpdate;\n\n      if (currentLastBaseUpdate !== lastBaseUpdate) {\n        if (currentLastBaseUpdate === null) {\n          currentQueue.firstBaseUpdate = firstPendingUpdate;\n        } else {\n          currentLastBaseUpdate.next = firstPendingUpdate;\n        }\n\n        currentQueue.lastBaseUpdate = lastPendingUpdate;\n      }\n    }\n  } // These values may change as we process the queue.\n\n\n  if (firstBaseUpdate !== null) {\n    // Iterate through the list of updates to compute the result.\n    let newState = queue.baseState; // TODO: Don't need to accumulate this. Instead, we can remove renderLanes\n    // from the original lanes.\n\n    let newLanes = NoLanes;\n    let newBaseState = null;\n    let newFirstBaseUpdate = null;\n    let newLastBaseUpdate = null;\n    let update = firstBaseUpdate;\n\n    do {\n      // An extra OffscreenLane bit is added to updates that were made to\n      // a hidden tree, so that we can distinguish them from updates that were\n      // already there when the tree was hidden.\n      const updateLane = removeLanes(update.lane, OffscreenLane);\n      const isHiddenUpdate = updateLane !== update.lane; // Check if this update was made while the tree was hidden. If so, then\n      // it's not a \"base\" update and we should disregard the extra base lanes\n      // that were added to renderLanes when we entered the Offscreen tree.\n\n      const shouldSkipUpdate = isHiddenUpdate ? !isSubsetOfLanes(getWorkInProgressRootRenderLanes(), updateLane) : !isSubsetOfLanes(renderLanes, updateLane);\n\n      if (shouldSkipUpdate) {\n        // Priority is insufficient. Skip this update. If this is the first\n        // skipped update, the previous update/state is the new base\n        // update/state.\n        const clone = {\n          lane: updateLane,\n          tag: update.tag,\n          payload: update.payload,\n          callback: update.callback,\n          next: null\n        };\n\n        if (newLastBaseUpdate === null) {\n          newFirstBaseUpdate = newLastBaseUpdate = clone;\n          newBaseState = newState;\n        } else {\n          newLastBaseUpdate = newLastBaseUpdate.next = clone;\n        } // Update the remaining priority in the queue.\n\n\n        newLanes = mergeLanes(newLanes, updateLane);\n      } else {\n        // This update does have sufficient priority.\n        // Check if this update is part of a pending async action. If so,\n        // we'll need to suspend until the action has finished, so that it's\n        // batched together with future updates in the same action.\n        if (updateLane !== NoLane && updateLane === peekEntangledActionLane()) {\n          didReadFromEntangledAsyncAction = true;\n        }\n\n        if (newLastBaseUpdate !== null) {\n          const clone = {\n            // This update is going to be committed so we never want uncommit\n            // it. Using NoLane works because 0 is a subset of all bitmasks, so\n            // this will never be skipped by the check above.\n            lane: NoLane,\n            tag: update.tag,\n            payload: update.payload,\n            // When this update is rebased, we should not fire its\n            // callback again.\n            callback: null,\n            next: null\n          };\n          newLastBaseUpdate = newLastBaseUpdate.next = clone;\n        } // Process this update.\n\n\n        newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);\n        const callback = update.callback;\n\n        if (callback !== null) {\n          workInProgress.flags |= Callback;\n\n          if (isHiddenUpdate) {\n            workInProgress.flags |= Visibility;\n          }\n\n          const callbacks = queue.callbacks;\n\n          if (callbacks === null) {\n            queue.callbacks = [callback];\n          } else {\n            callbacks.push(callback);\n          }\n        }\n      } // $FlowFixMe[incompatible-type] we bail out when we get a null\n\n\n      update = update.next;\n\n      if (update === null) {\n        pendingQueue = queue.shared.pending;\n\n        if (pendingQueue === null) {\n          break;\n        } else {\n          // An update was scheduled from inside a reducer. Add the new\n          // pending updates to the end of the list and keep processing.\n          const lastPendingUpdate = pendingQueue; // Intentionally unsound. Pending updates form a circular list, but we\n          // unravel them when transferring them to the base queue.\n\n          const firstPendingUpdate = lastPendingUpdate.next;\n          lastPendingUpdate.next = null;\n          update = firstPendingUpdate;\n          queue.lastBaseUpdate = lastPendingUpdate;\n          queue.shared.pending = null;\n        }\n      }\n    } while (true);\n\n    if (newLastBaseUpdate === null) {\n      newBaseState = newState;\n    }\n\n    queue.baseState = newBaseState;\n    queue.firstBaseUpdate = newFirstBaseUpdate;\n    queue.lastBaseUpdate = newLastBaseUpdate;\n\n    if (firstBaseUpdate === null) {\n      // `queue.lanes` is used for entangling transitions. We can set it back to\n      // zero once the queue is empty.\n      queue.shared.lanes = NoLanes;\n    } // Set the remaining expiration time to be whatever is remaining in the queue.\n    // This should be fine because the only two other things that contribute to\n    // expiration time are props and context. We're already in the middle of the\n    // begin phase by the time we start processing the queue, so we've already\n    // dealt with the props. Context in components that specify\n    // shouldComponentUpdate is tricky; but we'll have to account for\n    // that regardless.\n\n\n    markSkippedUpdateLanes(newLanes);\n    workInProgress.lanes = newLanes;\n    workInProgress.memoizedState = newState;\n  }\n}\n\nfunction callCallback(callback, context) {\n  if (typeof callback !== 'function') {\n    throw Error(formatProdErrorMessage(191, callback));\n  }\n\n  callback.call(context);\n}\n\nfunction resetHasForceUpdateBeforeProcessing() {\n  hasForceUpdate = false;\n}\nfunction checkHasForceUpdateAfterProcessing() {\n  return hasForceUpdate;\n}\nfunction deferHiddenCallbacks(updateQueue) {\n  // When an update finishes on a hidden component, its callback should not\n  // be fired until/unless the component is made visible again. Stash the\n  // callback on the shared queue object so it can be fired later.\n  const newHiddenCallbacks = updateQueue.callbacks;\n\n  if (newHiddenCallbacks !== null) {\n    const existingHiddenCallbacks = updateQueue.shared.hiddenCallbacks;\n\n    if (existingHiddenCallbacks === null) {\n      updateQueue.shared.hiddenCallbacks = newHiddenCallbacks;\n    } else {\n      updateQueue.shared.hiddenCallbacks = existingHiddenCallbacks.concat(newHiddenCallbacks);\n    }\n  }\n}\nfunction commitHiddenCallbacks(updateQueue, context) {\n  // This component is switching from hidden -> visible. Commit any callbacks\n  // that were previously deferred.\n  const hiddenCallbacks = updateQueue.shared.hiddenCallbacks;\n\n  if (hiddenCallbacks !== null) {\n    updateQueue.shared.hiddenCallbacks = null;\n\n    for (let i = 0; i < hiddenCallbacks.length; i++) {\n      const callback = hiddenCallbacks[i];\n      callCallback(callback, context);\n    }\n  }\n}\nfunction commitCallbacks(updateQueue, context) {\n  const callbacks = updateQueue.callbacks;\n\n  if (callbacks !== null) {\n    updateQueue.callbacks = null;\n\n    for (let i = 0; i < callbacks.length; i++) {\n      const callback = callbacks[i];\n      callCallback(callback, context);\n    }\n  }\n}\n\n/**\n * Performs equality by iterating through keys on an object and returning false\n * when any key has values which are not strictly equal between the arguments.\n * Returns true when the values of all keys are strictly equal.\n */\n\nfunction shallowEqual(objA, objB) {\n  if (objectIs(objA, objB)) {\n    return true;\n  }\n\n  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {\n    return false;\n  }\n\n  const keysA = Object.keys(objA);\n  const keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  } // Test for A's keys different from B.\n\n\n  for (let i = 0; i < keysA.length; i++) {\n    const currentKey = keysA[i];\n\n    if (!hasOwnProperty.call(objB, currentKey) || // $FlowFixMe[incompatible-use] lost refinement of `objB`\n    !objectIs(objA[currentKey], objB[currentKey])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction getThenablesFromState(state) {\n  {\n    const prodState = state;\n    return prodState;\n  }\n} // An error that is thrown (e.g. by `use`) to trigger Suspense. If we\n// detect this is caught by userspace, we'll log a warning in development.\n\n\nconst SuspenseException = Error(formatProdErrorMessage(460));\nconst SuspenseyCommitException = Error(formatProdErrorMessage(474)); // This is a noop thenable that we use to trigger a fallback in throwException.\n// TODO: It would be better to refactor throwException into multiple functions\n// so we can trigger a fallback directly without having to check the type. But\n// for now this will do.\n\nconst noopSuspenseyCommitThenable = {\n  then() {\n  }\n\n};\nfunction createThenableState() {\n  // The ThenableState is created the first time a component suspends. If it\n  // suspends again, we'll reuse the same state.\n  {\n    return [];\n  }\n}\nfunction isThenableResolved(thenable) {\n  const status = thenable.status;\n  return status === 'fulfilled' || status === 'rejected';\n}\n\nfunction noop$2() {}\n\nfunction trackUsedThenable(thenableState, thenable, index) {\n\n  const trackedThenables = getThenablesFromState(thenableState);\n  const previous = trackedThenables[index];\n\n  if (previous === undefined) {\n    trackedThenables.push(thenable);\n  } else {\n    if (previous !== thenable) {\n      // intentionally ignore.\n\n\n      thenable.then(noop$2, noop$2);\n      thenable = previous;\n    }\n  } // We use an expando to track the status and result of a thenable so that we\n  // can synchronously unwrap the value. Think of this as an extension of the\n  // Promise API, or a custom interface that is a superset of Thenable.\n  //\n  // If the thenable doesn't have a status, set it to \"pending\" and attach\n  // a listener that will update its status and result when it resolves.\n\n\n  switch (thenable.status) {\n    case 'fulfilled':\n      {\n        const fulfilledValue = thenable.value;\n        return fulfilledValue;\n      }\n\n    case 'rejected':\n      {\n        const rejectedError = thenable.reason;\n        checkIfUseWrappedInAsyncCatch(rejectedError);\n        throw rejectedError;\n      }\n\n    default:\n      {\n        if (typeof thenable.status === 'string') {\n          // Only instrument the thenable if the status if not defined. If\n          // it's defined, but an unknown value, assume it's been instrumented by\n          // some custom userspace implementation. We treat it as \"pending\".\n          // Attach a dummy listener, to ensure that any lazy initialization can\n          // happen. Flight lazily parses JSON when the value is actually awaited.\n          thenable.then(noop$2, noop$2);\n        } else {\n          // This is an uncached thenable that we haven't seen before.\n          // Detect infinite ping loops caused by uncached promises.\n          const root = getWorkInProgressRoot();\n\n          if (root !== null && root.shellSuspendCounter > 100) {\n            // This root has suspended repeatedly in the shell without making any\n            // progress (i.e. committing something). This is highly suggestive of\n            // an infinite ping loop, often caused by an accidental Async Client\n            // Component.\n            //\n            // During a transition, we can suspend the work loop until the promise\n            // to resolve, but this is a sync render, so that's not an option. We\n            // also can't show a fallback, because none was provided. So our last\n            // resort is to throw an error.\n            //\n            // TODO: Remove this error in a future release. Other ways of handling\n            // this case include forcing a concurrent render, or putting the whole\n            // root into offscreen mode.\n            throw Error(formatProdErrorMessage(482));\n          }\n\n          const pendingThenable = thenable;\n          pendingThenable.status = 'pending';\n          pendingThenable.then(fulfilledValue => {\n            if (thenable.status === 'pending') {\n              const fulfilledThenable = thenable;\n              fulfilledThenable.status = 'fulfilled';\n              fulfilledThenable.value = fulfilledValue;\n            }\n          }, error => {\n            if (thenable.status === 'pending') {\n              const rejectedThenable = thenable;\n              rejectedThenable.status = 'rejected';\n              rejectedThenable.reason = error;\n            }\n          });\n        } // Check one more time in case the thenable resolved synchronously.\n\n\n        switch (thenable.status) {\n          case 'fulfilled':\n            {\n              const fulfilledThenable = thenable;\n              return fulfilledThenable.value;\n            }\n\n          case 'rejected':\n            {\n              const rejectedThenable = thenable;\n              const rejectedError = rejectedThenable.reason;\n              checkIfUseWrappedInAsyncCatch(rejectedError);\n              throw rejectedError;\n            }\n        } // Suspend.\n        //\n        // Throwing here is an implementation detail that allows us to unwind the\n        // call stack. But we shouldn't allow it to leak into userspace. Throw an\n        // opaque placeholder value instead of the actual thenable. If it doesn't\n        // get captured by the work loop, log a warning, because that means\n        // something in userspace must have caught it.\n\n\n        suspendedThenable = thenable;\n\n        throw SuspenseException;\n      }\n  }\n}\nfunction suspendCommit() {\n  // This extra indirection only exists so it can handle passing\n  // noopSuspenseyCommitThenable through to throwException.\n  // TODO: Factor the thenable check out of throwException\n  suspendedThenable = noopSuspenseyCommitThenable;\n  throw SuspenseyCommitException;\n} // This is used to track the actual thenable that suspended so it can be\n// passed to the rest of the Suspense implementation — which, for historical\n// reasons, expects to receive a thenable.\n\nlet suspendedThenable = null;\nfunction getSuspendedThenable() {\n  // This is called right after `use` suspends by throwing an exception. `use`\n  // throws an opaque value instead of the thenable itself so that it can't be\n  // caught in userspace. Then the work loop accesses the actual thenable using\n  // this function.\n  if (suspendedThenable === null) {\n    throw Error(formatProdErrorMessage(459));\n  }\n\n  const thenable = suspendedThenable;\n  suspendedThenable = null;\n\n  return thenable;\n}\nfunction checkIfUseWrappedInAsyncCatch(rejectedReason) {\n  // This check runs in prod, too, because it prevents a more confusing\n  // downstream error, where SuspenseException is caught by a promise and\n  // thrown asynchronously.\n  // TODO: Another way to prevent SuspenseException from leaking into an async\n  // execution context is to check the dispatcher every time `use` is called,\n  // or some equivalent. That might be preferable for other reasons, too, since\n  // it matches how we prevent similar mistakes for other hooks.\n  if (rejectedReason === SuspenseException) {\n    throw Error(formatProdErrorMessage(483));\n  }\n}\n\nlet thenableState$1 = null;\nlet thenableIndexCounter$1 = 0;\n\nfunction unwrapThenable(thenable) {\n  const index = thenableIndexCounter$1;\n  thenableIndexCounter$1 += 1;\n\n  if (thenableState$1 === null) {\n    thenableState$1 = createThenableState();\n  }\n\n  return trackUsedThenable(thenableState$1, thenable, index);\n}\n\nfunction convertStringRefToCallbackRef(returnFiber, current, element, mixedRef) {\n\n  const stringRef = '' + mixedRef;\n  const owner = element._owner;\n\n  if (!owner) {\n    throw Error(formatProdErrorMessage(290, stringRef));\n  }\n\n  if (owner.tag !== ClassComponent) {\n    throw Error(formatProdErrorMessage(309));\n  }\n\n  const inst = owner.stateNode;\n\n  if (!inst) {\n    throw Error(formatProdErrorMessage(147, stringRef));\n  } // Check if previous string ref matches new string ref\n\n\n  if (current !== null && current.ref !== null && typeof current.ref === 'function' && current.ref._stringRef === stringRef) {\n    // Reuse the existing string ref\n    const currentRef = current.ref;\n    return currentRef;\n  } // Create a new string ref\n\n\n  const ref = function (value) {\n    const refs = inst.refs;\n\n    if (value === null) {\n      delete refs[stringRef];\n    } else {\n      refs[stringRef] = value;\n    }\n  };\n\n  ref._stringRef = stringRef;\n  return ref;\n}\n\nfunction coerceRef(returnFiber, current, workInProgress, element) {\n  let mixedRef;\n\n  {\n    // Old behavior.\n    mixedRef = element.ref;\n  }\n\n  let coercedRef;\n\n  if ((typeof mixedRef === 'string' || typeof mixedRef === 'number' || typeof mixedRef === 'boolean')) {\n    coercedRef = convertStringRefToCallbackRef(returnFiber, current, element, mixedRef);\n  } else {\n    coercedRef = mixedRef;\n  } // TODO: If enableRefAsProp is on, we shouldn't use the `ref` field. We\n  // should always read the ref from the prop.\n\n\n  workInProgress.ref = coercedRef;\n}\n\nfunction throwOnInvalidObjectType(returnFiber, newChild) {\n  // $FlowFixMe[method-unbinding]\n  const childString = Object.prototype.toString.call(newChild);\n  throw Error(formatProdErrorMessage(31, childString === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : childString));\n}\n\nfunction resolveLazy(lazyType) {\n  const payload = lazyType._payload;\n  const init = lazyType._init;\n  return init(payload);\n} // This wrapper function exists because I expect to clone the code in each path\n// to be able to optimize each path individually by branching early. This needs\n// a compiler or we can do it manually. Helpers that don't need this branching\n// live outside of this function.\n\n\nfunction createChildReconciler(shouldTrackSideEffects) {\n  function deleteChild(returnFiber, childToDelete) {\n    if (!shouldTrackSideEffects) {\n      // Noop.\n      return;\n    }\n\n    const deletions = returnFiber.deletions;\n\n    if (deletions === null) {\n      returnFiber.deletions = [childToDelete];\n      returnFiber.flags |= ChildDeletion;\n    } else {\n      deletions.push(childToDelete);\n    }\n  }\n\n  function deleteRemainingChildren(returnFiber, currentFirstChild) {\n    if (!shouldTrackSideEffects) {\n      // Noop.\n      return null;\n    } // TODO: For the shouldClone case, this could be micro-optimized a bit by\n    // assuming that after the first child we've already added everything.\n\n\n    let childToDelete = currentFirstChild;\n\n    while (childToDelete !== null) {\n      deleteChild(returnFiber, childToDelete);\n      childToDelete = childToDelete.sibling;\n    }\n\n    return null;\n  }\n\n  function mapRemainingChildren(currentFirstChild) {\n    // Add the remaining children to a temporary map so that we can find them by\n    // keys quickly. Implicit (null) keys get added to this set with their index\n    // instead.\n    const existingChildren = new Map();\n    let existingChild = currentFirstChild;\n\n    while (existingChild !== null) {\n      if (existingChild.key !== null) {\n        existingChildren.set(existingChild.key, existingChild);\n      } else {\n        existingChildren.set(existingChild.index, existingChild);\n      }\n\n      existingChild = existingChild.sibling;\n    }\n\n    return existingChildren;\n  }\n\n  function useFiber(fiber, pendingProps) {\n    // We currently set sibling to null and index to 0 here because it is easy\n    // to forget to do before returning it. E.g. for the single child case.\n    const clone = createWorkInProgress(fiber, pendingProps);\n    clone.index = 0;\n    clone.sibling = null;\n    return clone;\n  }\n\n  function placeChild(newFiber, lastPlacedIndex, newIndex) {\n    newFiber.index = newIndex;\n\n    if (!shouldTrackSideEffects) {\n      // During hydration, the useId algorithm needs to know which fibers are\n      // part of a list of children (arrays, iterators).\n      newFiber.flags |= Forked;\n      return lastPlacedIndex;\n    }\n\n    const current = newFiber.alternate;\n\n    if (current !== null) {\n      const oldIndex = current.index;\n\n      if (oldIndex < lastPlacedIndex) {\n        // This is a move.\n        newFiber.flags |= Placement | PlacementDEV;\n        return lastPlacedIndex;\n      } else {\n        // This item can stay in place.\n        return oldIndex;\n      }\n    } else {\n      // This is an insertion.\n      newFiber.flags |= Placement | PlacementDEV;\n      return lastPlacedIndex;\n    }\n  }\n\n  function placeSingleChild(newFiber) {\n    // This is simpler for the single child case. We only need to do a\n    // placement for inserting new children.\n    if (shouldTrackSideEffects && newFiber.alternate === null) {\n      newFiber.flags |= Placement | PlacementDEV;\n    }\n\n    return newFiber;\n  }\n\n  function updateTextNode(returnFiber, current, textContent, lanes, debugInfo) {\n    if (current === null || current.tag !== HostText) {\n      // Insert\n      const created = createFiberFromText(textContent, returnFiber.mode, lanes);\n      created.return = returnFiber;\n\n      return created;\n    } else {\n      // Update\n      const existing = useFiber(current, textContent);\n      existing.return = returnFiber;\n\n      return existing;\n    }\n  }\n\n  function updateElement(returnFiber, current, element, lanes, debugInfo) {\n    const elementType = element.type;\n\n    if (elementType === REACT_FRAGMENT_TYPE) {\n      return updateFragment(returnFiber, current, element.props.children, lanes, element.key);\n    }\n\n    if (current !== null) {\n      if (current.elementType === elementType || ( // Keep this check inline so it only runs on the false path:\n      false) || // Lazy types should reconcile their resolved type.\n      // We need to do this after the Hot Reloading check above,\n      // because hot reloading has different semantics than prod because\n      // it doesn't resuspend. So we can't let the call below suspend.\n      typeof elementType === 'object' && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current.type) {\n        // Move based on index\n        const existing = useFiber(current, element.props);\n        coerceRef(returnFiber, current, existing, element);\n        existing.return = returnFiber;\n\n        return existing;\n      }\n    } // Insert\n\n\n    const created = createFiberFromElement(element, returnFiber.mode, lanes);\n    coerceRef(returnFiber, current, created, element);\n    created.return = returnFiber;\n\n    return created;\n  }\n\n  function updatePortal(returnFiber, current, portal, lanes, debugInfo) {\n    if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {\n      // Insert\n      const created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n      created.return = returnFiber;\n\n      return created;\n    } else {\n      // Update\n      const existing = useFiber(current, portal.children || []);\n      existing.return = returnFiber;\n\n      return existing;\n    }\n  }\n\n  function updateFragment(returnFiber, current, fragment, lanes, key, debugInfo) {\n    if (current === null || current.tag !== Fragment) {\n      // Insert\n      const created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);\n      created.return = returnFiber;\n\n      return created;\n    } else {\n      // Update\n      const existing = useFiber(current, fragment);\n      existing.return = returnFiber;\n\n      return existing;\n    }\n  }\n\n  function createChild(returnFiber, newChild, lanes, debugInfo) {\n    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number' || enableBigIntSupport ) {\n      // Text nodes don't have keys. If the previous node is implicitly keyed\n      // we can continue to replace it without aborting even if it is not a text\n      // node.\n      const created = createFiberFromText( // $FlowFixMe[unsafe-addition] Flow doesn't want us to use `+` operator with string and bigint\n      '' + newChild, returnFiber.mode, lanes);\n      created.return = returnFiber;\n\n      return created;\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n          {\n            const created = createFiberFromElement(newChild, returnFiber.mode, lanes);\n            coerceRef(returnFiber, null, created, newChild);\n            created.return = returnFiber;\n\n            return created;\n          }\n\n        case REACT_PORTAL_TYPE:\n          {\n            const created = createFiberFromPortal(newChild, returnFiber.mode, lanes);\n            created.return = returnFiber;\n\n            return created;\n          }\n\n        case REACT_LAZY_TYPE:\n          {\n            const payload = newChild._payload;\n            const init = newChild._init;\n            return createChild(returnFiber, init(payload), lanes);\n          }\n      }\n\n      if (isArray(newChild) || getIteratorFn(newChild)) {\n        const created = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);\n        created.return = returnFiber;\n\n        return created;\n      } // Usable node types\n      //\n      // Unwrap the inner value and recursively call this function again.\n\n\n      if (typeof newChild.then === 'function') {\n        const thenable = newChild;\n        return createChild(returnFiber, unwrapThenable(thenable), lanes);\n      }\n\n      if (newChild.$$typeof === REACT_CONTEXT_TYPE) {\n        const context = newChild;\n        return createChild(returnFiber, readContextDuringReconciliation(returnFiber, context, lanes), lanes);\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    return null;\n  }\n\n  function updateSlot(returnFiber, oldFiber, newChild, lanes, debugInfo) {\n    // Update the fiber if the keys match, otherwise return null.\n    const key = oldFiber !== null ? oldFiber.key : null;\n\n    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number' || enableBigIntSupport ) {\n      // Text nodes don't have keys. If the previous node is implicitly keyed\n      // we can continue to replace it without aborting even if it is not a text\n      // node.\n      if (key !== null) {\n        return null;\n      }\n\n      return updateTextNode(returnFiber, oldFiber, // $FlowFixMe[unsafe-addition] Flow doesn't want us to use `+` operator with string and bigint\n      '' + newChild, lanes);\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n          {\n            if (newChild.key === key) {\n              return updateElement(returnFiber, oldFiber, newChild, lanes);\n            } else {\n              return null;\n            }\n          }\n\n        case REACT_PORTAL_TYPE:\n          {\n            if (newChild.key === key) {\n              return updatePortal(returnFiber, oldFiber, newChild, lanes);\n            } else {\n              return null;\n            }\n          }\n\n        case REACT_LAZY_TYPE:\n          {\n            const payload = newChild._payload;\n            const init = newChild._init;\n            return updateSlot(returnFiber, oldFiber, init(payload), lanes);\n          }\n      }\n\n      if (isArray(newChild) || getIteratorFn(newChild)) {\n        if (key !== null) {\n          return null;\n        }\n\n        return updateFragment(returnFiber, oldFiber, newChild, lanes, null);\n      } // Usable node types\n      //\n      // Unwrap the inner value and recursively call this function again.\n\n\n      if (typeof newChild.then === 'function') {\n        const thenable = newChild;\n        return updateSlot(returnFiber, oldFiber, unwrapThenable(thenable), lanes);\n      }\n\n      if (newChild.$$typeof === REACT_CONTEXT_TYPE) {\n        const context = newChild;\n        return updateSlot(returnFiber, oldFiber, readContextDuringReconciliation(returnFiber, context, lanes), lanes);\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    return null;\n  }\n\n  function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes, debugInfo) {\n    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number' || enableBigIntSupport ) {\n      // Text nodes don't have keys, so we neither have to check the old nor\n      // new node for the key. If both are text nodes, they match.\n      const matchedFiber = existingChildren.get(newIdx) || null;\n      return updateTextNode(returnFiber, matchedFiber, // $FlowFixMe[unsafe-addition] Flow doesn't want us to use `+` operator with string and bigint\n      '' + newChild, lanes);\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n          {\n            const matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;\n            return updateElement(returnFiber, matchedFiber, newChild, lanes);\n          }\n\n        case REACT_PORTAL_TYPE:\n          {\n            const matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;\n            return updatePortal(returnFiber, matchedFiber, newChild, lanes);\n          }\n\n        case REACT_LAZY_TYPE:\n          const payload = newChild._payload;\n          const init = newChild._init;\n          return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);\n      }\n\n      if (isArray(newChild) || getIteratorFn(newChild)) {\n        const matchedFiber = existingChildren.get(newIdx) || null;\n        return updateFragment(returnFiber, matchedFiber, newChild, lanes, null);\n      } // Usable node types\n      //\n      // Unwrap the inner value and recursively call this function again.\n\n\n      if (typeof newChild.then === 'function') {\n        const thenable = newChild;\n        return updateFromMap(existingChildren, returnFiber, newIdx, unwrapThenable(thenable), lanes);\n      }\n\n      if (newChild.$$typeof === REACT_CONTEXT_TYPE) {\n        const context = newChild;\n        return updateFromMap(existingChildren, returnFiber, newIdx, readContextDuringReconciliation(returnFiber, context, lanes), lanes);\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    return null;\n  }\n\n  function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes, debugInfo) {\n\n    let resultingFirstChild = null;\n    let previousNewFiber = null;\n    let oldFiber = currentFirstChild;\n    let lastPlacedIndex = 0;\n    let newIdx = 0;\n    let nextOldFiber = null;\n\n    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {\n      if (oldFiber.index > newIdx) {\n        nextOldFiber = oldFiber;\n        oldFiber = null;\n      } else {\n        nextOldFiber = oldFiber.sibling;\n      }\n\n      const newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);\n\n      if (newFiber === null) {\n        // TODO: This breaks on empty slots like null children. That's\n        // unfortunate because it triggers the slow path all the time. We need\n        // a better way to communicate whether this was a miss or null,\n        // boolean, undefined, etc.\n        if (oldFiber === null) {\n          oldFiber = nextOldFiber;\n        }\n\n        break;\n      }\n\n      if (shouldTrackSideEffects) {\n        if (oldFiber && newFiber.alternate === null) {\n          // We matched the slot, but we didn't reuse the existing fiber, so we\n          // need to delete the existing child.\n          deleteChild(returnFiber, oldFiber);\n        }\n      }\n\n      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n\n      if (previousNewFiber === null) {\n        // TODO: Move out of the loop. This only happens for the first run.\n        resultingFirstChild = newFiber;\n      } else {\n        // TODO: Defer siblings if we're not at the right index for this slot.\n        // I.e. if we had null values before, then we want to defer this\n        // for each null value. However, we also don't want to call updateSlot\n        // with the previous one.\n        previousNewFiber.sibling = newFiber;\n      }\n\n      previousNewFiber = newFiber;\n      oldFiber = nextOldFiber;\n    }\n\n    if (newIdx === newChildren.length) {\n      // We've reached the end of the new children. We can delete the rest.\n      deleteRemainingChildren(returnFiber, oldFiber);\n\n      if (getIsHydrating()) {\n        const numberOfForks = newIdx;\n        pushTreeFork(returnFiber, numberOfForks);\n      }\n\n      return resultingFirstChild;\n    }\n\n    if (oldFiber === null) {\n      // If we don't have any more existing children we can choose a fast path\n      // since the rest will all be insertions.\n      for (; newIdx < newChildren.length; newIdx++) {\n        const newFiber = createChild(returnFiber, newChildren[newIdx], lanes);\n\n        if (newFiber === null) {\n          continue;\n        }\n\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n\n        if (previousNewFiber === null) {\n          // TODO: Move out of the loop. This only happens for the first run.\n          resultingFirstChild = newFiber;\n        } else {\n          previousNewFiber.sibling = newFiber;\n        }\n\n        previousNewFiber = newFiber;\n      }\n\n      if (getIsHydrating()) {\n        const numberOfForks = newIdx;\n        pushTreeFork(returnFiber, numberOfForks);\n      }\n\n      return resultingFirstChild;\n    } // Add all children to a key map for quick lookups.\n\n\n    const existingChildren = mapRemainingChildren(oldFiber); // Keep scanning and use the map to restore deleted items as moves.\n\n    for (; newIdx < newChildren.length; newIdx++) {\n      const newFiber = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);\n\n      if (newFiber !== null) {\n        if (shouldTrackSideEffects) {\n          if (newFiber.alternate !== null) {\n            // The new fiber is a work in progress, but if there exists a\n            // current, that means that we reused the fiber. We need to delete\n            // it from the child list so that we don't add it to the deletion\n            // list.\n            existingChildren.delete(newFiber.key === null ? newIdx : newFiber.key);\n          }\n        }\n\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n\n        if (previousNewFiber === null) {\n          resultingFirstChild = newFiber;\n        } else {\n          previousNewFiber.sibling = newFiber;\n        }\n\n        previousNewFiber = newFiber;\n      }\n    }\n\n    if (shouldTrackSideEffects) {\n      // Any existing children that weren't consumed above were deleted. We need\n      // to add them to the deletion list.\n      existingChildren.forEach(child => deleteChild(returnFiber, child));\n    }\n\n    if (getIsHydrating()) {\n      const numberOfForks = newIdx;\n      pushTreeFork(returnFiber, numberOfForks);\n    }\n\n    return resultingFirstChild;\n  }\n\n  function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes, debugInfo) {\n    // This is the same implementation as reconcileChildrenArray(),\n    // but using the iterator instead.\n    const iteratorFn = getIteratorFn(newChildrenIterable);\n\n    if (typeof iteratorFn !== 'function') {\n      throw Error(formatProdErrorMessage(150));\n    }\n\n    const newChildren = iteratorFn.call(newChildrenIterable);\n\n    if (newChildren == null) {\n      throw Error(formatProdErrorMessage(151));\n    }\n\n    let resultingFirstChild = null;\n    let previousNewFiber = null;\n    let oldFiber = currentFirstChild;\n    let lastPlacedIndex = 0;\n    let newIdx = 0;\n    let nextOldFiber = null;\n    let step = newChildren.next();\n\n    for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {\n      if (oldFiber.index > newIdx) {\n        nextOldFiber = oldFiber;\n        oldFiber = null;\n      } else {\n        nextOldFiber = oldFiber.sibling;\n      }\n\n      const newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);\n\n      if (newFiber === null) {\n        // TODO: This breaks on empty slots like null children. That's\n        // unfortunate because it triggers the slow path all the time. We need\n        // a better way to communicate whether this was a miss or null,\n        // boolean, undefined, etc.\n        if (oldFiber === null) {\n          oldFiber = nextOldFiber;\n        }\n\n        break;\n      }\n\n      if (shouldTrackSideEffects) {\n        if (oldFiber && newFiber.alternate === null) {\n          // We matched the slot, but we didn't reuse the existing fiber, so we\n          // need to delete the existing child.\n          deleteChild(returnFiber, oldFiber);\n        }\n      }\n\n      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n\n      if (previousNewFiber === null) {\n        // TODO: Move out of the loop. This only happens for the first run.\n        resultingFirstChild = newFiber;\n      } else {\n        // TODO: Defer siblings if we're not at the right index for this slot.\n        // I.e. if we had null values before, then we want to defer this\n        // for each null value. However, we also don't want to call updateSlot\n        // with the previous one.\n        previousNewFiber.sibling = newFiber;\n      }\n\n      previousNewFiber = newFiber;\n      oldFiber = nextOldFiber;\n    }\n\n    if (step.done) {\n      // We've reached the end of the new children. We can delete the rest.\n      deleteRemainingChildren(returnFiber, oldFiber);\n\n      if (getIsHydrating()) {\n        const numberOfForks = newIdx;\n        pushTreeFork(returnFiber, numberOfForks);\n      }\n\n      return resultingFirstChild;\n    }\n\n    if (oldFiber === null) {\n      // If we don't have any more existing children we can choose a fast path\n      // since the rest will all be insertions.\n      for (; !step.done; newIdx++, step = newChildren.next()) {\n        const newFiber = createChild(returnFiber, step.value, lanes);\n\n        if (newFiber === null) {\n          continue;\n        }\n\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n\n        if (previousNewFiber === null) {\n          // TODO: Move out of the loop. This only happens for the first run.\n          resultingFirstChild = newFiber;\n        } else {\n          previousNewFiber.sibling = newFiber;\n        }\n\n        previousNewFiber = newFiber;\n      }\n\n      if (getIsHydrating()) {\n        const numberOfForks = newIdx;\n        pushTreeFork(returnFiber, numberOfForks);\n      }\n\n      return resultingFirstChild;\n    } // Add all children to a key map for quick lookups.\n\n\n    const existingChildren = mapRemainingChildren(oldFiber); // Keep scanning and use the map to restore deleted items as moves.\n\n    for (; !step.done; newIdx++, step = newChildren.next()) {\n      const newFiber = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);\n\n      if (newFiber !== null) {\n        if (shouldTrackSideEffects) {\n          if (newFiber.alternate !== null) {\n            // The new fiber is a work in progress, but if there exists a\n            // current, that means that we reused the fiber. We need to delete\n            // it from the child list so that we don't add it to the deletion\n            // list.\n            existingChildren.delete(newFiber.key === null ? newIdx : newFiber.key);\n          }\n        }\n\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n\n        if (previousNewFiber === null) {\n          resultingFirstChild = newFiber;\n        } else {\n          previousNewFiber.sibling = newFiber;\n        }\n\n        previousNewFiber = newFiber;\n      }\n    }\n\n    if (shouldTrackSideEffects) {\n      // Any existing children that weren't consumed above were deleted. We need\n      // to add them to the deletion list.\n      existingChildren.forEach(child => deleteChild(returnFiber, child));\n    }\n\n    if (getIsHydrating()) {\n      const numberOfForks = newIdx;\n      pushTreeFork(returnFiber, numberOfForks);\n    }\n\n    return resultingFirstChild;\n  }\n\n  function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {\n    // There's no need to check for keys on text nodes since we don't have a\n    // way to define them.\n    if (currentFirstChild !== null && currentFirstChild.tag === HostText) {\n      // We already have an existing node so let's just update it and delete\n      // the rest.\n      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);\n      const existing = useFiber(currentFirstChild, textContent);\n      existing.return = returnFiber;\n      return existing;\n    } // The existing first child is not a text node so we need to create one\n    // and delete the existing ones.\n\n\n    deleteRemainingChildren(returnFiber, currentFirstChild);\n    const created = createFiberFromText(textContent, returnFiber.mode, lanes);\n    created.return = returnFiber;\n    return created;\n  }\n\n  function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes, debugInfo) {\n    const key = element.key;\n    let child = currentFirstChild;\n\n    while (child !== null) {\n      // TODO: If key === null and child.key === null, then this only applies to\n      // the first item in the list.\n      if (child.key === key) {\n        const elementType = element.type;\n\n        if (elementType === REACT_FRAGMENT_TYPE) {\n          if (child.tag === Fragment) {\n            deleteRemainingChildren(returnFiber, child.sibling);\n            const existing = useFiber(child, element.props.children);\n            existing.return = returnFiber;\n\n            return existing;\n          }\n        } else {\n          if (child.elementType === elementType || ( // Keep this check inline so it only runs on the false path:\n          false) || // Lazy types should reconcile their resolved type.\n          // We need to do this after the Hot Reloading check above,\n          // because hot reloading has different semantics than prod because\n          // it doesn't resuspend. So we can't let the call below suspend.\n          typeof elementType === 'object' && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {\n            deleteRemainingChildren(returnFiber, child.sibling);\n            const existing = useFiber(child, element.props);\n            coerceRef(returnFiber, child, existing, element);\n            existing.return = returnFiber;\n\n            return existing;\n          }\n        } // Didn't match.\n\n\n        deleteRemainingChildren(returnFiber, child);\n        break;\n      } else {\n        deleteChild(returnFiber, child);\n      }\n\n      child = child.sibling;\n    }\n\n    if (element.type === REACT_FRAGMENT_TYPE) {\n      const created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);\n      created.return = returnFiber;\n\n      return created;\n    } else {\n      const created = createFiberFromElement(element, returnFiber.mode, lanes);\n      coerceRef(returnFiber, currentFirstChild, created, element);\n      created.return = returnFiber;\n\n      return created;\n    }\n  }\n\n  function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes, debugInfo) {\n    const key = portal.key;\n    let child = currentFirstChild;\n\n    while (child !== null) {\n      // TODO: If key === null and child.key === null, then this only applies to\n      // the first item in the list.\n      if (child.key === key) {\n        if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {\n          deleteRemainingChildren(returnFiber, child.sibling);\n          const existing = useFiber(child, portal.children || []);\n          existing.return = returnFiber;\n          return existing;\n        } else {\n          deleteRemainingChildren(returnFiber, child);\n          break;\n        }\n      } else {\n        deleteChild(returnFiber, child);\n      }\n\n      child = child.sibling;\n    }\n\n    const created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n    created.return = returnFiber;\n    return created;\n  } // This API will tag the children with the side-effect of the reconciliation\n  // itself. They will be added to the side-effect list as we pass through the\n  // children and the parent.\n\n\n  function reconcileChildFibersImpl(returnFiber, currentFirstChild, newChild, lanes, debugInfo) {\n    // This function is not recursive.\n    // If the top level item is an array, we treat it as a set of children,\n    // not as a fragment. Nested arrays on the other hand will be treated as\n    // fragment nodes. Recursion happens at the normal flow.\n    // Handle top level unkeyed fragments as if they were arrays.\n    // This leads to an ambiguity between <>{[...]}</> and <>...</>.\n    // We treat the ambiguous cases above the same.\n    // TODO: Let's use recursion like we do for Usable nodes?\n    const isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;\n\n    if (isUnkeyedTopLevelFragment) {\n      newChild = newChild.props.children;\n    } // Handle object types\n\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n          return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));\n\n        case REACT_PORTAL_TYPE:\n          return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));\n\n        case REACT_LAZY_TYPE:\n          const payload = newChild._payload;\n          const init = newChild._init;\n          return reconcileChildFibersImpl(returnFiber, currentFirstChild, init(payload), lanes);\n      }\n\n      if (isArray(newChild)) {\n        return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);\n      }\n\n      if (getIteratorFn(newChild)) {\n        return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);\n      } // Usables are a valid React node type. When React encounters a Usable in\n      // a child position, it unwraps it using the same algorithm as `use`. For\n      // example, for promises, React will throw an exception to unwind the\n      // stack, then replay the component once the promise resolves.\n      //\n      // A difference from `use` is that React will keep unwrapping the value\n      // until it reaches a non-Usable type.\n      //\n      // e.g. Usable<Usable<Usable<T>>> should resolve to T\n      //\n      // The structure is a bit unfortunate. Ideally, we shouldn't need to\n      // replay the entire begin phase of the parent fiber in order to reconcile\n      // the children again. This would require a somewhat significant refactor,\n      // because reconcilation happens deep within the begin phase, and\n      // depending on the type of work, not always at the end. We should\n      // consider as an future improvement.\n\n\n      if (typeof newChild.then === 'function') {\n        const thenable = newChild;\n        return reconcileChildFibersImpl(returnFiber, currentFirstChild, unwrapThenable(thenable), lanes);\n      }\n\n      if (newChild.$$typeof === REACT_CONTEXT_TYPE) {\n        const context = newChild;\n        return reconcileChildFibersImpl(returnFiber, currentFirstChild, readContextDuringReconciliation(returnFiber, context, lanes), lanes);\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number' || enableBigIntSupport ) {\n      return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, // $FlowFixMe[unsafe-addition] Flow doesn't want us to use `+` operator with string and bigint\n      '' + newChild, lanes));\n    }\n\n\n    return deleteRemainingChildren(returnFiber, currentFirstChild);\n  }\n\n  function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {\n    // This indirection only exists so we can reset `thenableState` at the end.\n    // It should get inlined by Closure.\n    thenableIndexCounter$1 = 0;\n    const firstChildFiber = reconcileChildFibersImpl(returnFiber, currentFirstChild, newChild, lanes);\n    thenableState$1 = null; // Don't bother to reset `thenableIndexCounter` to 0 because it always gets\n    // set at the beginning.\n\n    return firstChildFiber;\n  }\n\n  return reconcileChildFibers;\n}\n\nconst reconcileChildFibers = createChildReconciler(true);\nconst mountChildFibers = createChildReconciler(false);\nfunction resetChildReconcilerOnUnwind() {\n  // On unwind, clear any pending thenables that were used.\n  thenableState$1 = null;\n  thenableIndexCounter$1 = 0;\n}\nfunction cloneChildFibers(current, workInProgress) {\n  if (current !== null && workInProgress.child !== current.child) {\n    throw Error(formatProdErrorMessage(153));\n  }\n\n  if (workInProgress.child === null) {\n    return;\n  }\n\n  let currentChild = workInProgress.child;\n  let newChild = createWorkInProgress(currentChild, currentChild.pendingProps);\n  workInProgress.child = newChild;\n  newChild.return = workInProgress;\n\n  while (currentChild.sibling !== null) {\n    currentChild = currentChild.sibling;\n    newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);\n    newChild.return = workInProgress;\n  }\n\n  newChild.sibling = null;\n} // Reset a workInProgress child set to prepare it for a second pass.\n\nfunction resetChildFibers(workInProgress, lanes) {\n  let child = workInProgress.child;\n\n  while (child !== null) {\n    resetWorkInProgress(child, lanes);\n    child = child.sibling;\n  }\n}\n\n// TODO: This isn't being used yet, but it's intended to replace the\n// InvisibleParentContext that is currently managed by SuspenseContext.\n\nconst currentTreeHiddenStackCursor = createCursor(null);\nconst prevEntangledRenderLanesCursor = createCursor(NoLanes);\nfunction pushHiddenContext(fiber, context) {\n  const prevEntangledRenderLanes = getEntangledRenderLanes();\n  push(prevEntangledRenderLanesCursor, prevEntangledRenderLanes);\n  push(currentTreeHiddenStackCursor, context); // When rendering a subtree that's currently hidden, we must include all\n  // lanes that would have rendered if the hidden subtree hadn't been deferred.\n  // That is, in order to reveal content from hidden -> visible, we must commit\n  // all the updates that we skipped when we originally hid the tree.\n\n  setEntangledRenderLanes(mergeLanes(prevEntangledRenderLanes, context.baseLanes));\n}\nfunction reuseHiddenContextOnStack(fiber) {\n  // This subtree is not currently hidden, so we don't need to add any lanes\n  // to the render lanes. But we still need to push something to avoid a\n  // context mismatch. Reuse the existing context on the stack.\n  push(prevEntangledRenderLanesCursor, getEntangledRenderLanes());\n  push(currentTreeHiddenStackCursor, currentTreeHiddenStackCursor.current);\n}\nfunction popHiddenContext(fiber) {\n  // Restore the previous render lanes from the stack\n  setEntangledRenderLanes(prevEntangledRenderLanesCursor.current);\n  pop(currentTreeHiddenStackCursor);\n  pop(prevEntangledRenderLanesCursor);\n}\nfunction isCurrentTreeHidden() {\n  return currentTreeHiddenStackCursor.current !== null;\n}\n\n// suspends, i.e. it's the nearest `catch` block on the stack.\n\nconst suspenseHandlerStackCursor = createCursor(null); // Represents the outermost boundary that is not visible in the current tree.\n// Everything above this is the \"shell\". When this is null, it means we're\n// rendering in the shell of the app. If it's non-null, it means we're rendering\n// deeper than the shell, inside a new tree that wasn't already visible.\n//\n// The main way we use this concept is to determine whether showing a fallback\n// would result in a desirable or undesirable loading state. Activing a fallback\n// in the shell is considered an undersirable loading state, because it would\n// mean hiding visible (albeit stale) content in the current tree — we prefer to\n// show the stale content, rather than switch to a fallback. But showing a\n// fallback in a new tree is fine, because there's no stale content to\n// prefer instead.\n\nlet shellBoundary = null;\nfunction getShellBoundary() {\n  return shellBoundary;\n}\nfunction pushPrimaryTreeSuspenseHandler(handler) {\n  // TODO: Pass as argument\n  const current = handler.alternate;\n  // propagated a single level. For example, when ForceSuspenseFallback is set,\n  // it should only force the nearest Suspense boundary into fallback mode.\n\n  pushSuspenseListContext(handler, setDefaultShallowSuspenseListContext(suspenseStackCursor.current)); // Experimental feature: Some Suspense boundaries are marked as having an\n  // to push a nested Suspense handler, because it will get replaced by the\n  // outer fallback, anyway. Consider this as a future optimization.\n\n\n  push(suspenseHandlerStackCursor, handler);\n\n  if (shellBoundary === null) {\n    if (current === null || isCurrentTreeHidden()) {\n      // This boundary is not visible in the current UI.\n      shellBoundary = handler;\n    } else {\n      const prevState = current.memoizedState;\n\n      if (prevState !== null) {\n        // This boundary is showing a fallback in the current UI.\n        shellBoundary = handler;\n      }\n    }\n  }\n}\nfunction pushFallbackTreeSuspenseHandler(fiber) {\n  // We're about to render the fallback. If something in the fallback suspends,\n  // it's akin to throwing inside of a `catch` block. This boundary should not\n  // capture. Reuse the existing handler on the stack.\n  reuseSuspenseHandlerOnStack(fiber);\n}\nfunction pushOffscreenSuspenseHandler(fiber) {\n  if (fiber.tag === OffscreenComponent) {\n    // A SuspenseList context is only pushed here to avoid a push/pop mismatch.\n    // Reuse the current value on the stack.\n    // TODO: We can avoid needing to push here by by forking popSuspenseHandler\n    // into separate functions for Suspense and Offscreen.\n    pushSuspenseListContext(fiber, suspenseStackCursor.current);\n    push(suspenseHandlerStackCursor, fiber);\n\n    if (shellBoundary !== null) ; else {\n      const current = fiber.alternate;\n\n      if (current !== null) {\n        const prevState = current.memoizedState;\n\n        if (prevState !== null) {\n          // This is the first boundary in the stack that's already showing\n          // a fallback. So everything outside is considered the shell.\n          shellBoundary = fiber;\n        }\n      }\n    }\n  } else {\n    // This is a LegacyHidden component.\n    reuseSuspenseHandlerOnStack(fiber);\n  }\n}\nfunction reuseSuspenseHandlerOnStack(fiber) {\n  pushSuspenseListContext(fiber, suspenseStackCursor.current);\n  push(suspenseHandlerStackCursor, getSuspenseHandler());\n}\nfunction getSuspenseHandler() {\n  return suspenseHandlerStackCursor.current;\n}\nfunction popSuspenseHandler(fiber) {\n  pop(suspenseHandlerStackCursor);\n\n  if (shellBoundary === fiber) {\n    // Popping back into the shell.\n    shellBoundary = null;\n  }\n\n  popSuspenseListContext();\n} // SuspenseList context\n// TODO: Move to a separate module? We may change the SuspenseList\n// implementation to hide/show in the commit phase, anyway.\n\nconst DefaultSuspenseContext = 0b00;\nconst SubtreeSuspenseContextMask = 0b01; // ForceSuspenseFallback can be used by SuspenseList to force newly added\n// items into their fallback state during one of the render passes.\n\nconst ForceSuspenseFallback = 0b10;\nconst suspenseStackCursor = createCursor(DefaultSuspenseContext);\nfunction hasSuspenseListContext(parentContext, flag) {\n  return (parentContext & flag) !== 0;\n}\nfunction setDefaultShallowSuspenseListContext(parentContext) {\n  return parentContext & SubtreeSuspenseContextMask;\n}\nfunction setShallowSuspenseListContext(parentContext, shallowContext) {\n  return parentContext & SubtreeSuspenseContextMask | shallowContext;\n}\nfunction pushSuspenseListContext(fiber, newContext) {\n  push(suspenseStackCursor, newContext);\n}\nfunction popSuspenseListContext(fiber) {\n  pop(suspenseStackCursor);\n}\n\n// A non-null SuspenseState means that it is blocked for one reason or another.\n// - A non-null dehydrated field means it's blocked pending hydration.\n//   - A non-null dehydrated field can use isSuspenseInstancePending or\n//     isSuspenseInstanceFallback to query the reason for being dehydrated.\n// - A null dehydrated field means it's blocked by something suspending and\n//   we're currently showing a fallback instead.\n\nfunction findFirstSuspended(row) {\n  let node = row;\n\n  while (node !== null) {\n    if (node.tag === SuspenseComponent) {\n      const state = node.memoizedState;\n\n      if (state !== null) {\n        const dehydrated = state.dehydrated;\n\n        if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {\n          return node;\n        }\n      }\n    } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't\n    // keep track of whether it suspended or not.\n    node.memoizedProps.revealOrder !== undefined) {\n      const didSuspend = (node.flags & DidCapture) !== NoFlags$1;\n\n      if (didSuspend) {\n        return node;\n      }\n    } else if (node.child !== null) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n\n    if (node === row) {\n      return null;\n    }\n\n    while (node.sibling === null) {\n      if (node.return === null || node.return === row) {\n        return null;\n      }\n\n      node = node.return;\n    }\n\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n\n  return null;\n}\n\nconst NoFlags =\n/*   */\n0b0000; // Represents whether effect should fire.\n\nconst HasEffect =\n/* */\n0b0001; // Represents the phase in which the effect (not the clean-up) fires.\n\nconst Insertion =\n/* */\n0b0010;\nconst Layout =\n/*    */\n0b0100;\nconst Passive =\n/*   */\n0b1000;\n\nconst ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,\n      ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig;\n// lifetime of an effect. In Rust terms, a RefCell. We use it to store the\n// \"destroy\" function that is returned from an effect, because that is stateful.\n// The field is `undefined` if the effect is unmounted, or if the effect ran\n// but is not stateful. We don't explicitly track whether the effect is mounted\n// or unmounted because that can be inferred by the hiddenness of the fiber in\n// the tree, i.e. whether there is a hidden Offscreen fiber above it.\n//\n// It's unfortunate that this is stored on a separate object, because it adds\n// more memory per effect instance, but it's conceptually sound. I think there's\n// likely a better data structure we could use for effects; perhaps just one\n// array of effect instances per fiber. But I think this is OK for now despite\n// the additional memory and we can follow up with performance\n// optimizations later.\n// These are set right before calling the component.\n\n\nlet renderLanes = NoLanes; // The work-in-progress fiber. I've named it differently to distinguish it from\n// the work-in-progress hook.\n\nlet currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The\n// current hook list is the list that belongs to the current fiber. The\n// work-in-progress hook list is a new list that will be added to the\n// work-in-progress fiber.\n\nlet currentHook = null;\nlet workInProgressHook = null; // Whether an update was scheduled at any point during the render phase. This\n// does not get reset if we do another render pass; only when we're completely\n// finished evaluating this component. This is an optimization so we know\n// whether we need to clear render phase updates after a throw.\n\nlet didScheduleRenderPhaseUpdate = false; // Where an update was scheduled only during the current render pass. This\n// gets reset after each attempt.\n// TODO: Maybe there's some way to consolidate this with\n// `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.\n\nlet didScheduleRenderPhaseUpdateDuringThisPass = false;\nlet shouldDoubleInvokeUserFnsInHooksDEV = false; // Counts the number of useId hooks in this component.\n\nlet localIdCounter = 0; // Counts number of `use`-d thenables\n\nlet thenableIndexCounter = 0;\nlet thenableState = null; // Used for ids that are generated completely client-side (i.e. not during\n// hydration). This counter is global, so client ids are not stable across\n// render attempts.\n\nlet globalClientIdCounter = 0;\nconst RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook\n\nfunction throwInvalidHookError() {\n  throw Error(formatProdErrorMessage(321));\n}\n\nfunction areHookInputsEqual(nextDeps, prevDeps) {\n\n  if (prevDeps === null) {\n\n    return false;\n  }\n\n\n  for (let i = 0; i < prevDeps.length && i < nextDeps.length; i++) {\n    // $FlowFixMe[incompatible-use] found when upgrading Flow\n    if (objectIs(nextDeps[i], prevDeps[i])) {\n      continue;\n    }\n\n    return false;\n  }\n\n  return true;\n}\n\nfunction renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {\n  renderLanes = nextRenderLanes;\n  currentlyRenderingFiber$1 = workInProgress;\n\n  workInProgress.memoizedState = null;\n  workInProgress.updateQueue = null;\n  workInProgress.lanes = NoLanes; // The following should have already been reset\n  // currentHook = null;\n  // workInProgressHook = null;\n  // didScheduleRenderPhaseUpdate = false;\n  // localIdCounter = 0;\n  // thenableIndexCounter = 0;\n  // thenableState = null;\n  // TODO Warn if no hooks are used at all during mount, then some are used during update.\n  // Currently we will identify the update render as a mount because memoizedState === null.\n  // This is tricky because it's valid for certain types of components (e.g. React.lazy)\n  // Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.\n  // Non-stateful hooks (e.g. context) don't get added to memoizedState,\n  // so memoizedState would be null during updates and mounts.\n\n  {\n    ReactCurrentDispatcher$1.current = current === null || current.memoizedState === null ? HooksDispatcherOnMount : HooksDispatcherOnUpdate;\n  } // In Strict Mode, during development, user functions are double invoked to\n  // help detect side effects. The logic for how this is implemented for in\n  // hook components is a bit complex so let's break it down.\n  //\n  // We will invoke the entire component function twice. However, during the\n  // second invocation of the component, the hook state from the first\n  // invocation will be reused. That means things like `useMemo` functions won't\n  // run again, because the deps will match and the memoized result will\n  // be reused.\n  //\n  // We want memoized functions to run twice, too, so account for this, user\n  // functions are double invoked during the *first* invocation of the component\n  // function, and are *not* double invoked during the second incovation:\n  //\n  // - First execution of component function: user functions are double invoked\n  // - Second execution of component function (in Strict Mode, during\n  //   development): user functions are not double invoked.\n  //\n  // This is intentional for a few reasons; most importantly, it's because of\n  // how `use` works when something suspends: it reuses the promise that was\n  // passed during the first attempt. This is itself a form of memoization.\n  // We need to be able to memoize the reactive inputs to the `use` call using\n  // a hook (i.e. `useMemo`), which means, the reactive inputs to `use` must\n  // come from the same component invocation as the output.\n  //\n  // There are plenty of tests to ensure this behavior is correct.\n\n\n  const shouldDoubleRenderDEV = false  ;\n  shouldDoubleInvokeUserFnsInHooksDEV = shouldDoubleRenderDEV;\n  let children = Component(props, secondArg);\n  shouldDoubleInvokeUserFnsInHooksDEV = false; // Check if there was a render phase update\n\n  if (didScheduleRenderPhaseUpdateDuringThisPass) {\n    // Keep rendering until the component stabilizes (there are no more render\n    // phase updates).\n    children = renderWithHooksAgain(workInProgress, Component, props, secondArg);\n  }\n\n  finishRenderingHooks();\n  return children;\n}\n\nfunction finishRenderingHooks(current, workInProgress, Component) {\n  // at the beginning of the render phase and there's no re-entrance.\n\n\n  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher; // This check uses currentHook so that it works the same in DEV and prod bundles.\n  // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.\n\n  const didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;\n  renderLanes = NoLanes;\n  currentlyRenderingFiber$1 = null;\n  currentHook = null;\n  workInProgressHook = null;\n\n  didScheduleRenderPhaseUpdate = false; // This is reset by checkDidRenderIdHook\n  // localIdCounter = 0;\n\n  thenableIndexCounter = 0;\n  thenableState = null;\n\n  if (didRenderTooFewHooks) {\n    throw Error(formatProdErrorMessage(300));\n  }\n}\n\nfunction replaySuspendedComponentWithHooks(current, workInProgress, Component, props, secondArg) {\n\n  const children = renderWithHooksAgain(workInProgress, Component, props, secondArg);\n  finishRenderingHooks();\n  return children;\n}\n\nfunction renderWithHooksAgain(workInProgress, Component, props, secondArg) {\n  // This is used to perform another render pass. It's used when setState is\n  // called during render, and for double invoking components in Strict Mode\n  // during development.\n  //\n  // The state from the previous pass is reused whenever possible. So, state\n  // updates that were already processed are not processed again, and memoized\n  // functions (`useMemo`) are not invoked again.\n  //\n  // Keep rendering in a loop for as long as render phase updates continue to\n  // be scheduled. Use a counter to prevent infinite loops.\n  currentlyRenderingFiber$1 = workInProgress;\n  let numberOfReRenders = 0;\n  let children;\n\n  do {\n    if (didScheduleRenderPhaseUpdateDuringThisPass) {\n      // It's possible that a use() value depended on a state that was updated in\n      // this rerender, so we need to watch for different thenables this time.\n      thenableState = null;\n    }\n\n    thenableIndexCounter = 0;\n    didScheduleRenderPhaseUpdateDuringThisPass = false;\n\n    if (numberOfReRenders >= RE_RENDER_LIMIT) {\n      throw Error(formatProdErrorMessage(301));\n    }\n\n    numberOfReRenders += 1;\n\n\n    currentHook = null;\n    workInProgressHook = null;\n    workInProgress.updateQueue = null;\n\n    ReactCurrentDispatcher$1.current = HooksDispatcherOnRerender;\n    children = Component(props, secondArg);\n  } while (didScheduleRenderPhaseUpdateDuringThisPass);\n\n  return children;\n}\n\nfunction renderTransitionAwareHostComponentWithHooks(current, workInProgress, lanes) {\n\n  return renderWithHooks(current, workInProgress, TransitionAwareHostComponent, null, null, lanes);\n}\nfunction TransitionAwareHostComponent() {\n\n  const dispatcher = ReactCurrentDispatcher$1.current;\n\n  const _dispatcher$useState = dispatcher.useState(),\n        maybeThenable = _dispatcher$useState[0];\n\n  if (typeof maybeThenable.then === 'function') {\n    const thenable = maybeThenable;\n    return useThenable(thenable);\n  } else {\n    const status = maybeThenable;\n    return status;\n  }\n}\nfunction checkDidRenderIdHook() {\n  // This should be called immediately after every renderWithHooks call.\n  // Conceptually, it's part of the return value of renderWithHooks; it's only a\n  // separate function to avoid using an array tuple.\n  const didRenderIdHook = localIdCounter !== 0;\n  localIdCounter = 0;\n  return didRenderIdHook;\n}\nfunction bailoutHooks(current, workInProgress, lanes) {\n  workInProgress.updateQueue = current.updateQueue; // TODO: Don't need to reset the flags here, because they're reset in the\n  // complete phase (bubbleProperties).\n\n  {\n    workInProgress.flags &= ~(Passive$1 | Update);\n  }\n\n  current.lanes = removeLanes(current.lanes, lanes);\n}\nfunction resetHooksAfterThrow() {\n  // This is called immediaetly after a throw. It shouldn't reset the entire\n  // module state, because the work loop might decide to replay the component\n  // again without rewinding.\n  //\n  // It should only reset things like the current dispatcher, to prevent hooks\n  // from being called outside of a component.\n  currentlyRenderingFiber$1 = null; // We can assume the previous dispatcher is always this one, since we set it\n  // at the beginning of the render phase and there's no re-entrance.\n\n  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;\n}\nfunction resetHooksOnUnwind(workInProgress) {\n  if (didScheduleRenderPhaseUpdate) {\n    // There were render phase updates. These are only valid for this render\n    // phase, which we are now aborting. Remove the updates from the queues so\n    // they do not persist to the next render. Do not remove updates from hooks\n    // that weren't processed.\n    //\n    // Only reset the updates from the queue if it has a clone. If it does\n    // not have a clone, that means it wasn't processed, and the updates were\n    // scheduled before we entered the render phase.\n    let hook = workInProgress.memoizedState;\n\n    while (hook !== null) {\n      const queue = hook.queue;\n\n      if (queue !== null) {\n        queue.pending = null;\n      }\n\n      hook = hook.next;\n    }\n\n    didScheduleRenderPhaseUpdate = false;\n  }\n\n  renderLanes = NoLanes;\n  currentlyRenderingFiber$1 = null;\n  currentHook = null;\n  workInProgressHook = null;\n\n  didScheduleRenderPhaseUpdateDuringThisPass = false;\n  localIdCounter = 0;\n  thenableIndexCounter = 0;\n  thenableState = null;\n}\n\nfunction mountWorkInProgressHook() {\n  const hook = {\n    memoizedState: null,\n    baseState: null,\n    baseQueue: null,\n    queue: null,\n    next: null\n  };\n\n  if (workInProgressHook === null) {\n    // This is the first hook in the list\n    currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;\n  } else {\n    // Append to the end of the list\n    workInProgressHook = workInProgressHook.next = hook;\n  }\n\n  return workInProgressHook;\n}\n\nfunction updateWorkInProgressHook() {\n  // This function is used both for updates and for re-renders triggered by a\n  // render phase update. It assumes there is either a current hook we can\n  // clone, or a work-in-progress hook from a previous render pass that we can\n  // use as a base.\n  let nextCurrentHook;\n\n  if (currentHook === null) {\n    const current = currentlyRenderingFiber$1.alternate;\n\n    if (current !== null) {\n      nextCurrentHook = current.memoizedState;\n    } else {\n      nextCurrentHook = null;\n    }\n  } else {\n    nextCurrentHook = currentHook.next;\n  }\n\n  let nextWorkInProgressHook;\n\n  if (workInProgressHook === null) {\n    nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;\n  } else {\n    nextWorkInProgressHook = workInProgressHook.next;\n  }\n\n  if (nextWorkInProgressHook !== null) {\n    // There's already a work-in-progress. Reuse it.\n    workInProgressHook = nextWorkInProgressHook;\n    nextWorkInProgressHook = workInProgressHook.next;\n    currentHook = nextCurrentHook;\n  } else {\n    // Clone from the current hook.\n    if (nextCurrentHook === null) {\n      const currentFiber = currentlyRenderingFiber$1.alternate;\n\n      if (currentFiber === null) {\n        // This is the initial render. This branch is reached when the component\n        // suspends, resumes, then renders an additional hook.\n        // Should never be reached because we should switch to the mount dispatcher first.\n        throw Error(formatProdErrorMessage(467));\n      } else {\n        // This is an update. We should always have a current hook.\n        throw Error(formatProdErrorMessage(310));\n      }\n    }\n\n    currentHook = nextCurrentHook;\n    const newHook = {\n      memoizedState: currentHook.memoizedState,\n      baseState: currentHook.baseState,\n      baseQueue: currentHook.baseQueue,\n      queue: currentHook.queue,\n      next: null\n    };\n\n    if (workInProgressHook === null) {\n      // This is the first hook in the list.\n      currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;\n    } else {\n      // Append to the end of the list.\n      workInProgressHook = workInProgressHook.next = newHook;\n    }\n  }\n\n  return workInProgressHook;\n} // NOTE: defining two versions of this function to avoid size impact when this feature is disabled.\n// Previously this function was inlined, the additional `memoCache` property makes it not inlined.\n\n\nlet createFunctionComponentUpdateQueue;\n\n{\n  createFunctionComponentUpdateQueue = () => {\n    return {\n      lastEffect: null,\n      events: null,\n      stores: null\n    };\n  };\n}\n\nfunction useThenable(thenable) {\n  // Track the position of the thenable within this fiber.\n  const index = thenableIndexCounter;\n  thenableIndexCounter += 1;\n\n  if (thenableState === null) {\n    thenableState = createThenableState();\n  }\n\n  const result = trackUsedThenable(thenableState, thenable, index);\n\n  if (currentlyRenderingFiber$1.alternate === null && (workInProgressHook === null ? currentlyRenderingFiber$1.memoizedState === null : workInProgressHook.next === null)) {\n    // Initial render, and either this is the first time the component is\n    // called, or there were no Hooks called after this use() the previous\n    // time (perhaps because it threw). Subsequent Hook calls should use the\n    // mount dispatcher.\n    {\n      ReactCurrentDispatcher$1.current = HooksDispatcherOnMount;\n    }\n  }\n\n  return result;\n}\n\nfunction use(usable) {\n  if (usable !== null && typeof usable === 'object') {\n    // $FlowFixMe[method-unbinding]\n    if (typeof usable.then === 'function') {\n      // This is a thenable.\n      const thenable = usable;\n      return useThenable(thenable);\n    } else if (usable.$$typeof === REACT_CONTEXT_TYPE) {\n      const context = usable;\n      return readContext(context);\n    }\n  } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n  throw Error(formatProdErrorMessage(438, String(usable)));\n}\n\nfunction basicStateReducer(state, action) {\n  // $FlowFixMe[incompatible-use]: Flow doesn't like mixed types\n  return typeof action === 'function' ? action(state) : action;\n}\n\nfunction mountReducer(reducer, initialArg, init) {\n  const hook = mountWorkInProgressHook();\n  let initialState;\n\n  if (init !== undefined) {\n    initialState = init(initialArg);\n\n    if (shouldDoubleInvokeUserFnsInHooksDEV) {\n      setIsStrictModeForDevtools(true);\n      init(initialArg);\n      setIsStrictModeForDevtools(false);\n    }\n  } else {\n    initialState = initialArg;\n  }\n\n  hook.memoizedState = hook.baseState = initialState;\n  const queue = {\n    pending: null,\n    lanes: NoLanes,\n    dispatch: null,\n    lastRenderedReducer: reducer,\n    lastRenderedState: initialState\n  };\n  hook.queue = queue;\n  const dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);\n  return [hook.memoizedState, dispatch];\n}\n\nfunction updateReducer(reducer, initialArg, init) {\n  const hook = updateWorkInProgressHook();\n  return updateReducerImpl(hook, currentHook, reducer);\n}\n\nfunction updateReducerImpl(hook, current, reducer) {\n  const queue = hook.queue;\n\n  if (queue === null) {\n    throw Error(formatProdErrorMessage(311));\n  }\n\n  queue.lastRenderedReducer = reducer; // The last rebase update that is NOT part of the base state.\n\n  let baseQueue = hook.baseQueue; // The last pending update that hasn't been processed yet.\n\n  const pendingQueue = queue.pending;\n\n  if (pendingQueue !== null) {\n    // We have new updates that haven't been processed yet.\n    // We'll add them to the base queue.\n    if (baseQueue !== null) {\n      // Merge the pending queue and the base queue.\n      const baseFirst = baseQueue.next;\n      const pendingFirst = pendingQueue.next;\n      baseQueue.next = pendingFirst;\n      pendingQueue.next = baseFirst;\n    }\n\n    current.baseQueue = baseQueue = pendingQueue;\n    queue.pending = null;\n  }\n\n  const baseState = hook.baseState;\n\n  if (baseQueue === null) {\n    // If there are no pending updates, then the memoized state should be the\n    // same as the base state. Currently these only diverge in the case of\n    // useOptimistic, because useOptimistic accepts a new baseState on\n    // every render.\n    hook.memoizedState = baseState; // We don't need to call markWorkInProgressReceivedUpdate because\n    // baseState is derived from other reactive values.\n  } else {\n    // We have a queue to process.\n    const first = baseQueue.next;\n    let newState = baseState;\n    let newBaseState = null;\n    let newBaseQueueFirst = null;\n    let newBaseQueueLast = null;\n    let update = first;\n    let didReadFromEntangledAsyncAction = false;\n\n    do {\n      // An extra OffscreenLane bit is added to updates that were made to\n      // a hidden tree, so that we can distinguish them from updates that were\n      // already there when the tree was hidden.\n      const updateLane = removeLanes(update.lane, OffscreenLane);\n      const isHiddenUpdate = updateLane !== update.lane; // Check if this update was made while the tree was hidden. If so, then\n      // it's not a \"base\" update and we should disregard the extra base lanes\n      // that were added to renderLanes when we entered the Offscreen tree.\n\n      const shouldSkipUpdate = isHiddenUpdate ? !isSubsetOfLanes(getWorkInProgressRootRenderLanes(), updateLane) : !isSubsetOfLanes(renderLanes, updateLane);\n\n      if (shouldSkipUpdate) {\n        // Priority is insufficient. Skip this update. If this is the first\n        // skipped update, the previous update/state is the new base\n        // update/state.\n        const clone = {\n          lane: updateLane,\n          revertLane: update.revertLane,\n          action: update.action,\n          hasEagerState: update.hasEagerState,\n          eagerState: update.eagerState,\n          next: null\n        };\n\n        if (newBaseQueueLast === null) {\n          newBaseQueueFirst = newBaseQueueLast = clone;\n          newBaseState = newState;\n        } else {\n          newBaseQueueLast = newBaseQueueLast.next = clone;\n        } // Update the remaining priority in the queue.\n        // TODO: Don't need to accumulate this. Instead, we can remove\n        // renderLanes from the original lanes.\n\n\n        currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);\n        markSkippedUpdateLanes(updateLane);\n      } else {\n        // This update does have sufficient priority.\n        // Check if this is an optimistic update.\n        const revertLane = update.revertLane;\n\n        if (revertLane === NoLane) {\n          // This is not an optimistic update, and we're going to apply it now.\n          // But, if there were earlier updates that were skipped, we need to\n          // leave this update in the queue so it can be rebased later.\n          if (newBaseQueueLast !== null) {\n            const clone = {\n              // This update is going to be committed so we never want uncommit\n              // it. Using NoLane works because 0 is a subset of all bitmasks, so\n              // this will never be skipped by the check above.\n              lane: NoLane,\n              revertLane: NoLane,\n              action: update.action,\n              hasEagerState: update.hasEagerState,\n              eagerState: update.eagerState,\n              next: null\n            };\n            newBaseQueueLast = newBaseQueueLast.next = clone;\n          } // Check if this update is part of a pending async action. If so,\n          // we'll need to suspend until the action has finished, so that it's\n          // batched together with future updates in the same action.\n\n\n          if (updateLane === peekEntangledActionLane()) {\n            didReadFromEntangledAsyncAction = true;\n          }\n        } else {\n          // This is an optimistic update. If the \"revert\" priority is\n          // sufficient, don't apply the update. Otherwise, apply the update,\n          // but leave it in the queue so it can be either reverted or\n          // rebased in a subsequent render.\n          if (isSubsetOfLanes(renderLanes, revertLane)) {\n            // The transition that this optimistic update is associated with\n            // has finished. Pretend the update doesn't exist by skipping\n            // over it.\n            update = update.next; // Check if this update is part of a pending async action. If so,\n            // we'll need to suspend until the action has finished, so that it's\n            // batched together with future updates in the same action.\n\n            if (revertLane === peekEntangledActionLane()) {\n              didReadFromEntangledAsyncAction = true;\n            }\n\n            continue;\n          } else {\n            const clone = {\n              // Once we commit an optimistic update, we shouldn't uncommit it\n              // until the transition it is associated with has finished\n              // (represented by revertLane). Using NoLane here works because 0\n              // is a subset of all bitmasks, so this will never be skipped by\n              // the check above.\n              lane: NoLane,\n              // Reuse the same revertLane so we know when the transition\n              // has finished.\n              revertLane: update.revertLane,\n              action: update.action,\n              hasEagerState: update.hasEagerState,\n              eagerState: update.eagerState,\n              next: null\n            };\n\n            if (newBaseQueueLast === null) {\n              newBaseQueueFirst = newBaseQueueLast = clone;\n              newBaseState = newState;\n            } else {\n              newBaseQueueLast = newBaseQueueLast.next = clone;\n            } // Update the remaining priority in the queue.\n            // TODO: Don't need to accumulate this. Instead, we can remove\n            // renderLanes from the original lanes.\n\n\n            currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, revertLane);\n            markSkippedUpdateLanes(revertLane);\n          }\n        } // Process this update.\n\n\n        const action = update.action;\n\n        if (shouldDoubleInvokeUserFnsInHooksDEV) {\n          reducer(newState, action);\n        }\n\n        if (update.hasEagerState) {\n          // If this update is a state update (not a reducer) and was processed eagerly,\n          // we can use the eagerly computed state\n          newState = update.eagerState;\n        } else {\n          newState = reducer(newState, action);\n        }\n      }\n\n      update = update.next;\n    } while (update !== null && update !== first);\n\n    if (newBaseQueueLast === null) {\n      newBaseState = newState;\n    } else {\n      newBaseQueueLast.next = newBaseQueueFirst;\n    } // Mark that the fiber performed work, but only if the new state is\n    // different from the current state.\n\n\n    if (!objectIs(newState, hook.memoizedState)) {\n      markWorkInProgressReceivedUpdate(); // Check if this update is part of a pending async action. If so, we'll\n      // need to suspend until the action has finished, so that it's batched\n      // together with future updates in the same action.\n      // TODO: Once we support hooks inside useMemo (or an equivalent\n      // memoization boundary like Forget), hoist this logic so that it only\n      // suspends if the memo boundary produces a new value.\n\n      if (didReadFromEntangledAsyncAction) {\n        const entangledActionThenable = peekEntangledActionThenable();\n\n        if (entangledActionThenable !== null) {\n          // TODO: Instead of the throwing the thenable directly, throw a\n          // special object like `use` does so we can detect if it's captured\n          // by userspace.\n          throw entangledActionThenable;\n        }\n      }\n    }\n\n    hook.memoizedState = newState;\n    hook.baseState = newBaseState;\n    hook.baseQueue = newBaseQueueLast;\n    queue.lastRenderedState = newState;\n  }\n\n  if (baseQueue === null) {\n    // `queue.lanes` is used for entangling transitions. We can set it back to\n    // zero once the queue is empty.\n    queue.lanes = NoLanes;\n  }\n\n  const dispatch = queue.dispatch;\n  return [hook.memoizedState, dispatch];\n}\n\nfunction rerenderReducer(reducer, initialArg, init) {\n  const hook = updateWorkInProgressHook();\n  const queue = hook.queue;\n\n  if (queue === null) {\n    throw Error(formatProdErrorMessage(311));\n  }\n\n  queue.lastRenderedReducer = reducer; // This is a re-render. Apply the new render phase updates to the previous\n  // work-in-progress hook.\n\n  const dispatch = queue.dispatch;\n  const lastRenderPhaseUpdate = queue.pending;\n  let newState = hook.memoizedState;\n\n  if (lastRenderPhaseUpdate !== null) {\n    // The queue doesn't persist past this render pass.\n    queue.pending = null;\n    const firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;\n    let update = firstRenderPhaseUpdate;\n\n    do {\n      // Process this render phase update. We don't have to check the\n      // priority because it will always be the same as the current\n      // render's.\n      const action = update.action;\n      newState = reducer(newState, action);\n      update = update.next;\n    } while (update !== firstRenderPhaseUpdate); // Mark that the fiber performed work, but only if the new state is\n    // different from the current state.\n\n\n    if (!objectIs(newState, hook.memoizedState)) {\n      markWorkInProgressReceivedUpdate();\n    }\n\n    hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to\n    // the base state unless the queue is empty.\n    // TODO: Not sure if this is the desired semantics, but it's what we\n    // do for gDSFP. I can't remember why.\n\n    if (hook.baseQueue === null) {\n      hook.baseState = newState;\n    }\n\n    queue.lastRenderedState = newState;\n  }\n\n  return [newState, dispatch];\n}\n\nfunction mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {\n  const fiber = currentlyRenderingFiber$1;\n  const hook = mountWorkInProgressHook();\n  let nextSnapshot;\n  const isHydrating = getIsHydrating();\n\n  if (isHydrating) {\n    if (getServerSnapshot === undefined) {\n      throw Error(formatProdErrorMessage(407));\n    }\n\n    nextSnapshot = getServerSnapshot();\n  } else {\n    nextSnapshot = getSnapshot();\n    // Right before committing, we will walk the tree and check if any of the\n    // stores were mutated.\n    //\n    // We won't do this if we're hydrating server-rendered content, because if\n    // the content is stale, it's already visible anyway. Instead we'll patch\n    // it up in a passive effect.\n\n\n    const root = getWorkInProgressRoot();\n\n    if (root === null) {\n      throw Error(formatProdErrorMessage(349));\n    }\n\n    const rootRenderLanes = getWorkInProgressRootRenderLanes();\n\n    if (!includesBlockingLane(root, rootRenderLanes)) {\n      pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);\n    }\n  } // Read the current snapshot from the store on every render. This breaks the\n  // normal rules of React, and only works because store updates are\n  // always synchronous.\n\n\n  hook.memoizedState = nextSnapshot;\n  const inst = {\n    value: nextSnapshot,\n    getSnapshot\n  };\n  hook.queue = inst; // Schedule an effect to subscribe to the store.\n\n  mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]); // Schedule an effect to update the mutable instance fields. We will update\n  // this whenever subscribe, getSnapshot, or value changes. Because there's no\n  // clean-up function, and we track the deps correctly, we can call pushEffect\n  // directly, without storing any additional state. For the same reason, we\n  // don't need to set a static flag, either.\n\n  fiber.flags |= Passive$1;\n  pushEffect(HasEffect | Passive, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), createEffectInstance(), null);\n  return nextSnapshot;\n}\n\nfunction updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {\n  const fiber = currentlyRenderingFiber$1;\n  const hook = updateWorkInProgressHook(); // Read the current snapshot from the store on every render. This breaks the\n  // normal rules of React, and only works because store updates are\n  // always synchronous.\n\n  let nextSnapshot;\n  const isHydrating = getIsHydrating();\n\n  if (isHydrating) {\n    // Needed for strict mode double render\n    if (getServerSnapshot === undefined) {\n      throw Error(formatProdErrorMessage(407));\n    }\n\n    nextSnapshot = getServerSnapshot();\n  } else {\n    nextSnapshot = getSnapshot();\n  }\n\n  const prevSnapshot = (currentHook || hook).memoizedState;\n  const snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);\n\n  if (snapshotChanged) {\n    hook.memoizedState = nextSnapshot;\n    markWorkInProgressReceivedUpdate();\n  }\n\n  const inst = hook.queue;\n  updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]); // Whenever getSnapshot or subscribe changes, we need to check in the\n  // commit phase if there was an interleaved mutation. In concurrent mode\n  // this can happen all the time, but even in synchronous mode, an earlier\n  // effect may have mutated the store.\n\n  if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the subscribe function changed. We can save some memory by\n  // checking whether we scheduled a subscription effect above.\n  workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {\n    fiber.flags |= Passive$1;\n    pushEffect(HasEffect | Passive, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), createEffectInstance(), null); // Unless we're rendering a blocking lane, schedule a consistency check.\n    // Right before committing, we will walk the tree and check if any of the\n    // stores were mutated.\n\n    const root = getWorkInProgressRoot();\n\n    if (root === null) {\n      throw Error(formatProdErrorMessage(349));\n    }\n\n    if (!isHydrating && !includesBlockingLane(root, renderLanes)) {\n      pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);\n    }\n  }\n\n  return nextSnapshot;\n}\n\nfunction pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {\n  fiber.flags |= StoreConsistency;\n  const check = {\n    getSnapshot,\n    value: renderedSnapshot\n  };\n  let componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;\n\n  if (componentUpdateQueue === null) {\n    componentUpdateQueue = createFunctionComponentUpdateQueue();\n    currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;\n    componentUpdateQueue.stores = [check];\n  } else {\n    const stores = componentUpdateQueue.stores;\n\n    if (stores === null) {\n      componentUpdateQueue.stores = [check];\n    } else {\n      stores.push(check);\n    }\n  }\n}\n\nfunction updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {\n  // These are updated in the passive phase\n  inst.value = nextSnapshot;\n  inst.getSnapshot = getSnapshot; // Something may have been mutated in between render and commit. This could\n  // have been in an event that fired before the passive effects, or it could\n  // have been in a layout effect. In that case, we would have used the old\n  // snapsho and getSnapshot values to bail out. We need to check one more time.\n\n  if (checkIfSnapshotChanged(inst)) {\n    // Force a re-render.\n    forceStoreRerender(fiber);\n  }\n}\n\nfunction subscribeToStore(fiber, inst, subscribe) {\n  const handleStoreChange = () => {\n    // The store changed. Check if the snapshot changed since the last time we\n    // read from the store.\n    if (checkIfSnapshotChanged(inst)) {\n      // Force a re-render.\n      forceStoreRerender(fiber);\n    }\n  }; // Subscribe to the store and return a clean-up function.\n\n\n  return subscribe(handleStoreChange);\n}\n\nfunction checkIfSnapshotChanged(inst) {\n  const latestGetSnapshot = inst.getSnapshot;\n  const prevValue = inst.value;\n\n  try {\n    const nextValue = latestGetSnapshot();\n    return !objectIs(prevValue, nextValue);\n  } catch (error) {\n    return true;\n  }\n}\n\nfunction forceStoreRerender(fiber) {\n  const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n  if (root !== null) {\n    scheduleUpdateOnFiber(root, fiber, SyncLane);\n  }\n}\n\nfunction mountStateImpl(initialState) {\n  const hook = mountWorkInProgressHook();\n\n  if (typeof initialState === 'function') {\n    const initialStateInitializer = initialState; // $FlowFixMe[incompatible-use]: Flow doesn't like mixed types\n\n    initialState = initialStateInitializer();\n\n    if (shouldDoubleInvokeUserFnsInHooksDEV) {\n      setIsStrictModeForDevtools(true); // $FlowFixMe[incompatible-use]: Flow doesn't like mixed types\n\n      initialStateInitializer();\n      setIsStrictModeForDevtools(false);\n    }\n  }\n\n  hook.memoizedState = hook.baseState = initialState;\n  const queue = {\n    pending: null,\n    lanes: NoLanes,\n    dispatch: null,\n    lastRenderedReducer: basicStateReducer,\n    lastRenderedState: initialState\n  };\n  hook.queue = queue;\n  return hook;\n}\n\nfunction mountState(initialState) {\n  const hook = mountStateImpl(initialState);\n  const queue = hook.queue;\n  const dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);\n  queue.dispatch = dispatch;\n  return [hook.memoizedState, dispatch];\n}\n\nfunction updateState(initialState) {\n  return updateReducer(basicStateReducer);\n}\n\nfunction rerenderState(initialState) {\n  return rerenderReducer(basicStateReducer);\n}\n\nfunction mountOptimistic(passthrough, reducer) {\n  const hook = mountWorkInProgressHook();\n  hook.memoizedState = hook.baseState = passthrough;\n  const queue = {\n    pending: null,\n    lanes: NoLanes,\n    dispatch: null,\n    // Optimistic state does not use the eager update optimization.\n    lastRenderedReducer: null,\n    lastRenderedState: null\n  };\n  hook.queue = queue; // This is different than the normal setState function.\n\n  const dispatch = dispatchOptimisticSetState.bind(null, currentlyRenderingFiber$1, true, queue);\n  queue.dispatch = dispatch;\n  return [passthrough, dispatch];\n}\n\nfunction updateOptimistic(passthrough, reducer) {\n  const hook = updateWorkInProgressHook();\n  return updateOptimisticImpl(hook, currentHook, passthrough, reducer);\n}\n\nfunction updateOptimisticImpl(hook, current, passthrough, reducer) {\n  // Optimistic updates are always rebased on top of the latest value passed in\n  // as an argument. It's called a passthrough because if there are no pending\n  // updates, it will be returned as-is.\n  //\n  // Reset the base state to the passthrough. Future updates will be applied\n  // on top of this.\n  hook.baseState = passthrough; // If a reducer is not provided, default to the same one used by useState.\n\n  const resolvedReducer = typeof reducer === 'function' ? reducer : basicStateReducer;\n  return updateReducerImpl(hook, currentHook, resolvedReducer);\n}\n\nfunction rerenderOptimistic(passthrough, reducer) {\n  // Unlike useState, useOptimistic doesn't support render phase updates.\n  // Also unlike useState, we need to replay all pending updates again in case\n  // the passthrough value changed.\n  //\n  // So instead of a forked re-render implementation that knows how to handle\n  // render phase udpates, we can use the same implementation as during a\n  // regular mount or update.\n  const hook = updateWorkInProgressHook();\n\n  if (currentHook !== null) {\n    // This is an update. Process the update queue.\n    return updateOptimisticImpl(hook, currentHook, passthrough, reducer);\n  } // This is a mount. No updates to process.\n  // Reset the base state to the passthrough. Future updates will be applied\n  // on top of this.\n\n\n  hook.baseState = passthrough;\n  const dispatch = hook.queue.dispatch;\n  return [passthrough, dispatch];\n} // useActionState actions run sequentially, because each action receives the\n// previous state as an argument. We store pending actions on a queue.\n\n\nfunction dispatchActionState(fiber, actionQueue, setPendingState, setState, payload) {\n  if (isRenderPhaseUpdate(fiber)) {\n    throw Error(formatProdErrorMessage(485));\n  }\n\n  const last = actionQueue.pending;\n\n  if (last === null) {\n    // There are no pending actions; this is the first one. We can run\n    // it immediately.\n    const newLast = {\n      payload,\n      next: null // circular\n\n    };\n    newLast.next = actionQueue.pending = newLast;\n    runActionStateAction(actionQueue, setPendingState, setState, payload);\n  } else {\n    // There's already an action running. Add to the queue.\n    const first = last.next;\n    const newLast = {\n      payload,\n      next: first\n    };\n    actionQueue.pending = last.next = newLast;\n  }\n}\n\nfunction runActionStateAction(actionQueue, setPendingState, setState, payload) {\n  const action = actionQueue.action;\n  const prevState = actionQueue.state; // This is a fork of startTransition\n\n  const prevTransition = ReactCurrentBatchConfig$3.transition;\n  const currentTransition = {\n    _callbacks: new Set()\n  };\n  ReactCurrentBatchConfig$3.transition = currentTransition;\n  // This will be reverted automatically when all actions are finished.\n\n\n  setPendingState(true);\n\n  try {\n    const returnValue = action(prevState, payload);\n\n    if (returnValue !== null && typeof returnValue === 'object' && // $FlowFixMe[method-unbinding]\n    typeof returnValue.then === 'function') {\n      const thenable = returnValue;\n      notifyTransitionCallbacks(currentTransition, thenable); // Attach a listener to read the return state of the action. As soon as\n      // this resolves, we can run the next action in the sequence.\n\n      thenable.then(nextState => {\n        actionQueue.state = nextState;\n        finishRunningActionStateAction(actionQueue, setPendingState, setState);\n      }, () => finishRunningActionStateAction(actionQueue, setPendingState, setState));\n      setState(thenable);\n    } else {\n      setState(returnValue);\n      const nextState = returnValue;\n      actionQueue.state = nextState;\n      finishRunningActionStateAction(actionQueue, setPendingState, setState);\n    }\n  } catch (error) {\n    // This is a trick to get the `useActionState` hook to rethrow the error.\n    // When it unwraps the thenable with the `use` algorithm, the error\n    // will be thrown.\n    const rejectedThenable = {\n      then() {},\n\n      status: 'rejected',\n      reason: error // $FlowFixMe: Not sure why this doesn't work\n\n    };\n    setState(rejectedThenable);\n    finishRunningActionStateAction(actionQueue, setPendingState, setState);\n  } finally {\n    ReactCurrentBatchConfig$3.transition = prevTransition;\n  }\n}\n\nfunction finishRunningActionStateAction(actionQueue, setPendingState, setState) {\n  // The action finished running. Pop it from the queue and run the next pending\n  // action, if there are any.\n  const last = actionQueue.pending;\n\n  if (last !== null) {\n    const first = last.next;\n\n    if (first === last) {\n      // This was the last action in the queue.\n      actionQueue.pending = null;\n    } else {\n      // Remove the first node from the circular queue.\n      const next = first.next;\n      last.next = next; // Run the next action.\n\n      runActionStateAction(actionQueue, setPendingState, setState, next.payload);\n    }\n  }\n}\n\nfunction actionStateReducer(oldState, newState) {\n  return newState;\n}\n\nfunction mountActionState(action, initialStateProp, permalink) {\n  let initialState = initialStateProp;\n\n  if (getIsHydrating()) {\n    const root = getWorkInProgressRoot();\n    const ssrFormState = root.formState; // If a formState option was passed to the root, there are form state\n    // markers that we need to hydrate. These indicate whether the form state\n    // matches this hook instance.\n\n    if (ssrFormState !== null) {\n      const isMatching = tryToClaimNextHydratableFormMarkerInstance();\n\n      if (isMatching) {\n        initialState = ssrFormState[0];\n      }\n    }\n  } // State hook. The state is stored in a thenable which is then unwrapped by\n  // the `use` algorithm during render.\n\n\n  const stateHook = mountWorkInProgressHook();\n  stateHook.memoizedState = stateHook.baseState = initialState; // TODO: Typing this \"correctly\" results in recursion limit errors\n  // const stateQueue: UpdateQueue<S | Awaited<S>, S | Awaited<S>> = {\n\n  const stateQueue = {\n    pending: null,\n    lanes: NoLanes,\n    dispatch: null,\n    lastRenderedReducer: actionStateReducer,\n    lastRenderedState: initialState\n  };\n  stateHook.queue = stateQueue;\n  const setState = dispatchSetState.bind(null, currentlyRenderingFiber$1, stateQueue);\n  stateQueue.dispatch = setState; // Pending state. This is used to store the pending state of the action.\n  // Tracked optimistically, like a transition pending state.\n\n  const pendingStateHook = mountStateImpl(false);\n  const setPendingState = dispatchOptimisticSetState.bind(null, currentlyRenderingFiber$1, false, pendingStateHook.queue); // Action queue hook. This is used to queue pending actions. The queue is\n  // shared between all instances of the hook. Similar to a regular state queue,\n  // but different because the actions are run sequentially, and they run in\n  // an event instead of during render.\n\n  const actionQueueHook = mountWorkInProgressHook();\n  const actionQueue = {\n    state: initialState,\n    dispatch: null,\n    // circular\n    action,\n    pending: null\n  };\n  actionQueueHook.queue = actionQueue;\n  const dispatch = dispatchActionState.bind(null, currentlyRenderingFiber$1, actionQueue, setPendingState, setState);\n  actionQueue.dispatch = dispatch; // Stash the action function on the memoized state of the hook. We'll use this\n  // to detect when the action function changes so we can update it in\n  // an effect.\n\n  actionQueueHook.memoizedState = action;\n  return [initialState, dispatch, false];\n}\n\nfunction updateActionState(action, initialState, permalink) {\n  const stateHook = updateWorkInProgressHook();\n  const currentStateHook = currentHook;\n  return updateActionStateImpl(stateHook, currentStateHook, action);\n}\n\nfunction updateActionStateImpl(stateHook, currentStateHook, action, initialState, permalink) {\n  const _updateReducerImpl = updateReducerImpl(stateHook, currentStateHook, actionStateReducer),\n        actionResult = _updateReducerImpl[0];\n\n  const _updateState = updateState(),\n        isPending = _updateState[0]; // This will suspend until the action finishes.\n\n\n  const state = typeof actionResult === 'object' && actionResult !== null && // $FlowFixMe[method-unbinding]\n  typeof actionResult.then === 'function' ? useThenable(actionResult) : actionResult;\n  const actionQueueHook = updateWorkInProgressHook();\n  const actionQueue = actionQueueHook.queue;\n  const dispatch = actionQueue.dispatch; // Check if a new action was passed. If so, update it in an effect.\n\n  const prevAction = actionQueueHook.memoizedState;\n\n  if (action !== prevAction) {\n    currentlyRenderingFiber$1.flags |= Passive$1;\n    pushEffect(HasEffect | Passive, actionStateActionEffect.bind(null, actionQueue, action), createEffectInstance(), null);\n  }\n\n  return [state, dispatch, isPending];\n}\n\nfunction actionStateActionEffect(actionQueue, action) {\n  actionQueue.action = action;\n}\n\nfunction rerenderActionState(action, initialState, permalink) {\n  // Unlike useState, useActionState doesn't support render phase updates.\n  // Also unlike useState, we need to replay all pending updates again in case\n  // the passthrough value changed.\n  //\n  // So instead of a forked re-render implementation that knows how to handle\n  // render phase udpates, we can use the same implementation as during a\n  // regular mount or update.\n  const stateHook = updateWorkInProgressHook();\n  const currentStateHook = currentHook;\n\n  if (currentStateHook !== null) {\n    // This is an update. Process the update queue.\n    return updateActionStateImpl(stateHook, currentStateHook, action);\n  }\n\n  updateWorkInProgressHook(); // State\n  // This is a mount. No updates to process.\n\n  const state = stateHook.memoizedState;\n  const actionQueueHook = updateWorkInProgressHook();\n  const actionQueue = actionQueueHook.queue;\n  const dispatch = actionQueue.dispatch; // This may have changed during the rerender.\n\n  actionQueueHook.memoizedState = action; // For mount, pending is always false.\n\n  return [state, dispatch, false];\n}\n\nfunction pushEffect(tag, create, inst, deps) {\n  const effect = {\n    tag,\n    create,\n    inst,\n    deps,\n    // Circular\n    next: null\n  };\n  let componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;\n\n  if (componentUpdateQueue === null) {\n    componentUpdateQueue = createFunctionComponentUpdateQueue();\n    currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;\n    componentUpdateQueue.lastEffect = effect.next = effect;\n  } else {\n    const lastEffect = componentUpdateQueue.lastEffect;\n\n    if (lastEffect === null) {\n      componentUpdateQueue.lastEffect = effect.next = effect;\n    } else {\n      const firstEffect = lastEffect.next;\n      lastEffect.next = effect;\n      effect.next = firstEffect;\n      componentUpdateQueue.lastEffect = effect;\n    }\n  }\n\n  return effect;\n}\n\nfunction createEffectInstance() {\n  return {\n    destroy: undefined\n  };\n}\n\nfunction mountRef(initialValue) {\n  const hook = mountWorkInProgressHook();\n\n  {\n    const ref = {\n      current: initialValue\n    };\n    hook.memoizedState = ref;\n    return ref;\n  }\n}\n\nfunction updateRef(initialValue) {\n  const hook = updateWorkInProgressHook();\n  return hook.memoizedState;\n}\n\nfunction mountEffectImpl(fiberFlags, hookFlags, create, deps) {\n  const hook = mountWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  currentlyRenderingFiber$1.flags |= fiberFlags;\n  hook.memoizedState = pushEffect(HasEffect | hookFlags, create, createEffectInstance(), nextDeps);\n}\n\nfunction updateEffectImpl(fiberFlags, hookFlags, create, deps) {\n  const hook = updateWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  const effect = hook.memoizedState;\n  const inst = effect.inst; // currentHook is null on initial mount when rerendering after a render phase\n  // state update or for strict mode.\n\n  if (currentHook !== null) {\n    if (nextDeps !== null) {\n      const prevEffect = currentHook.memoizedState;\n      const prevDeps = prevEffect.deps;\n\n      if (areHookInputsEqual(nextDeps, prevDeps)) {\n        hook.memoizedState = pushEffect(hookFlags, create, inst, nextDeps);\n        return;\n      }\n    }\n  }\n\n  currentlyRenderingFiber$1.flags |= fiberFlags;\n  hook.memoizedState = pushEffect(HasEffect | hookFlags, create, inst, nextDeps);\n}\n\nfunction mountEffect(create, deps) {\n  {\n    mountEffectImpl(Passive$1 | PassiveStatic, Passive, create, deps);\n  }\n}\n\nfunction updateEffect(create, deps) {\n  updateEffectImpl(Passive$1, Passive, create, deps);\n}\n\nfunction mountInsertionEffect(create, deps) {\n  mountEffectImpl(Update, Insertion, create, deps);\n}\n\nfunction updateInsertionEffect(create, deps) {\n  return updateEffectImpl(Update, Insertion, create, deps);\n}\n\nfunction mountLayoutEffect(create, deps) {\n  let fiberFlags = Update | LayoutStatic;\n\n  return mountEffectImpl(fiberFlags, Layout, create, deps);\n}\n\nfunction updateLayoutEffect(create, deps) {\n  return updateEffectImpl(Update, Layout, create, deps);\n}\n\nfunction imperativeHandleEffect(create, ref) {\n  if (typeof ref === 'function') {\n    const refCallback = ref;\n    const inst = create();\n    refCallback(inst);\n    return () => {\n      refCallback(null);\n    };\n  } else if (ref !== null && ref !== undefined) {\n    const refObject = ref;\n\n    const inst = create();\n    refObject.current = inst;\n    return () => {\n      refObject.current = null;\n    };\n  }\n}\n\nfunction mountImperativeHandle(ref, create, deps) {\n\n\n  const effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;\n  let fiberFlags = Update | LayoutStatic;\n\n  mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);\n}\n\nfunction updateImperativeHandle(ref, create, deps) {\n\n\n  const effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;\n  updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);\n}\n\nfunction mountDebugValue(value, formatterFn) {// This hook is normally a no-op.\n  // The react-debug-hooks package injects its own implementation\n  // so that e.g. DevTools can display custom hook values.\n}\n\nconst updateDebugValue = mountDebugValue;\n\nfunction mountCallback(callback, deps) {\n  const hook = mountWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  hook.memoizedState = [callback, nextDeps];\n  return callback;\n}\n\nfunction updateCallback(callback, deps) {\n  const hook = updateWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  const prevState = hook.memoizedState;\n\n  if (nextDeps !== null) {\n    const prevDeps = prevState[1];\n\n    if (areHookInputsEqual(nextDeps, prevDeps)) {\n      return prevState[0];\n    }\n  }\n\n  hook.memoizedState = [callback, nextDeps];\n  return callback;\n}\n\nfunction mountMemo(nextCreate, deps) {\n  const hook = mountWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  const nextValue = nextCreate();\n\n  if (shouldDoubleInvokeUserFnsInHooksDEV) {\n    setIsStrictModeForDevtools(true);\n    nextCreate();\n    setIsStrictModeForDevtools(false);\n  }\n\n  hook.memoizedState = [nextValue, nextDeps];\n  return nextValue;\n}\n\nfunction updateMemo(nextCreate, deps) {\n  const hook = updateWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  const prevState = hook.memoizedState; // Assume these are defined. If they're not, areHookInputsEqual will warn.\n\n  if (nextDeps !== null) {\n    const prevDeps = prevState[1];\n\n    if (areHookInputsEqual(nextDeps, prevDeps)) {\n      return prevState[0];\n    }\n  }\n\n  const nextValue = nextCreate();\n\n  if (shouldDoubleInvokeUserFnsInHooksDEV) {\n    setIsStrictModeForDevtools(true);\n    nextCreate();\n    setIsStrictModeForDevtools(false);\n  }\n\n  hook.memoizedState = [nextValue, nextDeps];\n  return nextValue;\n}\n\nfunction mountDeferredValue(value, initialValue) {\n  const hook = mountWorkInProgressHook();\n  return mountDeferredValueImpl(hook, value);\n}\n\nfunction updateDeferredValue(value, initialValue) {\n  const hook = updateWorkInProgressHook();\n  const resolvedCurrentHook = currentHook;\n  const prevValue = resolvedCurrentHook.memoizedState;\n  return updateDeferredValueImpl(hook, prevValue, value);\n}\n\nfunction rerenderDeferredValue(value, initialValue) {\n  const hook = updateWorkInProgressHook();\n\n  if (currentHook === null) {\n    // This is a rerender during a mount.\n    return mountDeferredValueImpl(hook, value);\n  } else {\n    // This is a rerender during an update.\n    const prevValue = currentHook.memoizedState;\n    return updateDeferredValueImpl(hook, prevValue, value);\n  }\n}\n\nfunction mountDeferredValueImpl(hook, value, initialValue) {\n  {\n    hook.memoizedState = value;\n    return value;\n  }\n}\n\nfunction updateDeferredValueImpl(hook, prevValue, value, initialValue) {\n  if (objectIs(value, prevValue)) {\n    // The incoming value is referentially identical to the currently rendered\n    // value, so we can bail out quickly.\n    return value;\n  } else {\n    // Received a new value that's different from the current value.\n    // Check if we're inside a hidden tree\n    if (isCurrentTreeHidden()) {\n      // Revealing a prerendered tree is considered the same as mounting new\n      // one, so we reuse the \"mount\" path in this case.\n      const resultValue = mountDeferredValueImpl(hook, value); // Unlike during an actual mount, we need to mark this as an update if\n      // the value changed.\n\n      if (!objectIs(resultValue, prevValue)) {\n        markWorkInProgressReceivedUpdate();\n      }\n\n      return resultValue;\n    }\n\n    const shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);\n\n    if (shouldDeferValue) {\n      // This is an urgent update. Since the value has changed, keep using the\n      // previous value and spawn a deferred render to update it later.\n      // Schedule a deferred render\n      const deferredLane = requestDeferredLane();\n      currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);\n      markSkippedUpdateLanes(deferredLane); // Reuse the previous value. We do not need to mark this as an update,\n      // because we did not render a new value.\n\n      return prevValue;\n    } else {\n      // This is not an urgent update, so we can use the latest value regardless\n      // of what it is. No need to defer it.\n      // Mark this as an update to prevent the fiber from bailing out.\n      markWorkInProgressReceivedUpdate();\n      hook.memoizedState = value;\n      return value;\n    }\n  }\n}\n\nfunction startTransition(fiber, queue, pendingState, finishedState, callback, options) {\n  const previousPriority = getCurrentUpdatePriority();\n  setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));\n  const prevTransition = ReactCurrentBatchConfig$3.transition;\n  const currentTransition = {\n    _callbacks: new Set()\n  };\n\n  {\n    // We don't really need to use an optimistic update here, because we\n    // schedule a second \"revert\" update below (which we use to suspend the\n    // transition until the async action scope has finished). But we'll use an\n    // optimistic update anyway to make it less likely the behavior accidentally\n    // diverges; for example, both an optimistic update and this one should\n    // share the same lane.\n    ReactCurrentBatchConfig$3.transition = currentTransition;\n    dispatchOptimisticSetState(fiber, false, queue, pendingState);\n  }\n\n  try {\n    if (enableAsyncActions) {\n      const returnValue = callback(); // Check if we're inside an async action scope. If so, we'll entangle\n      // this new action with the existing scope.\n      //\n      // If we're not already inside an async action scope, and this action is\n      // async, then we'll create a new async scope.\n      //\n      // In the async case, the resulting render will suspend until the async\n      // action scope has finished.\n\n      if (returnValue !== null && typeof returnValue === 'object' && typeof returnValue.then === 'function') {\n        const thenable = returnValue;\n        notifyTransitionCallbacks(currentTransition, thenable); // Create a thenable that resolves to `finishedState` once the async\n        // action has completed.\n\n        const thenableForFinishedState = chainThenableValue(thenable, finishedState);\n        dispatchSetState(fiber, queue, thenableForFinishedState);\n      } else {\n        dispatchSetState(fiber, queue, finishedState);\n      }\n    }\n  } catch (error) {\n    {\n      // This is a trick to get the `useTransition` hook to rethrow the error.\n      // When it unwraps the thenable with the `use` algorithm, the error\n      // will be thrown.\n      const rejectedThenable = {\n        then() {},\n\n        status: 'rejected',\n        reason: error\n      };\n      dispatchSetState(fiber, queue, rejectedThenable);\n    }\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig$3.transition = prevTransition;\n  }\n}\n\nfunction startHostTransition(formFiber, pendingState, callback, formData) {\n\n  if (formFiber.tag !== HostComponent) {\n    throw Error(formatProdErrorMessage(476));\n  }\n\n  let queue;\n\n  if (formFiber.memoizedState === null) {\n    // Upgrade this host component fiber to be stateful. We're going to pretend\n    // it was stateful all along so we can reuse most of the implementation\n    // for function components and useTransition.\n    //\n    // Create the state hook used by TransitionAwareHostComponent. This is\n    // essentially an inlined version of mountState.\n    const newQueue = {\n      pending: null,\n      lanes: NoLanes,\n      // We're going to cheat and intentionally not create a bound dispatch\n      // method, because we can call it directly in startTransition.\n      dispatch: null,\n      lastRenderedReducer: basicStateReducer,\n      lastRenderedState: NotPendingTransition\n    };\n    queue = newQueue;\n    const stateHook = {\n      memoizedState: NotPendingTransition,\n      baseState: NotPendingTransition,\n      baseQueue: null,\n      queue: newQueue,\n      next: null\n    }; // Add the state hook to both fiber alternates. The idea is that the fiber\n    // had this hook all along.\n\n    formFiber.memoizedState = stateHook;\n    const alternate = formFiber.alternate;\n\n    if (alternate !== null) {\n      alternate.memoizedState = stateHook;\n    }\n  } else {\n    // This fiber was already upgraded to be stateful.\n    const stateHook = formFiber.memoizedState;\n    queue = stateHook.queue;\n  }\n\n  startTransition(formFiber, queue, pendingState, NotPendingTransition, // TODO: We can avoid this extra wrapper, somehow. Figure out layering\n  // once more of this function is implemented.\n  () => callback(formData));\n}\n\nfunction mountTransition() {\n  const stateHook = mountStateImpl(false); // The `start` method never changes.\n\n  const start = startTransition.bind(null, currentlyRenderingFiber$1, stateHook.queue, true, false);\n  const hook = mountWorkInProgressHook();\n  hook.memoizedState = start;\n  return [false, start];\n}\n\nfunction updateTransition() {\n  const _updateState2 = updateState(),\n        booleanOrThenable = _updateState2[0];\n\n  const hook = updateWorkInProgressHook();\n  const start = hook.memoizedState;\n  const isPending = typeof booleanOrThenable === 'boolean' ? booleanOrThenable : // This will suspend until the async action scope has finished.\n  useThenable(booleanOrThenable);\n  return [isPending, start];\n}\n\nfunction rerenderTransition() {\n  const _rerenderState = rerenderState(),\n        booleanOrThenable = _rerenderState[0];\n\n  const hook = updateWorkInProgressHook();\n  const start = hook.memoizedState;\n  const isPending = typeof booleanOrThenable === 'boolean' ? booleanOrThenable : // This will suspend until the async action scope has finished.\n  useThenable(booleanOrThenable);\n  return [isPending, start];\n}\n\nfunction useHostTransitionStatus() {\n\n  const status = readContext(HostTransitionContext);\n  return status !== null ? status : NotPendingTransition;\n}\n\nfunction mountId() {\n  const hook = mountWorkInProgressHook();\n  const root = getWorkInProgressRoot(); // TODO: In Fizz, id generation is specific to each server config. Maybe we\n  // should do this in Fiber, too? Deferring this decision for now because\n  // there's no other place to store the prefix except for an internal field on\n  // the public createRoot object, which the fiber tree does not currently have\n  // a reference to.\n\n  const identifierPrefix = root.identifierPrefix;\n  let id;\n\n  if (getIsHydrating()) {\n    const treeId = getTreeId(); // Use a captial R prefix for server-generated ids.\n\n    id = ':' + identifierPrefix + 'R' + treeId; // Unless this is the first id at this level, append a number at the end\n    // that represents the position of this useId hook among all the useId\n    // hooks for this fiber.\n\n    const localId = localIdCounter++;\n\n    if (localId > 0) {\n      id += 'H' + localId.toString(32);\n    }\n\n    id += ':';\n  } else {\n    // Use a lowercase r prefix for client-generated ids.\n    const globalClientId = globalClientIdCounter++;\n    id = ':' + identifierPrefix + 'r' + globalClientId.toString(32) + ':';\n  }\n\n  hook.memoizedState = id;\n  return id;\n}\n\nfunction updateId() {\n  const hook = updateWorkInProgressHook();\n  const id = hook.memoizedState;\n  return id;\n}\n\nfunction mountRefresh() {\n  const hook = mountWorkInProgressHook();\n  const refresh = hook.memoizedState = refreshCache.bind(null, currentlyRenderingFiber$1);\n  return refresh;\n}\n\nfunction updateRefresh() {\n  const hook = updateWorkInProgressHook();\n  return hook.memoizedState;\n}\n\nfunction refreshCache(fiber, seedKey, seedValue) {\n  // TODO: Consider warning if the refresh is at discrete priority, or if we\n  // otherwise suspect that it wasn't batched properly.\n\n\n  let provider = fiber.return;\n\n  while (provider !== null) {\n    switch (provider.tag) {\n      case CacheComponent:\n      case HostRoot:\n        {\n          // Schedule an update on the cache boundary to trigger a refresh.\n          const lane = requestUpdateLane(provider);\n          const refreshUpdate = createUpdate(lane);\n          const root = enqueueUpdate(provider, refreshUpdate, lane);\n\n          if (root !== null) {\n            scheduleUpdateOnFiber(root, provider, lane);\n            entangleTransitions(root, provider, lane);\n          } // TODO: If a refresh never commits, the new cache created here must be\n          // released. A simple case is start refreshing a cache boundary, but then\n          // unmount that boundary before the refresh completes.\n\n\n          const seededCache = createCache();\n\n          const payload = {\n            cache: seededCache\n          };\n          refreshUpdate.payload = payload;\n          return;\n        }\n    }\n\n    provider = provider.return;\n  } // TODO: Warn if unmounted?\n\n}\n\nfunction dispatchReducerAction(fiber, queue, action) {\n\n  const lane = requestUpdateLane(fiber);\n  const update = {\n    lane,\n    revertLane: NoLane,\n    action,\n    hasEagerState: false,\n    eagerState: null,\n    next: null\n  };\n\n  if (isRenderPhaseUpdate(fiber)) {\n    enqueueRenderPhaseUpdate(queue, update);\n  } else {\n    const root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);\n\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, lane);\n      entangleTransitionUpdate(root, queue, lane);\n    }\n  }\n}\n\nfunction dispatchSetState(fiber, queue, action) {\n\n  const lane = requestUpdateLane(fiber);\n  const update = {\n    lane,\n    revertLane: NoLane,\n    action,\n    hasEagerState: false,\n    eagerState: null,\n    next: null\n  };\n\n  if (isRenderPhaseUpdate(fiber)) {\n    enqueueRenderPhaseUpdate(queue, update);\n  } else {\n    const alternate = fiber.alternate;\n\n    if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {\n      // The queue is currently empty, which means we can eagerly compute the\n      // next state before entering the render phase. If the new state is the\n      // same as the current state, we may be able to bail out entirely.\n      const lastRenderedReducer = queue.lastRenderedReducer;\n\n      if (lastRenderedReducer !== null) {\n\n        try {\n          const currentState = queue.lastRenderedState;\n          const eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute\n          // it, on the update object. If the reducer hasn't changed by the\n          // time we enter the render phase, then the eager state can be used\n          // without calling the reducer again.\n\n          update.hasEagerState = true;\n          update.eagerState = eagerState;\n\n          if (objectIs(eagerState, currentState)) {\n            // Fast path. We can bail out without scheduling React to re-render.\n            // It's still possible that we'll need to rebase this update later,\n            // if the component re-renders for a different reason and by that\n            // time the reducer has changed.\n            // TODO: Do we still need to entangle transitions in this case?\n            enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update);\n            return;\n          }\n        } catch (error) {// Suppress the error. It will throw again in the render phase.\n        } finally {\n        }\n      }\n    }\n\n    const root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);\n\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, lane);\n      entangleTransitionUpdate(root, queue, lane);\n    }\n  }\n}\n\nfunction dispatchOptimisticSetState(fiber, throwIfDuringRender, queue, action) {\n  requestCurrentTransition();\n\n  const update = {\n    // An optimistic update commits synchronously.\n    lane: SyncLane,\n    // After committing, the optimistic update is \"reverted\" using the same\n    // lane as the transition it's associated with.\n    revertLane: requestTransitionLane(),\n    action,\n    hasEagerState: false,\n    eagerState: null,\n    next: null\n  };\n\n  if (isRenderPhaseUpdate(fiber)) {\n    // When calling startTransition during render, this warns instead of\n    // throwing because throwing would be a breaking change. setOptimisticState\n    // is a new API so it's OK to throw.\n    if (throwIfDuringRender) {\n      throw Error(formatProdErrorMessage(479));\n    }\n  } else {\n    const root = enqueueConcurrentHookUpdate(fiber, queue, update, SyncLane);\n\n    if (root !== null) {\n      // NOTE: The optimistic update implementation assumes that the transition\n      // will never be attempted before the optimistic update. This currently\n      // holds because the optimistic update is always synchronous. If we ever\n      // change that, we'll need to account for this.\n      scheduleUpdateOnFiber(root, fiber, SyncLane); // Optimistic updates are always synchronous, so we don't need to call\n      // entangleTransitionUpdate here.\n    }\n  }\n}\n\nfunction isRenderPhaseUpdate(fiber) {\n  const alternate = fiber.alternate;\n  return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;\n}\n\nfunction enqueueRenderPhaseUpdate(queue, update) {\n  // This is a render phase update. Stash it in a lazily-created map of\n  // queue -> linked list of updates. After this render pass, we'll restart\n  // and apply the stashed updates on top of the work-in-progress hook.\n  didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;\n  const pending = queue.pending;\n\n  if (pending === null) {\n    // This is the first update. Create a circular list.\n    update.next = update;\n  } else {\n    update.next = pending.next;\n    pending.next = update;\n  }\n\n  queue.pending = update;\n} // TODO: Move to ReactFiberConcurrentUpdates?\n\n\nfunction entangleTransitionUpdate(root, queue, lane) {\n  if (isTransitionLane(lane)) {\n    let queueLanes = queue.lanes; // If any entangled lanes are no longer pending on the root, then they\n    // must have finished. We can remove them from the shared queue, which\n    // represents a superset of the actually pending lanes. In some cases we\n    // may entangle more than we need to, but that's OK. In fact it's worse if\n    // we *don't* entangle when we should.\n\n    queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.\n\n    const newQueueLanes = mergeLanes(queueLanes, lane);\n    queue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if\n    // the lane finished since the last time we entangled it. So we need to\n    // entangle it again, just to be sure.\n\n    markRootEntangled(root, newQueueLanes);\n  }\n}\n\nconst ContextOnlyDispatcher = {\n  readContext,\n  use,\n  useCallback: throwInvalidHookError,\n  useContext: throwInvalidHookError,\n  useEffect: throwInvalidHookError,\n  useImperativeHandle: throwInvalidHookError,\n  useLayoutEffect: throwInvalidHookError,\n  useInsertionEffect: throwInvalidHookError,\n  useMemo: throwInvalidHookError,\n  useReducer: throwInvalidHookError,\n  useRef: throwInvalidHookError,\n  useState: throwInvalidHookError,\n  useDebugValue: throwInvalidHookError,\n  useDeferredValue: throwInvalidHookError,\n  useTransition: throwInvalidHookError,\n  useSyncExternalStore: throwInvalidHookError,\n  useId: throwInvalidHookError\n};\n\n{\n  ContextOnlyDispatcher.useCacheRefresh = throwInvalidHookError;\n}\n\n{\n  ContextOnlyDispatcher.useHostTransitionStatus = throwInvalidHookError;\n  ContextOnlyDispatcher.useFormState = throwInvalidHookError;\n  ContextOnlyDispatcher.useActionState = throwInvalidHookError;\n}\n\n{\n  ContextOnlyDispatcher.useOptimistic = throwInvalidHookError;\n}\n\nconst HooksDispatcherOnMount = {\n  readContext,\n  use,\n  useCallback: mountCallback,\n  useContext: readContext,\n  useEffect: mountEffect,\n  useImperativeHandle: mountImperativeHandle,\n  useLayoutEffect: mountLayoutEffect,\n  useInsertionEffect: mountInsertionEffect,\n  useMemo: mountMemo,\n  useReducer: mountReducer,\n  useRef: mountRef,\n  useState: mountState,\n  useDebugValue: mountDebugValue,\n  useDeferredValue: mountDeferredValue,\n  useTransition: mountTransition,\n  useSyncExternalStore: mountSyncExternalStore,\n  useId: mountId\n};\n\n{\n  HooksDispatcherOnMount.useCacheRefresh = mountRefresh;\n}\n\n{\n  HooksDispatcherOnMount.useHostTransitionStatus = useHostTransitionStatus;\n  HooksDispatcherOnMount.useFormState = mountActionState;\n  HooksDispatcherOnMount.useActionState = mountActionState;\n}\n\n{\n  HooksDispatcherOnMount.useOptimistic = mountOptimistic;\n}\n\nconst HooksDispatcherOnUpdate = {\n  readContext,\n  use,\n  useCallback: updateCallback,\n  useContext: readContext,\n  useEffect: updateEffect,\n  useImperativeHandle: updateImperativeHandle,\n  useInsertionEffect: updateInsertionEffect,\n  useLayoutEffect: updateLayoutEffect,\n  useMemo: updateMemo,\n  useReducer: updateReducer,\n  useRef: updateRef,\n  useState: updateState,\n  useDebugValue: updateDebugValue,\n  useDeferredValue: updateDeferredValue,\n  useTransition: updateTransition,\n  useSyncExternalStore: updateSyncExternalStore,\n  useId: updateId\n};\n\n{\n  HooksDispatcherOnUpdate.useCacheRefresh = updateRefresh;\n}\n\n{\n  HooksDispatcherOnUpdate.useHostTransitionStatus = useHostTransitionStatus;\n  HooksDispatcherOnUpdate.useFormState = updateActionState;\n  HooksDispatcherOnUpdate.useActionState = updateActionState;\n}\n\n{\n  HooksDispatcherOnUpdate.useOptimistic = updateOptimistic;\n}\n\nconst HooksDispatcherOnRerender = {\n  readContext,\n  use,\n  useCallback: updateCallback,\n  useContext: readContext,\n  useEffect: updateEffect,\n  useImperativeHandle: updateImperativeHandle,\n  useInsertionEffect: updateInsertionEffect,\n  useLayoutEffect: updateLayoutEffect,\n  useMemo: updateMemo,\n  useReducer: rerenderReducer,\n  useRef: updateRef,\n  useState: rerenderState,\n  useDebugValue: updateDebugValue,\n  useDeferredValue: rerenderDeferredValue,\n  useTransition: rerenderTransition,\n  useSyncExternalStore: updateSyncExternalStore,\n  useId: updateId\n};\n\n{\n  HooksDispatcherOnRerender.useCacheRefresh = updateRefresh;\n}\n\n{\n  HooksDispatcherOnRerender.useHostTransitionStatus = useHostTransitionStatus;\n  HooksDispatcherOnRerender.useFormState = rerenderActionState;\n  HooksDispatcherOnRerender.useActionState = rerenderActionState;\n}\n\n{\n  HooksDispatcherOnRerender.useOptimistic = rerenderOptimistic;\n}\n\nfunction recordLayoutEffectDuration(fiber) {\n  {\n    return;\n  }\n}\n\nfunction startLayoutEffectTimer() {\n  {\n    return;\n  }\n}\n\nfunction resolveDefaultProps(Component, baseProps) {\n  if (Component && Component.defaultProps) {\n    // Resolve default props. Taken from ReactElement\n    const props = assign({}, baseProps);\n    const defaultProps = Component.defaultProps;\n\n    for (const propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n\n    return props;\n  }\n\n  return baseProps;\n}\n\nfunction applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {\n  const prevState = workInProgress.memoizedState;\n  let partialState = getDerivedStateFromProps(nextProps, prevState);\n\n\n  const memoizedState = partialState === null || partialState === undefined ? prevState : assign({}, prevState, partialState);\n  workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the\n  // base state.\n\n  if (workInProgress.lanes === NoLanes) {\n    // Queue is always non-null for classes\n    const updateQueue = workInProgress.updateQueue;\n    updateQueue.baseState = memoizedState;\n  }\n}\n\nconst classComponentUpdater = {\n  isMounted,\n\n  // $FlowFixMe[missing-local-annot]\n  enqueueSetState(inst, payload, callback) {\n    const fiber = get(inst);\n    const lane = requestUpdateLane(fiber);\n    const update = createUpdate(lane);\n    update.payload = payload;\n\n    if (callback !== undefined && callback !== null) {\n\n      update.callback = callback;\n    }\n\n    const root = enqueueUpdate(fiber, update, lane);\n\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, lane);\n      entangleTransitions(root, fiber, lane);\n    }\n  },\n\n  enqueueReplaceState(inst, payload, callback) {\n    const fiber = get(inst);\n    const lane = requestUpdateLane(fiber);\n    const update = createUpdate(lane);\n    update.tag = ReplaceState;\n    update.payload = payload;\n\n    if (callback !== undefined && callback !== null) {\n\n      update.callback = callback;\n    }\n\n    const root = enqueueUpdate(fiber, update, lane);\n\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, lane);\n      entangleTransitions(root, fiber, lane);\n    }\n  },\n\n  // $FlowFixMe[missing-local-annot]\n  enqueueForceUpdate(inst, callback) {\n    const fiber = get(inst);\n    const lane = requestUpdateLane(fiber);\n    const update = createUpdate(lane);\n    update.tag = ForceUpdate;\n\n    if (callback !== undefined && callback !== null) {\n\n      update.callback = callback;\n    }\n\n    const root = enqueueUpdate(fiber, update, lane);\n\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, lane);\n      entangleTransitions(root, fiber, lane);\n    }\n  }\n\n};\n\nfunction checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {\n  const instance = workInProgress.stateNode;\n\n  if (typeof instance.shouldComponentUpdate === 'function') {\n    let shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);\n\n    return shouldUpdate;\n  }\n\n  if (ctor.prototype && ctor.prototype.isPureReactComponent) {\n    return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);\n  }\n\n  return true;\n}\n\nfunction adoptClassInstance(workInProgress, instance) {\n  instance.updater = classComponentUpdater;\n  workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates\n\n  set(instance, workInProgress);\n}\n\nfunction constructClassInstance(workInProgress, ctor, props) {\n  let isLegacyContextConsumer = false;\n  let unmaskedContext = emptyContextObject;\n  let context = emptyContextObject;\n  const contextType = ctor.contextType;\n\n  if (typeof contextType === 'object' && contextType !== null) {\n    context = readContext(contextType);\n  } else {\n    unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    const contextTypes = ctor.contextTypes;\n    isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;\n    context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;\n  }\n\n  let instance = new ctor(props, context); // Instantiate twice to help detect side-effects.\n\n  workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;\n  adoptClassInstance(workInProgress, instance);\n  // ReactFiberContext usually updates this cache but can't for newly-created instances.\n\n\n  if (isLegacyContextConsumer) {\n    cacheContext(workInProgress, unmaskedContext, context);\n  }\n\n  return instance;\n}\n\nfunction callComponentWillMount(workInProgress, instance) {\n  const oldState = instance.state;\n\n  if (typeof instance.componentWillMount === 'function') {\n    instance.componentWillMount();\n  }\n\n  if (typeof instance.UNSAFE_componentWillMount === 'function') {\n    instance.UNSAFE_componentWillMount();\n  }\n\n  if (oldState !== instance.state) {\n\n    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n  }\n}\n\nfunction callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {\n  const oldState = instance.state;\n\n  if (typeof instance.componentWillReceiveProps === 'function') {\n    instance.componentWillReceiveProps(newProps, nextContext);\n  }\n\n  if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\n    instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);\n  }\n\n  if (instance.state !== oldState) {\n\n    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n  }\n} // Invokes the mount life-cycles on a previously never rendered instance.\n\n\nfunction mountClassInstance(workInProgress, ctor, newProps, renderLanes) {\n\n  const instance = workInProgress.stateNode;\n  instance.props = newProps;\n  instance.state = workInProgress.memoizedState;\n  instance.refs = {};\n  initializeUpdateQueue(workInProgress);\n  const contextType = ctor.contextType;\n\n  if (typeof contextType === 'object' && contextType !== null) {\n    instance.context = readContext(contextType);\n  } else {\n    const unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    instance.context = getMaskedContext(workInProgress, unmaskedContext);\n  }\n\n  instance.state = workInProgress.memoizedState;\n  const getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n\n  if (typeof getDerivedStateFromProps === 'function') {\n    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);\n    instance.state = workInProgress.memoizedState;\n  } // In order to support react-lifecycles-compat polyfilled components,\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\n\n\n  if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {\n    callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's\n    // process them now.\n\n    processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n    suspendIfUpdateReadFromEntangledAsyncAction();\n    instance.state = workInProgress.memoizedState;\n  }\n\n  if (typeof instance.componentDidMount === 'function') {\n    workInProgress.flags |= Update | LayoutStatic;\n  }\n}\n\nfunction resumeMountClassInstance(workInProgress, ctor, newProps, renderLanes) {\n  const instance = workInProgress.stateNode;\n  const oldProps = workInProgress.memoizedProps;\n  instance.props = oldProps;\n  const oldContext = instance.context;\n  const contextType = ctor.contextType;\n  let nextContext = emptyContextObject;\n\n  if (typeof contextType === 'object' && contextType !== null) {\n    nextContext = readContext(contextType);\n  } else {\n    const nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);\n  }\n\n  const getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n  const hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what\n  // ever the previously attempted to render - not the \"current\". However,\n  // during componentDidUpdate we pass the \"current\" props.\n  // In order to support react-lifecycles-compat polyfilled components,\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\n\n  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {\n    if (oldProps !== newProps || oldContext !== nextContext) {\n      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);\n    }\n  }\n\n  resetHasForceUpdateBeforeProcessing();\n  const oldState = workInProgress.memoizedState;\n  let newState = instance.state = oldState;\n  processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n  suspendIfUpdateReadFromEntangledAsyncAction();\n  newState = workInProgress.memoizedState;\n\n  if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidMount === 'function') {\n      workInProgress.flags |= Update | LayoutStatic;\n    }\n\n    return false;\n  }\n\n  if (typeof getDerivedStateFromProps === 'function') {\n    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);\n    newState = workInProgress.memoizedState;\n  }\n\n  const shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);\n\n  if (shouldUpdate) {\n    // In order to support react-lifecycles-compat polyfilled components,\n    // Unsafe lifecycles should not be invoked for components using the new APIs.\n    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {\n      if (typeof instance.componentWillMount === 'function') {\n        instance.componentWillMount();\n      }\n\n      if (typeof instance.UNSAFE_componentWillMount === 'function') {\n        instance.UNSAFE_componentWillMount();\n      }\n    }\n\n    if (typeof instance.componentDidMount === 'function') {\n      workInProgress.flags |= Update | LayoutStatic;\n    }\n  } else {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidMount === 'function') {\n      workInProgress.flags |= Update | LayoutStatic;\n    }\n    // memoized state to indicate that this work can be reused.\n\n\n    workInProgress.memoizedProps = newProps;\n    workInProgress.memoizedState = newState;\n  } // Update the existing instance's state, props, and context pointers even\n  // if shouldComponentUpdate returns false.\n\n\n  instance.props = newProps;\n  instance.state = newState;\n  instance.context = nextContext;\n  return shouldUpdate;\n} // Invokes the update life-cycles and returns false if it shouldn't rerender.\n\n\nfunction updateClassInstance(current, workInProgress, ctor, newProps, renderLanes) {\n  const instance = workInProgress.stateNode;\n  cloneUpdateQueue(current, workInProgress);\n  const unresolvedOldProps = workInProgress.memoizedProps;\n  const oldProps = workInProgress.type === workInProgress.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress.type, unresolvedOldProps);\n  instance.props = oldProps;\n  const unresolvedNewProps = workInProgress.pendingProps;\n  const oldContext = instance.context;\n  const contextType = ctor.contextType;\n  let nextContext = emptyContextObject;\n\n  if (typeof contextType === 'object' && contextType !== null) {\n    nextContext = readContext(contextType);\n  } else {\n    const nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);\n  }\n\n  const getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n  const hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what\n  // ever the previously attempted to render - not the \"current\". However,\n  // during componentDidUpdate we pass the \"current\" props.\n  // In order to support react-lifecycles-compat polyfilled components,\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\n\n  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {\n    if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {\n      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);\n    }\n  }\n\n  resetHasForceUpdateBeforeProcessing();\n  const oldState = workInProgress.memoizedState;\n  let newState = instance.state = oldState;\n  processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n  suspendIfUpdateReadFromEntangledAsyncAction();\n  newState = workInProgress.memoizedState;\n\n  if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !(enableLazyContextPropagation   )) {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidUpdate === 'function') {\n      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n        workInProgress.flags |= Update;\n      }\n    }\n\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n        workInProgress.flags |= Snapshot;\n      }\n    }\n\n    return false;\n  }\n\n  if (typeof getDerivedStateFromProps === 'function') {\n    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);\n    newState = workInProgress.memoizedState;\n  }\n\n  const shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,\n  // both before and after `shouldComponentUpdate` has been called. Not ideal,\n  // but I'm loath to refactor this function. This only happens for memoized\n  // components so it's not that common.\n  enableLazyContextPropagation   ;\n\n  if (shouldUpdate) {\n    // In order to support react-lifecycles-compat polyfilled components,\n    // Unsafe lifecycles should not be invoked for components using the new APIs.\n    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {\n      if (typeof instance.componentWillUpdate === 'function') {\n        instance.componentWillUpdate(newProps, newState, nextContext);\n      }\n\n      if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\n        instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);\n      }\n    }\n\n    if (typeof instance.componentDidUpdate === 'function') {\n      workInProgress.flags |= Update;\n    }\n\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n      workInProgress.flags |= Snapshot;\n    }\n  } else {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidUpdate === 'function') {\n      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n        workInProgress.flags |= Update;\n      }\n    }\n\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n        workInProgress.flags |= Snapshot;\n      }\n    } // If shouldComponentUpdate returned false, we should still update the\n    // memoized props/state to indicate that this work can be reused.\n\n\n    workInProgress.memoizedProps = newProps;\n    workInProgress.memoizedState = newState;\n  } // Update the existing instance's state, props, and context pointers even\n  // if shouldComponentUpdate returns false.\n\n\n  instance.props = newProps;\n  instance.state = newState;\n  instance.context = nextContext;\n  return shouldUpdate;\n}\n\nconst CapturedStacks = new WeakMap();\nfunction createCapturedValueAtFiber(value, source) {\n  // If the value is an error, call this function immediately after it is thrown\n  // so the stack is accurate.\n  let stack;\n\n  if (typeof value === 'object' && value !== null) {\n    const capturedStack = CapturedStacks.get(value);\n\n    if (typeof capturedStack === 'string') {\n      stack = capturedStack;\n    } else {\n      stack = getStackByFiberInDevAndProd(source);\n      CapturedStacks.set(value, stack);\n    }\n  } else {\n    stack = getStackByFiberInDevAndProd(source);\n  }\n\n  return {\n    value,\n    source,\n    stack,\n    digest: null\n  };\n}\nfunction createCapturedValueFromError(value, digest, stack) {\n  if (typeof stack === 'string') {\n    CapturedStacks.set(value, stack);\n  }\n\n  return {\n    value,\n    source: null,\n    stack: stack != null ? stack : null,\n    digest: digest != null ? digest : null\n  };\n}\n\nconst reportGlobalError = typeof reportError === 'function' ? // In modern browsers, reportError will dispatch an error event,\n// emulating an uncaught JavaScript error.\nreportError : error => {\n  if (typeof window === 'object' && typeof window.ErrorEvent === 'function') {\n    // Browser Polyfill\n    const message = typeof error === 'object' && error !== null && typeof error.message === 'string' ? // eslint-disable-next-line react-internal/safe-string-coercion\n    String(error.message) : // eslint-disable-next-line react-internal/safe-string-coercion\n    String(error);\n    const event = new window.ErrorEvent('error', {\n      bubbles: true,\n      cancelable: true,\n      message: message,\n      error: error\n    });\n    const shouldLog = window.dispatchEvent(event);\n\n    if (!shouldLog) {\n      return;\n    }\n  } else if (typeof process === 'object' && // $FlowFixMe[method-unbinding]\n  typeof process.emit === 'function') {\n    // Node Polyfill\n    process.emit('uncaughtException', error);\n    return;\n  } // eslint-disable-next-line react-internal/no-production-logging\n\n\n  console['error'](error);\n};\n\nconst ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue; // Side-channel since I'm not sure we want to make this part of the public API\n\nlet componentName = null;\nlet errorBoundaryName = null;\nfunction defaultOnUncaughtError(error, errorInfo) {\n  // Overriding this can silence these warnings e.g. for tests.\n  // See https://github.com/facebook/react/pull/13384\n  // For uncaught root errors we report them as uncaught to the browser's\n  // onerror callback. This won't have component stacks and the error addendum.\n  // So we add those into a separate console.warn.\n  reportGlobalError(error);\n}\nfunction defaultOnCaughtError(error, errorInfo) {\n  // Overriding this can silence these warnings e.g. for tests.\n  // See https://github.com/facebook/react/pull/13384\n  // Caught by error boundary\n  {\n    // In production, we print the error directly.\n    // This will include the message, the JS stack, and anything the browser wants to show.\n    // We pass the error object instead of custom message so that the browser displays the error natively.\n    console['error'](error); // Don't transform to our wrapper\n  }\n}\nfunction defaultOnRecoverableError(error, errorInfo) {\n  reportGlobalError(error);\n}\nfunction logUncaughtError(root, errorInfo) {\n  try {\n    if (false) ;\n\n    const error = errorInfo.value;\n\n    if (false && ReactCurrentActQueue$1.current !== null) ;\n\n    const onUncaughtError = root.onUncaughtError;\n    onUncaughtError(error, {\n      componentStack: errorInfo.stack\n    });\n  } catch (e) {\n    // This method must not throw, or React internal state will get messed up.\n    // If console.error is overridden, or logCapturedError() shows a dialog that throws,\n    // we want to report this error outside of the normal stack as a last resort.\n    // https://github.com/facebook/react/issues/13188\n    setTimeout(() => {\n      throw e;\n    });\n  }\n}\nfunction logCaughtError(root, boundary, errorInfo) {\n  try {\n    if (false) ;\n\n    const error = errorInfo.value;\n    const onCaughtError = root.onCaughtError;\n    onCaughtError(error, {\n      componentStack: errorInfo.stack,\n      errorBoundary: boundary.tag === ClassComponent ? boundary.stateNode // This should always be the case as long as we only have class boundaries\n      : null\n    });\n  } catch (e) {\n    // This method must not throw, or React internal state will get messed up.\n    // If console.error is overridden, or logCapturedError() shows a dialog that throws,\n    // we want to report this error outside of the normal stack as a last resort.\n    // https://github.com/facebook/react/issues/13188\n    setTimeout(() => {\n      throw e;\n    });\n  }\n}\n\nfunction createRootErrorUpdate(root, errorInfo, lane) {\n  const update = createUpdate(lane); // Unmount the root by rendering null.\n\n  update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property\n  // being called \"element\".\n\n  update.payload = {\n    element: null\n  };\n\n  update.callback = () => {\n    logUncaughtError(root, errorInfo);\n  };\n\n  return update;\n}\n\nfunction createClassErrorUpdate(lane) {\n  const update = createUpdate(lane);\n  update.tag = CaptureUpdate;\n  return update;\n}\n\nfunction initializeClassErrorUpdate(update, root, fiber, errorInfo) {\n  const getDerivedStateFromError = fiber.type.getDerivedStateFromError;\n\n  if (typeof getDerivedStateFromError === 'function') {\n    const error = errorInfo.value;\n\n    update.payload = () => {\n      return getDerivedStateFromError(error);\n    };\n\n    update.callback = () => {\n\n      logCaughtError(root, fiber, errorInfo);\n    };\n  }\n\n  const inst = fiber.stateNode;\n\n  if (inst !== null && typeof inst.componentDidCatch === 'function') {\n    // $FlowFixMe[missing-this-annot]\n    update.callback = function callback() {\n\n      logCaughtError(root, fiber, errorInfo);\n\n      if (typeof getDerivedStateFromError !== 'function') {\n        // To preserve the preexisting retry behavior of error boundaries,\n        // we keep track of which ones already failed during this batch.\n        // This gets reset before we yield back to the browser.\n        // TODO: Warn in strict mode if getDerivedStateFromError is\n        // not defined.\n        markLegacyErrorBoundaryAsFailed(this);\n      }\n\n      const error = errorInfo.value;\n      const stack = errorInfo.stack;\n      this.componentDidCatch(error, {\n        componentStack: stack !== null ? stack : ''\n      });\n    };\n  }\n}\n\nfunction resetSuspendedComponent(sourceFiber, rootRenderLanes) {\n  // A legacy mode Suspense quirk, only relevant to hook components.\n\n\n  const tag = sourceFiber.tag;\n\n  if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {\n    const currentSource = sourceFiber.alternate;\n\n    if (currentSource) {\n      sourceFiber.updateQueue = currentSource.updateQueue;\n      sourceFiber.memoizedState = currentSource.memoizedState;\n      sourceFiber.lanes = currentSource.lanes;\n    } else {\n      sourceFiber.updateQueue = null;\n      sourceFiber.memoizedState = null;\n    }\n  }\n}\n\nfunction markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes) {\n  // This marks a Suspense boundary so that when we're unwinding the stack,\n  // it captures the suspended \"exception\" and does a second (fallback) pass.\n  if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {\n    // Legacy Mode Suspense\n    //\n    // If the boundary is in legacy mode, we should *not*\n    // suspend the commit. Pretend as if the suspended component rendered\n    // null and keep rendering. When the Suspense boundary completes,\n    // we'll do a second pass to render the fallback.\n    if (suspenseBoundary === returnFiber) {\n      // Special case where we suspended while reconciling the children of\n      // a Suspense boundary's inner Offscreen wrapper fiber. This happens\n      // when a React.lazy component is a direct child of a\n      // Suspense boundary.\n      //\n      // Suspense boundaries are implemented as multiple fibers, but they\n      // are a single conceptual unit. The legacy mode behavior where we\n      // pretend the suspended fiber committed as `null` won't work,\n      // because in this case the \"suspended\" fiber is the inner\n      // Offscreen wrapper.\n      //\n      // Because the contents of the boundary haven't started rendering\n      // yet (i.e. nothing in the tree has partially rendered) we can\n      // switch to the regular, concurrent mode behavior: mark the\n      // boundary with ShouldCapture and enter the unwind phase.\n      suspenseBoundary.flags |= ShouldCapture;\n    } else {\n      suspenseBoundary.flags |= DidCapture;\n      sourceFiber.flags |= ForceUpdateForLegacySuspense; // We're going to commit this fiber even though it didn't complete.\n      // But we shouldn't call any lifecycle methods or callbacks. Remove\n      // all lifecycle effect tags.\n\n      sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);\n\n      if (sourceFiber.tag === ClassComponent) {\n        const currentSourceFiber = sourceFiber.alternate;\n\n        if (currentSourceFiber === null) {\n          // This is a new mount. Change the tag so it's not mistaken for a\n          // completed class component. For example, we should not call\n          // componentWillUnmount if it is deleted.\n          sourceFiber.tag = IncompleteClassComponent;\n        } else {\n          // When we try rendering again, we should not reuse the current fiber,\n          // since it's known to be in an inconsistent state. Use a force update to\n          // prevent a bail out.\n          const update = createUpdate(SyncLane);\n          update.tag = ForceUpdate;\n          enqueueUpdate(sourceFiber, update, SyncLane);\n        }\n      } // The source fiber did not complete. Mark it with Sync priority to\n      // indicate that it still has pending work.\n\n\n      sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);\n    }\n\n    return suspenseBoundary;\n  } // Confirmed that the boundary is in a concurrent mode tree. Continue\n  // with the normal suspend path.\n  //\n  // After this we'll use a set of heuristics to determine whether this\n  // render pass will run to completion or restart or \"suspend\" the commit.\n  // The actual logic for this is spread out in different places.\n  //\n  // This first principle is that if we're going to suspend when we complete\n  // a root, then we should also restart if we get an update or ping that\n  // might unsuspend it, and vice versa. The only reason to suspend is\n  // because you think you might want to restart before committing. However,\n  // it doesn't make sense to restart only while in the period we're suspended.\n  //\n  // Restarting too aggressively is also not good because it starves out any\n  // intermediate loading state. So we use heuristics to determine when.\n  // Suspense Heuristics\n  //\n  // If nothing threw a Promise or all the same fallbacks are already showing,\n  // then don't suspend/restart.\n  //\n  // If this is an initial render of a new tree of Suspense boundaries and\n  // those trigger a fallback, then don't suspend/restart. We want to ensure\n  // that we can show the initial loading state as quickly as possible.\n  //\n  // If we hit a \"Delayed\" case, such as when we'd switch from content back into\n  // a fallback, then we should always suspend/restart. Transitions apply\n  // to this case. If none is defined, JND is used instead.\n  //\n  // If we're already showing a fallback and it gets \"retried\", allowing us to show\n  // another level, but there's still an inner boundary that would show a fallback,\n  // then we suspend/restart for 500ms since the last time we showed a fallback\n  // anywhere in the tree. This effectively throttles progressive loading into a\n  // consistent train of commits. This also gives us an opportunity to restart to\n  // get to the completed state slightly earlier.\n  //\n  // If there's ambiguity due to batching it's resolved in preference of:\n  // 1) \"delayed\", 2) \"initial render\", 3) \"retry\".\n  //\n  // We want to ensure that a \"busy\" state doesn't get force committed. We want to\n  // ensure that new initial loading states can commit as soon as possible.\n\n\n  suspenseBoundary.flags |= ShouldCapture; // TODO: I think we can remove this, since we now use `DidCapture` in\n  // the begin phase to prevent an early bailout.\n\n  suspenseBoundary.lanes = rootRenderLanes;\n  return suspenseBoundary;\n}\n\nfunction throwException(root, returnFiber, sourceFiber, value, rootRenderLanes) {\n  // The source fiber did not complete.\n  sourceFiber.flags |= Incomplete;\n\n  if (value !== null && typeof value === 'object') {\n\n    if (typeof value.then === 'function') {\n      // This is a wakeable. The component suspended.\n      const wakeable = value;\n      resetSuspendedComponent(sourceFiber);\n\n\n      const suspenseBoundary = getSuspenseHandler();\n\n      if (suspenseBoundary !== null) {\n        switch (suspenseBoundary.tag) {\n          case SuspenseComponent:\n            {\n              // If this suspense boundary is not already showing a fallback, mark\n              // the in-progress render as suspended. We try to perform this logic\n              // as soon as soon as possible during the render phase, so the work\n              // loop can know things like whether it's OK to switch to other tasks,\n              // or whether it can wait for data to resolve before continuing.\n              // TODO: Most of these checks are already performed when entering a\n              // Suspense boundary. We should track the information on the stack so\n              // we don't have to recompute it on demand. This would also allow us\n              // to unify with `use` which needs to perform this logic even sooner,\n              // before `throwException` is called.\n              if (sourceFiber.mode & ConcurrentMode) {\n                if (getShellBoundary() === null) {\n                  // Suspended in the \"shell\" of the app. This is an undesirable\n                  // loading state. We should avoid committing this tree.\n                  renderDidSuspendDelayIfPossible();\n                } else {\n                  // If we suspended deeper than the shell, we don't need to delay\n                  // the commmit. However, we still call renderDidSuspend if this is\n                  // a new boundary, to tell the work loop that a new fallback has\n                  // appeared during this render.\n                  // TODO: Theoretically we should be able to delete this branch.\n                  // It's currently used for two things: 1) to throttle the\n                  // appearance of successive loading states, and 2) in\n                  // SuspenseList, to determine whether the children include any\n                  // pending fallbacks. For 1, we should apply throttling to all\n                  // retries, not just ones that render an additional fallback. For\n                  // 2, we should check subtreeFlags instead. Then we can delete\n                  // this branch.\n                  const current = suspenseBoundary.alternate;\n\n                  if (current === null) {\n                    renderDidSuspend();\n                  }\n                }\n              }\n\n              suspenseBoundary.flags &= ~ForceClientRender;\n              markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes); // Retry listener\n              //\n              // If the fallback does commit, we need to attach a different type of\n              // listener. This one schedules an update on the Suspense boundary to\n              // turn the fallback state off.\n              //\n              // Stash the wakeable on the boundary fiber so we can access it in the\n              // commit phase.\n              //\n              // When the wakeable resolves, we'll attempt to render the boundary\n              // again (\"retry\").\n              // Check if this is a Suspensey resource. We do not attach retry\n              // listeners to these, because we don't actually need them for\n              // rendering. Only for committing. Instead, if a fallback commits\n              // and the only thing that suspended was a Suspensey resource, we\n              // retry immediately.\n              // TODO: Refactor throwException so that we don't have to do this type\n              // check. The caller already knows what the cause was.\n\n              const isSuspenseyResource = wakeable === noopSuspenseyCommitThenable;\n\n              if (isSuspenseyResource) {\n                suspenseBoundary.flags |= ScheduleRetry;\n              } else {\n                const retryQueue = suspenseBoundary.updateQueue;\n\n                if (retryQueue === null) {\n                  suspenseBoundary.updateQueue = new Set([wakeable]);\n                } else {\n                  retryQueue.add(wakeable);\n                } // We only attach ping listeners in concurrent mode. Legacy\n                // Suspense always commits fallbacks synchronously, so there are\n                // no pings.\n\n\n                if (suspenseBoundary.mode & ConcurrentMode) {\n                  attachPingListener(root, wakeable, rootRenderLanes);\n                }\n              }\n\n              return false;\n            }\n\n          case OffscreenComponent:\n            {\n              if (suspenseBoundary.mode & ConcurrentMode) {\n                suspenseBoundary.flags |= ShouldCapture;\n                const isSuspenseyResource = wakeable === noopSuspenseyCommitThenable;\n\n                if (isSuspenseyResource) {\n                  suspenseBoundary.flags |= ScheduleRetry;\n                } else {\n                  const offscreenQueue = suspenseBoundary.updateQueue;\n\n                  if (offscreenQueue === null) {\n                    const newOffscreenQueue = {\n                      transitions: null,\n                      markerInstances: null,\n                      retryQueue: new Set([wakeable])\n                    };\n                    suspenseBoundary.updateQueue = newOffscreenQueue;\n                  } else {\n                    const retryQueue = offscreenQueue.retryQueue;\n\n                    if (retryQueue === null) {\n                      offscreenQueue.retryQueue = new Set([wakeable]);\n                    } else {\n                      retryQueue.add(wakeable);\n                    }\n                  }\n\n                  attachPingListener(root, wakeable, rootRenderLanes);\n                }\n\n                return false;\n              }\n            }\n        }\n\n        throw Error(formatProdErrorMessage(435, suspenseBoundary.tag));\n      } else {\n        // No boundary was found. Unless this is a sync update, this is OK.\n        // We can suspend and wait for more data to arrive.\n        if (root.tag === ConcurrentRoot) {\n          // In a concurrent root, suspending without a Suspense boundary is\n          // allowed. It will suspend indefinitely without committing.\n          //\n          // TODO: Should we have different behavior for discrete updates? What\n          // about flushSync? Maybe it should put the tree into an inert state,\n          // and potentially log a warning. Revisit this for a future release.\n          attachPingListener(root, wakeable, rootRenderLanes);\n          renderDidSuspendDelayIfPossible();\n          return false;\n        } else {\n          // In a legacy root, suspending without a boundary is always an error.\n          const uncaughtSuspenseError = Error(formatProdErrorMessage(426));\n          value = uncaughtSuspenseError;\n        }\n      }\n    }\n  } // This is a regular error, not a Suspense wakeable.\n\n\n  if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {\n    const suspenseBoundary = getSuspenseHandler(); // If the error was thrown during hydration, we may be able to recover by\n    // discarding the dehydrated content and switching to a client render.\n    // Instead of surfacing the error, find the nearest Suspense boundary\n    // and render it again without hydration.\n\n    if (suspenseBoundary !== null) {\n      if ((suspenseBoundary.flags & ShouldCapture) === NoFlags$1) {\n        // Set a flag to indicate that we should try rendering the normal\n        // children again, not the fallback.\n        suspenseBoundary.flags |= ForceClientRender;\n      }\n\n      markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes); // Even though the user may not be affected by this error, we should\n      // still log it so it can be fixed.\n\n      queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));\n      return false;\n    }\n  }\n\n  value = createCapturedValueAtFiber(value, sourceFiber);\n  renderDidError(value); // We didn't find a boundary that could handle this type of exception. Start\n  // over and traverse parent path again, this time treating the exception\n  // as an error.\n\n  if (returnFiber === null) {\n    // There's no return fiber, which means the root errored. This should never\n    // happen. Return `true` to trigger a fatal error (panic).\n    return true;\n  }\n\n  let workInProgress = returnFiber;\n\n  do {\n    switch (workInProgress.tag) {\n      case HostRoot:\n        {\n          const errorInfo = value;\n          workInProgress.flags |= ShouldCapture;\n          const lane = pickArbitraryLane(rootRenderLanes);\n          workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);\n          const update = createRootErrorUpdate(workInProgress.stateNode, errorInfo, lane);\n          enqueueCapturedUpdate(workInProgress, update);\n          return false;\n        }\n\n      case ClassComponent:\n        // Capture and retry\n        const errorInfo = value;\n        const ctor = workInProgress.type;\n        const instance = workInProgress.stateNode;\n\n        if ((workInProgress.flags & DidCapture) === NoFlags$1 && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {\n          workInProgress.flags |= ShouldCapture;\n          const lane = pickArbitraryLane(rootRenderLanes);\n          workInProgress.lanes = mergeLanes(workInProgress.lanes, lane); // Schedule the error boundary to re-render using updated state\n\n          const update = createClassErrorUpdate(lane);\n          initializeClassErrorUpdate(update, root, workInProgress, errorInfo);\n          enqueueCapturedUpdate(workInProgress, update);\n          return false;\n        }\n\n        break;\n    } // $FlowFixMe[incompatible-type] we bail out when we get a null\n\n\n    workInProgress = workInProgress.return;\n  } while (workInProgress !== null);\n\n  return false;\n}\n\nconst ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner; // A special exception that's used to unwind the stack when an update flows\n// into a dehydrated boundary.\n\nconst SelectiveHydrationException = Error(formatProdErrorMessage(461));\nlet didReceiveUpdate = false;\n\nfunction reconcileChildren(current, workInProgress, nextChildren, renderLanes) {\n  if (current === null) {\n    // If this is a fresh new component that hasn't been rendered yet, we\n    // won't update its child set by applying minimal side-effects. Instead,\n    // we will add them all to the child before it gets rendered. That means\n    // we can optimize this reconciliation pass by not tracking side-effects.\n    workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);\n  } else {\n    // If the current child is the same as the work in progress, it means that\n    // we haven't yet started any work on these children. Therefore, we use\n    // the clone algorithm to create a copy of all the current children.\n    // If we had any progressed work already, that is invalid at this point so\n    // let's throw it out.\n    workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes);\n  }\n}\n\nfunction forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes) {\n  // This function is fork of reconcileChildren. It's used in cases where we\n  // want to reconcile without matching against the existing set. This has the\n  // effect of all current children being unmounted; even if the type and key\n  // are the same, the old child is unmounted and a new child is created.\n  //\n  // To do this, we're going to go through the reconcile algorithm twice. In\n  // the first pass, we schedule a deletion for all the current children by\n  // passing null.\n  workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderLanes); // In the second pass, we mount the new children. The trick here is that we\n  // pass null in place of where we usually pass the current child set. This has\n  // the effect of remounting all children regardless of whether their\n  // identities match.\n\n  workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);\n}\n\nfunction updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {\n  // TODO: current can be non-null here even if the component\n  // hasn't yet mounted. This happens after the first render suspends.\n  // We'll need to figure out if this is fine or can cause issues.\n  const render = Component.render;\n  const ref = workInProgress.ref;\n  let propsWithoutRef;\n\n  {\n    propsWithoutRef = nextProps;\n  } // The rest is a fork of updateFunctionComponent\n\n\n  let nextChildren;\n  let hasId;\n  prepareToReadContext(workInProgress, renderLanes);\n\n  {\n    nextChildren = renderWithHooks(current, workInProgress, render, propsWithoutRef, ref, renderLanes);\n    hasId = checkDidRenderIdHook();\n  }\n\n  if (current !== null && !didReceiveUpdate) {\n    bailoutHooks(current, workInProgress, renderLanes);\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  if (getIsHydrating() && hasId) {\n    pushMaterializedTreeId(workInProgress);\n  } // React DevTools reads this flag.\n\n\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {\n  if (current === null) {\n    const type = Component.type;\n\n    if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.\n    Component.defaultProps === undefined) {\n      let resolvedType = type;\n      // and with only the default shallow comparison, we upgrade it\n      // to a SimpleMemoComponent to allow fast path updates.\n\n\n      workInProgress.tag = SimpleMemoComponent;\n      workInProgress.type = resolvedType;\n\n      return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, renderLanes);\n    }\n\n    const child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes);\n    child.ref = workInProgress.ref;\n    child.return = workInProgress;\n    workInProgress.child = child;\n    return child;\n  }\n\n  const currentChild = current.child; // This is always exactly one child\n\n  const hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);\n\n  if (!hasScheduledUpdateOrContext) {\n    // This will be the props with resolved defaultProps,\n    // unlike current.memoizedProps which will be the unresolved ones.\n    const prevProps = currentChild.memoizedProps; // Default to shallow comparison\n\n    let compare = Component.compare;\n    compare = compare !== null ? compare : shallowEqual;\n\n    if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {\n      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n    }\n  } // React DevTools reads this flag.\n\n\n  workInProgress.flags |= PerformedWork;\n  const newChild = createWorkInProgress(currentChild, nextProps);\n  newChild.ref = workInProgress.ref;\n  newChild.return = workInProgress;\n  workInProgress.child = newChild;\n  return newChild;\n}\n\nfunction updateSimpleMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {\n  // TODO: current can be non-null here even if the component\n  // hasn't yet mounted. This happens when the inner render suspends.\n  // We'll need to figure out if this is fine or can cause issues.\n  if (current !== null) {\n    const prevProps = current.memoizedProps;\n\n    if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref && ( // Prevent bailout if the implementation changed due to hot reload.\n    true)) {\n      didReceiveUpdate = false; // The props are shallowly equal. Reuse the previous props object, like we\n      // would during a normal fiber bailout.\n      //\n      // We don't have strong guarantees that the props object is referentially\n      // equal during updates where we can't bail out anyway — like if the props\n      // are shallowly equal, but there's a local state or context update in the\n      // same batch.\n      //\n      // However, as a principle, we should aim to make the behavior consistent\n      // across different ways of memoizing a component. For example, React.memo\n      // has a different internal Fiber layout if you pass a normal function\n      // component (SimpleMemoComponent) versus if you pass a different type\n      // like forwardRef (MemoComponent). But this is an implementation detail.\n      // Wrapping a component in forwardRef (or React.lazy, etc) shouldn't\n      // affect whether the props object is reused during a bailout.\n\n      workInProgress.pendingProps = nextProps = prevProps;\n\n      if (!checkScheduledUpdateOrContext(current, renderLanes)) {\n        // The pending lanes were cleared at the beginning of beginWork. We're\n        // about to bail out, but there might be other lanes that weren't\n        // included in the current render. Usually, the priority level of the\n        // remaining updates is accumulated during the evaluation of the\n        // component (i.e. when processing the update queue). But since since\n        // we're bailing out early *without* evaluating the component, we need\n        // to account for it here, too. Reset to the value of the current fiber.\n        // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,\n        // because a MemoComponent fiber does not have hooks or an update queue;\n        // rather, it wraps around an inner component, which may or may not\n        // contains hooks.\n        // TODO: Move the reset at in beginWork out of the common path so that\n        // this is no longer necessary.\n        workInProgress.lanes = current.lanes;\n        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n      } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags$1) {\n        // This is a special case that only exists for legacy mode.\n        // See https://github.com/facebook/react/pull/19216.\n        didReceiveUpdate = true;\n      }\n    }\n  }\n\n  return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes);\n}\n\nfunction updateOffscreenComponent(current, workInProgress, renderLanes) {\n  const nextProps = workInProgress.pendingProps;\n  const nextChildren = nextProps.children;\n  const nextIsDetached = (workInProgress.stateNode._pendingVisibility & OffscreenDetached) !== 0;\n  const prevState = current !== null ? current.memoizedState : null;\n  markRef(current, workInProgress);\n\n  if (nextProps.mode === 'hidden' || enableLegacyHidden  || nextIsDetached) {\n    // Rendering a hidden tree.\n    const didSuspend = (workInProgress.flags & DidCapture) !== NoFlags$1;\n\n    if (didSuspend) {\n      // Something suspended inside a hidden tree\n      // Include the base lanes from the last render\n      const nextBaseLanes = prevState !== null ? mergeLanes(prevState.baseLanes, renderLanes) : renderLanes;\n\n      if (current !== null) {\n        // Reset to the current children\n        let currentChild = workInProgress.child = current.child; // The current render suspended, but there may be other lanes with\n        // pending work. We can't read `childLanes` from the current Offscreen\n        // fiber because we reset it when it was deferred; however, we can read\n        // the pending lanes from the child fibers.\n\n        let currentChildLanes = NoLanes;\n\n        while (currentChild !== null) {\n          currentChildLanes = mergeLanes(mergeLanes(currentChildLanes, currentChild.lanes), currentChild.childLanes);\n          currentChild = currentChild.sibling;\n        }\n\n        const lanesWeJustAttempted = nextBaseLanes;\n        const remainingChildLanes = removeLanes(currentChildLanes, lanesWeJustAttempted);\n        workInProgress.childLanes = remainingChildLanes;\n      } else {\n        workInProgress.childLanes = NoLanes;\n        workInProgress.child = null;\n      }\n\n      return deferHiddenOffscreenComponent(current, workInProgress, nextBaseLanes);\n    }\n\n    if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n      // In legacy sync mode, don't defer the subtree. Render it now.\n      // TODO: Consider how Offscreen should work with transitions in the future\n      const nextState = {\n        baseLanes: NoLanes,\n        cachePool: null\n      };\n      workInProgress.memoizedState = nextState;\n\n      {\n        // push the cache pool even though we're going to bail out\n        // because otherwise there'd be a context mismatch\n        if (current !== null) {\n          pushTransition(workInProgress, null);\n        }\n      }\n\n      reuseHiddenContextOnStack();\n      pushOffscreenSuspenseHandler(workInProgress);\n    } else if (!includesSomeLane(renderLanes, OffscreenLane)) {\n      // We're hidden, and we're not rendering at Offscreen. We will bail out\n      // and resume this tree later.\n      // Schedule this fiber to re-render at Offscreen priority\n      workInProgress.lanes = workInProgress.childLanes = laneToLanes(OffscreenLane); // Include the base lanes from the last render\n\n      const nextBaseLanes = prevState !== null ? mergeLanes(prevState.baseLanes, renderLanes) : renderLanes;\n      return deferHiddenOffscreenComponent(current, workInProgress, nextBaseLanes);\n    } else {\n      // This is the second render. The surrounding visible content has already\n      // committed. Now we resume rendering the hidden tree.\n      // Rendering at offscreen, so we can clear the base lanes.\n      const nextState = {\n        baseLanes: NoLanes,\n        cachePool: null\n      };\n      workInProgress.memoizedState = nextState;\n\n      if (current !== null) {\n        // If the render that spawned this one accessed the cache pool, resume\n        // using the same cache. Unless the parent changed, since that means\n        // there was a refresh.\n        const prevCachePool = prevState !== null ? prevState.cachePool : null; // TODO: Consider if and how Offscreen pre-rendering should\n        // be attributed to the transition that spawned it\n\n        pushTransition(workInProgress, prevCachePool);\n      } // Push the lanes that were skipped when we bailed out.\n\n\n      if (prevState !== null) {\n        pushHiddenContext(workInProgress, prevState);\n      } else {\n        reuseHiddenContextOnStack();\n      }\n\n      pushOffscreenSuspenseHandler(workInProgress);\n    }\n  } else {\n    // Rendering a visible tree.\n    if (prevState !== null) {\n      // We're going from hidden -> visible.\n      let prevCachePool = null;\n\n      {\n        // If the render that spawned this one accessed the cache pool, resume\n        // using the same cache. Unless the parent changed, since that means\n        // there was a refresh.\n        prevCachePool = prevState.cachePool;\n      }\n\n      pushTransition(workInProgress, prevCachePool); // Push the lanes that were skipped when we bailed out.\n\n      pushHiddenContext(workInProgress, prevState);\n      reuseSuspenseHandlerOnStack(workInProgress); // Since we're not hidden anymore, reset the state\n\n      workInProgress.memoizedState = null;\n    } else {\n      // We weren't previously hidden, and we still aren't, so there's nothing\n      // special to do. Need to push to the stack regardless, though, to avoid\n      // a push/pop misalignment.\n      {\n        // If the render that spawned this one accessed the cache pool, resume\n        // using the same cache. Unless the parent changed, since that means\n        // there was a refresh.\n        if (current !== null) {\n          pushTransition(workInProgress, null);\n        }\n      } // We're about to bail out, but we need to push this to the stack anyway\n      // to avoid a push/pop misalignment.\n\n\n      reuseHiddenContextOnStack();\n      reuseSuspenseHandlerOnStack(workInProgress);\n    }\n  }\n\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction deferHiddenOffscreenComponent(current, workInProgress, nextBaseLanes, renderLanes) {\n  const nextState = {\n    baseLanes: nextBaseLanes,\n    // Save the cache pool so we can resume later.\n    cachePool: getOffscreenDeferredCache() \n  };\n  workInProgress.memoizedState = nextState;\n\n  {\n    // push the cache pool even though we're going to bail out\n    // because otherwise there'd be a context mismatch\n    if (current !== null) {\n      pushTransition(workInProgress, null);\n    }\n  } // We're about to bail out, but we need to push this to the stack anyway\n  // to avoid a push/pop misalignment.\n\n\n  reuseHiddenContextOnStack();\n  pushOffscreenSuspenseHandler(workInProgress);\n\n  return null;\n} // Note: These happen to have identical begin phases, for now. We shouldn't hold\n\nfunction updateCacheComponent(current, workInProgress, renderLanes) {\n\n  prepareToReadContext(workInProgress, renderLanes);\n  const parentCache = readContext(CacheContext);\n\n  if (current === null) {\n    // Initial mount. Request a fresh cache from the pool.\n    const freshCache = requestCacheFromPool(renderLanes);\n    const initialState = {\n      parent: parentCache,\n      cache: freshCache\n    };\n    workInProgress.memoizedState = initialState;\n    initializeUpdateQueue(workInProgress);\n    pushCacheProvider(workInProgress, freshCache);\n  } else {\n    // Check for updates\n    if (includesSomeLane(current.lanes, renderLanes)) {\n      cloneUpdateQueue(current, workInProgress);\n      processUpdateQueue(workInProgress, null, null, renderLanes);\n      suspendIfUpdateReadFromEntangledAsyncAction();\n    }\n\n    const prevState = current.memoizedState;\n    const nextState = workInProgress.memoizedState; // Compare the new parent cache to the previous to see detect there was\n    // a refresh.\n\n    if (prevState.parent !== parentCache) {\n      // Refresh in parent. Update the parent.\n      const derivedState = {\n        parent: parentCache,\n        cache: parentCache\n      }; // Copied from getDerivedStateFromProps implementation. Once the update\n      // queue is empty, persist the derived state onto the base state.\n\n      workInProgress.memoizedState = derivedState;\n\n      if (workInProgress.lanes === NoLanes) {\n        const updateQueue = workInProgress.updateQueue;\n        workInProgress.memoizedState = updateQueue.baseState = derivedState;\n      }\n\n      pushCacheProvider(workInProgress, parentCache); // No need to propagate a context change because the refreshed parent\n      // already did.\n    } else {\n      // The parent didn't refresh. Now check if this cache did.\n      const nextCache = nextState.cache;\n      pushCacheProvider(workInProgress, nextCache);\n\n      if (nextCache !== prevState.cache) {\n        // This cache refreshed. Propagate a context change.\n        propagateContextChange(workInProgress, CacheContext, renderLanes);\n      }\n    }\n  }\n\n  const nextChildren = workInProgress.pendingProps.children;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n} // This should only be called if the name changes\n\nfunction updateFragment(current, workInProgress, renderLanes) {\n  const nextChildren = workInProgress.pendingProps;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateMode(current, workInProgress, renderLanes) {\n  const nextChildren = workInProgress.pendingProps.children;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateProfiler(current, workInProgress, renderLanes) {\n\n  const nextProps = workInProgress.pendingProps;\n  const nextChildren = nextProps.children;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction markRef(current, workInProgress) {\n  // TODO: Check props.ref instead of fiber.ref when enableRefAsProp is on.\n  const ref = workInProgress.ref;\n\n  if (ref === null) {\n    if (current !== null && current.ref !== null) {\n      // Schedule a Ref effect\n      workInProgress.flags |= Ref | RefStatic;\n    }\n  } else {\n    if (typeof ref !== 'function' && typeof ref !== 'object') {\n      throw Error(formatProdErrorMessage(284));\n    }\n\n    if (current === null || current.ref !== ref) {\n      // Schedule a Ref effect\n      workInProgress.flags |= Ref | RefStatic;\n    }\n  }\n}\n\nfunction updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) {\n  let context;\n\n  {\n    const unmaskedContext = getUnmaskedContext(workInProgress, Component, true);\n    context = getMaskedContext(workInProgress, unmaskedContext);\n  }\n\n  let nextChildren;\n  let hasId;\n  prepareToReadContext(workInProgress, renderLanes);\n\n  {\n    nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);\n    hasId = checkDidRenderIdHook();\n  }\n\n  if (current !== null && !didReceiveUpdate) {\n    bailoutHooks(current, workInProgress, renderLanes);\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  if (getIsHydrating() && hasId) {\n    pushMaterializedTreeId(workInProgress);\n  } // React DevTools reads this flag.\n\n\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction replayFunctionComponent(current, workInProgress, nextProps, Component, secondArg, renderLanes) {\n  // This function is used to replay a component that previously suspended,\n  // after its data resolves. It's a simplified version of\n  // updateFunctionComponent that reuses the hooks from the previous attempt.\n  prepareToReadContext(workInProgress, renderLanes);\n\n  const nextChildren = replaySuspendedComponentWithHooks(current, workInProgress, Component, nextProps, secondArg);\n  const hasId = checkDidRenderIdHook();\n\n  if (current !== null && !didReceiveUpdate) {\n    bailoutHooks(current, workInProgress, renderLanes);\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  if (getIsHydrating() && hasId) {\n    pushMaterializedTreeId(workInProgress);\n  } // React DevTools reads this flag.\n\n\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateClassComponent(current, workInProgress, Component, nextProps, renderLanes) {\n  // During mounting we don't know the child context yet as the instance doesn't exist.\n  // We will invalidate the child context in finishClassComponent() right after rendering.\n\n\n  let hasContext;\n\n  if (isContextProvider(Component)) {\n    hasContext = true;\n    pushContextProvider(workInProgress);\n  } else {\n    hasContext = false;\n  }\n\n  prepareToReadContext(workInProgress, renderLanes);\n  const instance = workInProgress.stateNode;\n  let shouldUpdate;\n\n  if (instance === null) {\n    resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress); // In the initial pass we might need to construct the instance.\n\n    constructClassInstance(workInProgress, Component, nextProps);\n    mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n    shouldUpdate = true;\n  } else if (current === null) {\n    // In a resume, we'll already have an instance we can reuse.\n    shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderLanes);\n  } else {\n    shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderLanes);\n  }\n\n  const nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes);\n\n  return nextUnitOfWork;\n}\n\nfunction finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes) {\n  // Refs should update even if shouldComponentUpdate returns false\n  markRef(current, workInProgress);\n  const didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags$1;\n\n  if (!shouldUpdate && !didCaptureError) {\n    // Context providers should defer to sCU for rendering\n    if (hasContext) {\n      invalidateContextProvider(workInProgress, Component, false);\n    }\n\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  const instance = workInProgress.stateNode; // Rerender\n\n  ReactCurrentOwner$1.current = workInProgress;\n  let nextChildren;\n\n  if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {\n    // If we captured an error, but getDerivedStateFromError is not defined,\n    // unmount all the children. componentDidCatch will schedule an update to\n    // re-render a fallback. This is temporary until we migrate everyone to\n    // the new API.\n    // TODO: Warn in a future release.\n    nextChildren = null;\n  } else {\n\n    {\n      nextChildren = instance.render();\n    }\n  } // React DevTools reads this flag.\n\n\n  workInProgress.flags |= PerformedWork;\n\n  if (current !== null && didCaptureError) {\n    // If we're recovering from an error, reconcile without reusing any of\n    // the existing children. Conceptually, the normal children and the children\n    // that are shown on error are two different sets, so we shouldn't reuse\n    // normal children even if their identities match.\n    forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes);\n  } else {\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  } // Memoize state using the values we just used to render.\n  // TODO: Restructure so we never read values from the instance.\n\n\n  workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.\n\n  if (hasContext) {\n    invalidateContextProvider(workInProgress, Component, true);\n  }\n\n  return workInProgress.child;\n}\n\nfunction pushHostRootContext(workInProgress) {\n  const root = workInProgress.stateNode;\n\n  if (root.pendingContext) {\n    pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);\n  } else if (root.context) {\n    // Should always be set\n    pushTopLevelContextObject(workInProgress, root.context, false);\n  }\n\n  pushHostContainer(workInProgress, root.containerInfo);\n}\n\nfunction updateHostRoot(current, workInProgress, renderLanes) {\n  pushHostRootContext(workInProgress);\n\n  if (current === null) {\n    throw Error(formatProdErrorMessage(387));\n  }\n\n  const nextProps = workInProgress.pendingProps;\n  const prevState = workInProgress.memoizedState;\n  const prevChildren = prevState.element;\n  cloneUpdateQueue(current, workInProgress);\n  processUpdateQueue(workInProgress, nextProps, null, renderLanes);\n  const nextState = workInProgress.memoizedState;\n\n  {\n    const nextCache = nextState.cache;\n    pushCacheProvider(workInProgress, nextCache);\n\n    if (nextCache !== prevState.cache) {\n      // The root cache refreshed.\n      propagateContextChange(workInProgress, CacheContext, renderLanes);\n    }\n  } // This would ideally go inside processUpdateQueue, but because it suspends,\n  // it needs to happen after the `pushCacheProvider` call above to avoid a\n  // context stack mismatch. A bit unfortunate.\n\n\n  suspendIfUpdateReadFromEntangledAsyncAction(); // Caution: React DevTools currently depends on this property\n  // being called \"element\".\n\n  const nextChildren = nextState.element;\n\n  if (prevState.isDehydrated) {\n    // This is a hydration root whose shell has not yet hydrated. We should\n    // attempt to hydrate.\n    // Flip isDehydrated to false to indicate that when this render\n    // finishes, the root will no longer be dehydrated.\n    const overrideState = {\n      element: nextChildren,\n      isDehydrated: false,\n      cache: nextState.cache\n    };\n    const updateQueue = workInProgress.updateQueue; // `baseState` can always be the last state because the root doesn't\n    // have reducer functions so it doesn't need rebasing.\n\n    updateQueue.baseState = overrideState;\n    workInProgress.memoizedState = overrideState;\n\n    if (workInProgress.flags & ForceClientRender) {\n      // Something errored during a previous attempt to hydrate the shell, so we\n      // forced a client render.\n      const recoverableError = createCapturedValueAtFiber(Error(formatProdErrorMessage(423)), workInProgress);\n      return mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, recoverableError);\n    } else if (nextChildren !== prevChildren) {\n      const recoverableError = createCapturedValueAtFiber(Error(formatProdErrorMessage(424)), workInProgress);\n      return mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, recoverableError);\n    } else {\n      // The outermost shell has not hydrated yet. Start hydrating.\n      enterHydrationState(workInProgress);\n      const child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);\n      workInProgress.child = child;\n      let node = child;\n\n      while (node) {\n        // Mark each child as hydrating. This is a fast path to know whether this\n        // tree is part of a hydrating tree. This is used to determine if a child\n        // node has fully mounted yet, and for scheduling event replaying.\n        // Conceptually this is similar to Placement in that a new subtree is\n        // inserted into the React tree here. It just happens to not need DOM\n        // mutations because it already exists.\n        node.flags = node.flags & ~Placement | Hydrating;\n        node = node.sibling;\n      }\n    }\n  } else {\n    // Root is not dehydrated. Either this is a client-only root, or it\n    // already hydrated.\n    resetHydrationState();\n\n    if (nextChildren === prevChildren) {\n      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n    }\n\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  }\n\n  return workInProgress.child;\n}\n\nfunction mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, recoverableError) {\n  // Revert to client rendering.\n  resetHydrationState();\n  queueHydrationError(recoverableError);\n  workInProgress.flags |= ForceClientRender;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateHostComponent$1(current, workInProgress, renderLanes) {\n  if (current === null) {\n    tryToClaimNextHydratableInstance(workInProgress);\n  }\n\n  pushHostContext(workInProgress);\n  const type = workInProgress.type;\n  const nextProps = workInProgress.pendingProps;\n  const prevProps = current !== null ? current.memoizedProps : null;\n  let nextChildren = nextProps.children;\n  const isDirectTextChild = shouldSetTextContent(type, nextProps);\n\n  if (isDirectTextChild) {\n    // We special case a direct text child of a host node. This is a common\n    // case. We won't handle it as a reified child. We will instead handle\n    // this in the host environment that also has access to this prop. That\n    // avoids allocating another HostText fiber and traversing it.\n    nextChildren = null;\n  } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {\n    // If we're switching from a direct text child to a normal child, or to\n    // empty, we need to schedule the text content to be reset.\n    workInProgress.flags |= ContentReset;\n  }\n\n  {\n    const memoizedState = workInProgress.memoizedState;\n\n    if (memoizedState !== null) {\n      // This fiber has been upgraded to a stateful component. The only way\n      // happens currently is for form actions. We use hooks to track the\n      // pending and error state of the form.\n      //\n      // Once a fiber is upgraded to be stateful, it remains stateful for the\n      // rest of its lifetime.\n      const newState = renderTransitionAwareHostComponentWithHooks(current, workInProgress, renderLanes); // If the transition state changed, propagate the change to all the\n      // descendents. We use Context as an implementation detail for this.\n      //\n      // This is intentionally set here instead of pushHostContext because\n      // pushHostContext gets called before we process the state hook, to avoid\n      // a state mismatch in the event that something suspends.\n      //\n      // NOTE: This assumes that there cannot be nested transition providers,\n      // because the only renderer that implements this feature is React DOM,\n      // and forms cannot be nested. If we did support nested providers, then\n      // we would need to push a context value even for host fibers that\n      // haven't been upgraded yet.\n\n      {\n        HostTransitionContext._currentValue = newState;\n      }\n\n      {\n        if (didReceiveUpdate) {\n          if (current !== null) {\n            const oldStateHook = current.memoizedState;\n            const oldState = oldStateHook.memoizedState; // This uses regular equality instead of Object.is because we assume\n            // that host transition state doesn't include NaN as a valid type.\n\n            if (oldState !== newState) {\n              propagateContextChange(workInProgress, HostTransitionContext, renderLanes);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  markRef(current, workInProgress);\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateHostHoistable(current, workInProgress, renderLanes) {\n  markRef(current, workInProgress);\n  const currentProps = current === null ? null : current.memoizedProps;\n  const resource = workInProgress.memoizedState = getResource(workInProgress.type, currentProps, workInProgress.pendingProps);\n\n  if (current === null) {\n    if (!getIsHydrating() && resource === null) {\n      // This is not a Resource Hoistable and we aren't hydrating so we construct the instance.\n      workInProgress.stateNode = createHoistableInstance(workInProgress.type, workInProgress.pendingProps, getRootHostContainer(), workInProgress);\n    }\n  } // Resources never have reconciler managed children. It is possible for\n  // the host implementation of getResource to consider children in the\n  // resource construction but they will otherwise be discarded. In practice\n  // this precludes all but the simplest children and Host specific warnings\n  // should be implemented to warn when children are passsed when otherwise not\n  // expected\n\n\n  return null;\n}\n\nfunction updateHostSingleton(current, workInProgress, renderLanes) {\n  pushHostContext(workInProgress);\n\n  if (current === null) {\n    claimHydratableSingleton(workInProgress);\n  }\n\n  const nextChildren = workInProgress.pendingProps.children;\n\n  if (current === null && !getIsHydrating()) {\n    // Similar to Portals we append Singleton children in the commit phase. So we\n    // Track insertions even on mount.\n    // TODO: Consider unifying this with how the root works.\n    workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);\n  } else {\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  }\n\n  markRef(current, workInProgress);\n  return workInProgress.child;\n}\n\nfunction updateHostText$1(current, workInProgress) {\n  if (current === null) {\n    tryToClaimNextHydratableTextInstance(workInProgress);\n  } // Nothing to do here. This is terminal. We'll do the completion step\n  // immediately after.\n\n\n  return null;\n}\n\nfunction mountLazyComponent(_current, workInProgress, elementType, renderLanes) {\n  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);\n  const props = workInProgress.pendingProps;\n  const lazyComponent = elementType;\n  const payload = lazyComponent._payload;\n  const init = lazyComponent._init;\n  let Component = init(payload); // Store the unwrapped component in the type.\n\n  workInProgress.type = Component;\n  const resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);\n  const resolvedProps = resolveDefaultProps(Component, props);\n  let child;\n\n  switch (resolvedTag) {\n    case FunctionComponent:\n      {\n\n        child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderLanes);\n        return child;\n      }\n\n    case ClassComponent:\n      {\n\n        child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderLanes);\n        return child;\n      }\n\n    case ForwardRef:\n      {\n\n        child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderLanes);\n        return child;\n      }\n\n    case MemoComponent:\n      {\n        child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too\n        renderLanes);\n        return child;\n      }\n  }\n\n  let hint = '';\n  // because the fact that it's a separate type of work is an\n  // implementation detail.\n\n\n  throw Error(formatProdErrorMessage(306, Component, hint));\n}\n\nfunction mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderLanes) {\n  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress); // Promote the fiber to a class and try rendering again.\n\n  workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`\n  // Push context providers early to prevent context stack mismatches.\n  // During mounting we don't know the child context yet as the instance doesn't exist.\n  // We will invalidate the child context in finishClassComponent() right after rendering.\n\n  let hasContext;\n\n  if (isContextProvider(Component)) {\n    hasContext = true;\n    pushContextProvider(workInProgress);\n  } else {\n    hasContext = false;\n  }\n\n  prepareToReadContext(workInProgress, renderLanes);\n  constructClassInstance(workInProgress, Component, nextProps);\n  mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n  return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);\n}\n\nfunction mountIndeterminateComponent(_current, workInProgress, Component, renderLanes) {\n  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);\n  const props = workInProgress.pendingProps;\n  let context;\n\n  {\n    const unmaskedContext = getUnmaskedContext(workInProgress, Component, false);\n    context = getMaskedContext(workInProgress, unmaskedContext);\n  }\n\n  prepareToReadContext(workInProgress, renderLanes);\n  let value;\n  let hasId;\n\n  {\n    value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);\n    hasId = checkDidRenderIdHook();\n  }\n\n\n  workInProgress.flags |= PerformedWork;\n\n\n  workInProgress.tag = FunctionComponent;\n\n  if (getIsHydrating() && hasId) {\n    pushMaterializedTreeId(workInProgress);\n  }\n\n  reconcileChildren(null, workInProgress, value, renderLanes);\n\n  return workInProgress.child;\n}\n\nconst SUSPENDED_MARKER = {\n  dehydrated: null,\n  treeContext: null,\n  retryLane: NoLane\n};\n\nfunction mountSuspenseOffscreenState(renderLanes) {\n  return {\n    baseLanes: renderLanes,\n    cachePool: getSuspendedCache()\n  };\n}\n\nfunction updateSuspenseOffscreenState(prevOffscreenState, renderLanes) {\n  let cachePool = null;\n\n  {\n    const prevCachePool = prevOffscreenState.cachePool;\n\n    if (prevCachePool !== null) {\n      const parentCache = CacheContext._currentValue ;\n\n      if (prevCachePool.parent !== parentCache) {\n        // Detected a refresh in the parent. This overrides any previously\n        // suspended cache.\n        cachePool = {\n          parent: parentCache,\n          pool: parentCache\n        };\n      } else {\n        // We can reuse the cache from last time. The only thing that would have\n        // overridden it is a parent refresh, which we checked for above.\n        cachePool = prevCachePool;\n      }\n    } else {\n      // If there's no previous cache pool, grab the current one.\n      cachePool = getSuspendedCache();\n    }\n  }\n\n  return {\n    baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes),\n    cachePool\n  };\n} // TODO: Probably should inline this back\n\n\nfunction shouldRemainOnFallback(current, workInProgress, renderLanes) {\n  // If we're already showing a fallback, there are cases where we need to\n  // remain on that fallback regardless of whether the content has resolved.\n  // For example, SuspenseList coordinates when nested content appears.\n  // TODO: For compatibility with offscreen prerendering, this should also check\n  // whether the current fiber (if it exists) was visible in the previous tree.\n  if (current !== null) {\n    const suspenseState = current.memoizedState;\n\n    if (suspenseState === null) {\n      // Currently showing content. Don't hide it, even if ForceSuspenseFallback\n      // is true. More precise name might be \"ForceRemainSuspenseFallback\".\n      // Note: This is a factoring smell. Can't remain on a fallback if there's\n      // no fallback to remain on.\n      return false;\n    }\n  } // Not currently showing content. Consult the Suspense context.\n\n\n  const suspenseContext = suspenseStackCursor.current;\n  return hasSuspenseListContext(suspenseContext, ForceSuspenseFallback);\n}\n\nfunction getRemainingWorkInPrimaryTree(current, primaryTreeDidDefer, renderLanes) {\n  let remainingLanes = current !== null ? removeLanes(current.childLanes, renderLanes) : NoLanes;\n\n  if (primaryTreeDidDefer) {\n    // A useDeferredValue hook spawned a deferred task inside the primary tree.\n    // Ensure that we retry this component at the deferred priority.\n    // TODO: We could make this a per-subtree value instead of a global one.\n    // Would need to track it on the context stack somehow, similar to what\n    // we'd have to do for resumable contexts.\n    remainingLanes = mergeLanes(remainingLanes, peekDeferredLane());\n  }\n\n  return remainingLanes;\n}\n\nfunction updateSuspenseComponent(current, workInProgress, renderLanes) {\n  const nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.\n\n  let showFallback = false;\n  const didSuspend = (workInProgress.flags & DidCapture) !== NoFlags$1;\n\n  if (didSuspend || shouldRemainOnFallback(current)) {\n    // Something in this boundary's subtree already suspended. Switch to\n    // rendering the fallback children.\n    showFallback = true;\n    workInProgress.flags &= ~DidCapture;\n  } // Check if the primary children spawned a deferred task (useDeferredValue)\n  // during the first pass.\n\n\n  const didPrimaryChildrenDefer = (workInProgress.flags & DidDefer) !== NoFlags$1;\n  workInProgress.flags &= ~DidDefer; // OK, the next part is confusing. We're about to reconcile the Suspense\n  // boundary's children. This involves some custom reconciliation logic. Two\n  // main reasons this is so complicated.\n  //\n  // First, Legacy Mode has different semantics for backwards compatibility. The\n  // primary tree will commit in an inconsistent state, so when we do the\n  // second pass to render the fallback, we do some exceedingly, uh, clever\n  // hacks to make that not totally break. Like transferring effects and\n  // deletions from hidden tree. In Concurrent Mode, it's much simpler,\n  // because we bailout on the primary tree completely and leave it in its old\n  // state, no effects. Same as what we do for Offscreen (except that\n  // Offscreen doesn't have the first render pass).\n  //\n  // Second is hydration. During hydration, the Suspense fiber has a slightly\n  // different layout, where the child points to a dehydrated fragment, which\n  // contains the DOM rendered by the server.\n  //\n  // Third, even if you set all that aside, Suspense is like error boundaries in\n  // that we first we try to render one tree, and if that fails, we render again\n  // and switch to a different tree. Like a try/catch block. So we have to track\n  // which branch we're currently rendering. Ideally we would model this using\n  // a stack.\n\n  if (current === null) {\n    // Initial mount\n    // Special path for hydration\n    // If we're currently hydrating, try to hydrate this boundary.\n    if (getIsHydrating()) {\n      // We must push the suspense handler context *before* attempting to\n      // hydrate, to avoid a mismatch in case it errors.\n      if (showFallback) {\n        pushPrimaryTreeSuspenseHandler(workInProgress);\n      } else {\n        pushFallbackTreeSuspenseHandler(workInProgress);\n      }\n\n      tryToClaimNextHydratableSuspenseInstance(workInProgress); // This could've been a dehydrated suspense component.\n\n      const suspenseState = workInProgress.memoizedState;\n\n      if (suspenseState !== null) {\n        const dehydrated = suspenseState.dehydrated;\n\n        if (dehydrated !== null) {\n          return mountDehydratedSuspenseComponent(workInProgress, dehydrated);\n        }\n      } // If hydration didn't succeed, fall through to the normal Suspense path.\n      // To avoid a stack mismatch we need to pop the Suspense handler that we\n      // pushed above. This will become less awkward when move the hydration\n      // logic to its own fiber.\n\n\n      popSuspenseHandler(workInProgress);\n    }\n\n    const nextPrimaryChildren = nextProps.children;\n    const nextFallbackChildren = nextProps.fallback;\n\n    if (showFallback) {\n      pushFallbackTreeSuspenseHandler(workInProgress);\n      const fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);\n      const primaryChildFragment = workInProgress.child;\n      primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);\n      primaryChildFragment.childLanes = getRemainingWorkInPrimaryTree(current, didPrimaryChildrenDefer, renderLanes);\n      workInProgress.memoizedState = SUSPENDED_MARKER;\n\n      return fallbackFragment;\n    } else {\n      pushPrimaryTreeSuspenseHandler(workInProgress);\n      return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren);\n    }\n  } else {\n    // This is an update.\n    // Special path for hydration\n    const prevState = current.memoizedState;\n\n    if (prevState !== null) {\n      const dehydrated = prevState.dehydrated;\n\n      if (dehydrated !== null) {\n        return updateDehydratedSuspenseComponent(current, workInProgress, didSuspend, didPrimaryChildrenDefer, nextProps, dehydrated, prevState, renderLanes);\n      }\n    }\n\n    if (showFallback) {\n      pushFallbackTreeSuspenseHandler(workInProgress);\n      const nextFallbackChildren = nextProps.fallback;\n      const nextPrimaryChildren = nextProps.children;\n      const fallbackChildFragment = updateSuspenseFallbackChildren(current, workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);\n      const primaryChildFragment = workInProgress.child;\n      const prevOffscreenState = current.child.memoizedState;\n      primaryChildFragment.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);\n\n      primaryChildFragment.childLanes = getRemainingWorkInPrimaryTree(current, didPrimaryChildrenDefer, renderLanes);\n      workInProgress.memoizedState = SUSPENDED_MARKER;\n      return fallbackChildFragment;\n    } else {\n      pushPrimaryTreeSuspenseHandler(workInProgress);\n      const nextPrimaryChildren = nextProps.children;\n      const primaryChildFragment = updateSuspensePrimaryChildren(current, workInProgress, nextPrimaryChildren, renderLanes);\n      workInProgress.memoizedState = null;\n      return primaryChildFragment;\n    }\n  }\n}\n\nfunction mountSuspensePrimaryChildren(workInProgress, primaryChildren, renderLanes) {\n  const mode = workInProgress.mode;\n  const primaryChildProps = {\n    mode: 'visible',\n    children: primaryChildren\n  };\n  const primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);\n  primaryChildFragment.return = workInProgress;\n  workInProgress.child = primaryChildFragment;\n  return primaryChildFragment;\n}\n\nfunction mountSuspenseFallbackChildren(workInProgress, primaryChildren, fallbackChildren, renderLanes) {\n  const mode = workInProgress.mode;\n  const progressedPrimaryFragment = workInProgress.child;\n  const primaryChildProps = {\n    mode: 'hidden',\n    children: primaryChildren\n  };\n  let primaryChildFragment;\n  let fallbackChildFragment;\n\n  if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {\n    // In legacy mode, we commit the primary tree as if it successfully\n    // completed, even though it's in an inconsistent state.\n    primaryChildFragment = progressedPrimaryFragment;\n    primaryChildFragment.childLanes = NoLanes;\n    primaryChildFragment.pendingProps = primaryChildProps;\n\n    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);\n  } else {\n    primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);\n    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);\n  }\n\n  primaryChildFragment.return = workInProgress;\n  fallbackChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = fallbackChildFragment;\n  workInProgress.child = primaryChildFragment;\n  return fallbackChildFragment;\n}\n\nfunction mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes) {\n  // The props argument to `createFiberFromOffscreen` is `any` typed, so we use\n  // this wrapper function to constrain it.\n  return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);\n}\n\nfunction updateWorkInProgressOffscreenFiber(current, offscreenProps) {\n  // The props argument to `createWorkInProgress` is `any` typed, so we use this\n  // wrapper function to constrain it.\n  return createWorkInProgress(current, offscreenProps);\n}\n\nfunction updateSuspensePrimaryChildren(current, workInProgress, primaryChildren, renderLanes) {\n  const currentPrimaryChildFragment = current.child;\n  const currentFallbackChildFragment = currentPrimaryChildFragment.sibling;\n  const primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {\n    mode: 'visible',\n    children: primaryChildren\n  });\n\n  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n    primaryChildFragment.lanes = renderLanes;\n  }\n\n  primaryChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = null;\n\n  if (currentFallbackChildFragment !== null) {\n    // Delete the fallback child fragment\n    const deletions = workInProgress.deletions;\n\n    if (deletions === null) {\n      workInProgress.deletions = [currentFallbackChildFragment];\n      workInProgress.flags |= ChildDeletion;\n    } else {\n      deletions.push(currentFallbackChildFragment);\n    }\n  }\n\n  workInProgress.child = primaryChildFragment;\n  return primaryChildFragment;\n}\n\nfunction updateSuspenseFallbackChildren(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {\n  const mode = workInProgress.mode;\n  const currentPrimaryChildFragment = current.child;\n  const currentFallbackChildFragment = currentPrimaryChildFragment.sibling;\n  const primaryChildProps = {\n    mode: 'hidden',\n    children: primaryChildren\n  };\n  let primaryChildFragment;\n\n  if ( // In legacy mode, we commit the primary tree as if it successfully\n  // completed, even though it's in an inconsistent state.\n  (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was\n  // already cloned. In legacy mode, the only case where this isn't true is\n  // when DevTools forces us to display a fallback; we skip the first render\n  // pass entirely and go straight to rendering the fallback. (In Concurrent\n  // Mode, SuspenseList can also trigger this scenario, but this is a legacy-\n  // only codepath.)\n  workInProgress.child !== currentPrimaryChildFragment) {\n    const progressedPrimaryFragment = workInProgress.child;\n    primaryChildFragment = progressedPrimaryFragment;\n    primaryChildFragment.childLanes = NoLanes;\n    primaryChildFragment.pendingProps = primaryChildProps;\n    // However, since we're going to remain on the fallback, we no longer want\n    // to delete it.\n\n\n    workInProgress.deletions = null;\n  } else {\n    primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps); // Since we're reusing a current tree, we need to reuse the flags, too.\n    // (We don't do this in legacy mode, because in legacy mode we don't re-use\n    // the current tree; see previous branch.)\n\n    primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;\n  }\n\n  let fallbackChildFragment;\n\n  if (currentFallbackChildFragment !== null) {\n    fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);\n  } else {\n    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null); // Needs a placement effect because the parent (the Suspense boundary) already\n    // mounted but this is a new fiber.\n\n    fallbackChildFragment.flags |= Placement;\n  }\n\n  fallbackChildFragment.return = workInProgress;\n  primaryChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = fallbackChildFragment;\n  workInProgress.child = primaryChildFragment;\n  return fallbackChildFragment;\n}\n\nfunction retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, recoverableError) {\n  // Falling back to client rendering. Because this has performance\n  // implications, it's considered a recoverable error, even though the user\n  // likely won't observe anything wrong with the UI.\n  //\n  // The error is passed in as an argument to enforce that every caller provide\n  // a custom message, or explicitly opt out (currently the only path that opts\n  // out is legacy mode; every concurrent path provides an error).\n  if (recoverableError !== null) {\n    queueHydrationError(recoverableError);\n  } // This will add the old fiber to the deletion list\n\n\n  reconcileChildFibers(workInProgress, current.child, null, renderLanes); // We're now not suspended nor dehydrated.\n\n  const nextProps = workInProgress.pendingProps;\n  const primaryChildren = nextProps.children;\n  const primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren); // Needs a placement effect because the parent (the Suspense boundary) already\n  // mounted but this is a new fiber.\n\n  primaryChildFragment.flags |= Placement;\n  workInProgress.memoizedState = null;\n  return primaryChildFragment;\n}\n\nfunction mountSuspenseFallbackAfterRetryWithoutHydrating(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {\n  const fiberMode = workInProgress.mode;\n  const primaryChildProps = {\n    mode: 'visible',\n    children: primaryChildren\n  };\n  const primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);\n  const fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes, null); // Needs a placement effect because the parent (the Suspense\n  // boundary) already mounted but this is a new fiber.\n\n  fallbackChildFragment.flags |= Placement;\n  primaryChildFragment.return = workInProgress;\n  fallbackChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = fallbackChildFragment;\n  workInProgress.child = primaryChildFragment;\n\n  if ((workInProgress.mode & ConcurrentMode) !== NoMode) {\n    // We will have dropped the effect list which contains the\n    // deletion. We need to reconcile to delete the current child.\n    reconcileChildFibers(workInProgress, current.child, null, renderLanes);\n  }\n\n  return fallbackChildFragment;\n}\n\nfunction mountDehydratedSuspenseComponent(workInProgress, suspenseInstance, renderLanes) {\n  // During the first pass, we'll bail out and not drill into the children.\n  // Instead, we'll leave the content in place and try to hydrate it later.\n  if (isSuspenseInstanceFallback(suspenseInstance)) {\n    // This is a client-only boundary. Since we won't get any content from the server\n    // for this, we need to schedule that at a higher priority based on when it would\n    // have timed out. In theory we could render it in this pass but it would have the\n    // wrong priority associated with it and will prevent hydration of parent path.\n    // Instead, we'll leave work left on it to render it in a separate commit.\n    // TODO This time should be the time at which the server rendered response that is\n    // a parent to this boundary was displayed. However, since we currently don't have\n    // a protocol to transfer that time, we'll just estimate it by using the current\n    // time. This will mean that Suspense timeouts are slightly shifted to later than\n    // they should be.\n    // Schedule a normal pri update to render this content.\n    workInProgress.lanes = laneToLanes(DefaultHydrationLane);\n  } else {\n    // We'll continue hydrating the rest at offscreen priority since we'll already\n    // be showing the right content coming from the server, it is no rush.\n    workInProgress.lanes = laneToLanes(OffscreenLane);\n  }\n\n  return null;\n}\n\nfunction updateDehydratedSuspenseComponent(current, workInProgress, didSuspend, didPrimaryChildrenDefer, nextProps, suspenseInstance, suspenseState, renderLanes) {\n  if (!didSuspend) {\n    // This is the first render pass. Attempt to hydrate.\n    pushPrimaryTreeSuspenseHandler(workInProgress); // We should never be hydrating at this point because it is the first pass,\n\n    if (isSuspenseInstanceFallback(suspenseInstance)) {\n      // This boundary is in a permanent fallback state. In this case, we'll never\n      // get an update and we'll never be able to hydrate the final content. Let's just try the\n      // client side render instead.\n      let digest;\n      let stack;\n\n      {\n        var _getSuspenseInstanceF2 = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);\n\n        digest = _getSuspenseInstanceF2.digest;\n      }\n\n      let capturedValue = null; // TODO: Figure out a better signal than encoding a magic digest value.\n\n      {\n        let error;\n\n        {\n          error = Error(formatProdErrorMessage(419));\n        }\n\n        error.digest = digest;\n        capturedValue = createCapturedValueFromError(error, digest, stack);\n      }\n\n      return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, capturedValue);\n    }\n    // any context has changed, we need to treat is as if the input might have changed.\n\n\n    const hasContextChanged = includesSomeLane(renderLanes, current.childLanes);\n\n    if (didReceiveUpdate || hasContextChanged) {\n      // This boundary has changed since the first render. This means that we are now unable to\n      // hydrate it. We might still be able to hydrate it using a higher priority lane.\n      const root = getWorkInProgressRoot();\n\n      if (root !== null) {\n        const attemptHydrationAtLane = getBumpedLaneForHydration(root, renderLanes);\n\n        if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {\n          // Intentionally mutating since this render will get interrupted. This\n          // is one of the very rare times where we mutate the current tree\n          // during the render phase.\n          suspenseState.retryLane = attemptHydrationAtLane;\n          enqueueConcurrentRenderForLane(current, attemptHydrationAtLane);\n          scheduleUpdateOnFiber(root, current, attemptHydrationAtLane); // Throw a special object that signals to the work loop that it should\n          // interrupt the current render.\n          //\n          // Because we're inside a React-only execution stack, we don't\n          // strictly need to throw here — we could instead modify some internal\n          // work loop state. But using an exception means we don't need to\n          // check for this case on every iteration of the work loop. So doing\n          // it this way moves the check out of the fast path.\n\n          throw SelectiveHydrationException;\n        }\n      } // If we did not selectively hydrate, we'll continue rendering without\n      // hydrating. Mark this tree as suspended to prevent it from committing\n      // outside a transition.\n      //\n      // This path should only happen if the hydration lane already suspended.\n      // Currently, it also happens during sync updates because there is no\n      // hydration lane for sync updates.\n      // TODO: We should ideally have a sync hydration lane that we can apply to do\n      // a pass where we hydrate this subtree in place using the previous Context and then\n      // reapply the update afterwards.\n\n\n      if (isSuspenseInstancePending(suspenseInstance)) ; else {\n        renderDidSuspendDelayIfPossible();\n      }\n\n      return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, null);\n    } else if (isSuspenseInstancePending(suspenseInstance)) {\n      // This component is still pending more data from the server, so we can't hydrate its\n      // content. We treat it as if this component suspended itself. It might seem as if\n      // we could just try to render it client-side instead. However, this will perform a\n      // lot of unnecessary work and is unlikely to complete since it often will suspend\n      // on missing data anyway. Additionally, the server might be able to render more\n      // than we can on the client yet. In that case we'd end up with more fallback states\n      // on the client than if we just leave it alone. If the server times out or errors\n      // these should update this boundary to the permanent Fallback state instead.\n      // Mark it as having captured (i.e. suspended).\n      workInProgress.flags |= DidCapture; // Leave the child in place. I.e. the dehydrated fragment.\n\n      workInProgress.child = current.child; // Register a callback to retry this boundary once the server has sent the result.\n\n      const retry = retryDehydratedSuspenseBoundary.bind(null, current);\n      registerSuspenseInstanceRetry(suspenseInstance, retry);\n      return null;\n    } else {\n      // This is the first attempt.\n      reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress, suspenseInstance, suspenseState.treeContext);\n      const primaryChildren = nextProps.children;\n      const primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren); // Mark the children as hydrating. This is a fast path to know whether this\n      // tree is part of a hydrating tree. This is used to determine if a child\n      // node has fully mounted yet, and for scheduling event replaying.\n      // Conceptually this is similar to Placement in that a new subtree is\n      // inserted into the React tree here. It just happens to not need DOM\n      // mutations because it already exists.\n\n      primaryChildFragment.flags |= Hydrating;\n      return primaryChildFragment;\n    }\n  } else {\n    // This is the second render pass. We already attempted to hydrated, but\n    // something either suspended or errored.\n    if (workInProgress.flags & ForceClientRender) {\n      // Something errored during hydration. Try again without hydrating.\n      pushPrimaryTreeSuspenseHandler(workInProgress);\n      workInProgress.flags &= ~ForceClientRender;\n      const capturedValue = createCapturedValueFromError(Error(formatProdErrorMessage(422)));\n      return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, capturedValue);\n    } else if (workInProgress.memoizedState !== null) {\n      // Something suspended and we should still be in dehydrated mode.\n      // Leave the existing child in place.\n      // Push to avoid a mismatch\n      pushFallbackTreeSuspenseHandler(workInProgress);\n      workInProgress.child = current.child; // The dehydrated completion pass expects this flag to be there\n      // but the normal suspense pass doesn't.\n\n      workInProgress.flags |= DidCapture;\n      return null;\n    } else {\n      // Suspended but we should no longer be in dehydrated mode.\n      // Therefore we now have to render the fallback.\n      pushFallbackTreeSuspenseHandler(workInProgress);\n      const nextPrimaryChildren = nextProps.children;\n      const nextFallbackChildren = nextProps.fallback;\n      const fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current, workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);\n      const primaryChildFragment = workInProgress.child;\n      primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);\n      primaryChildFragment.childLanes = getRemainingWorkInPrimaryTree(current, didPrimaryChildrenDefer, renderLanes);\n      workInProgress.memoizedState = SUSPENDED_MARKER;\n      return fallbackChildFragment;\n    }\n  }\n}\n\nfunction scheduleSuspenseWorkOnFiber(fiber, renderLanes, propagationRoot) {\n  fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n  const alternate = fiber.alternate;\n\n  if (alternate !== null) {\n    alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n  }\n\n  scheduleContextWorkOnParentPath(fiber.return, renderLanes, propagationRoot);\n}\n\nfunction propagateSuspenseContextChange(workInProgress, firstChild, renderLanes) {\n  // Mark any Suspense boundaries with fallbacks as having work to do.\n  // If they were previously forced into fallbacks, they may now be able\n  // to unblock.\n  let node = firstChild;\n\n  while (node !== null) {\n    if (node.tag === SuspenseComponent) {\n      const state = node.memoizedState;\n\n      if (state !== null) {\n        scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);\n      }\n    } else if (node.tag === SuspenseListComponent) {\n      // If the tail is hidden there might not be an Suspense boundaries\n      // to schedule work on. In this case we have to schedule it on the\n      // list itself.\n      // We don't have to traverse to the children of the list since\n      // the list will propagate the change when it rerenders.\n      scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);\n    } else if (node.child !== null) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n\n    if (node === workInProgress) {\n      return;\n    } // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n\n    while (node.sibling === null) {\n      // $FlowFixMe[incompatible-use] found when upgrading Flow\n      if (node.return === null || node.return === workInProgress) {\n        return;\n      }\n\n      node = node.return;\n    } // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n}\n\nfunction findLastContentRow(firstChild) {\n  // This is going to find the last row among these children that is already\n  // showing content on the screen, as opposed to being in fallback state or\n  // new. If a row has multiple Suspense boundaries, any of them being in the\n  // fallback state, counts as the whole row being in a fallback state.\n  // Note that the \"rows\" will be workInProgress, but any nested children\n  // will still be current since we haven't rendered them yet. The mounted\n  // order may not be the same as the new order. We use the new order.\n  let row = firstChild;\n  let lastContentRow = null;\n\n  while (row !== null) {\n    const currentRow = row.alternate; // New rows can't be content rows.\n\n    if (currentRow !== null && findFirstSuspended(currentRow) === null) {\n      lastContentRow = row;\n    }\n\n    row = row.sibling;\n  }\n\n  return lastContentRow;\n}\n\nfunction initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode) {\n  const renderState = workInProgress.memoizedState;\n\n  if (renderState === null) {\n    workInProgress.memoizedState = {\n      isBackwards: isBackwards,\n      rendering: null,\n      renderingStartTime: 0,\n      last: lastContentRow,\n      tail: tail,\n      tailMode: tailMode\n    };\n  } else {\n    // We can reuse the existing object from previous renders.\n    renderState.isBackwards = isBackwards;\n    renderState.rendering = null;\n    renderState.renderingStartTime = 0;\n    renderState.last = lastContentRow;\n    renderState.tail = tail;\n    renderState.tailMode = tailMode;\n  }\n} // This can end up rendering this component multiple passes.\n// The first pass splits the children fibers into two sets. A head and tail.\n// We first render the head. If anything is in fallback state, we do another\n// pass through beginWork to rerender all children (including the tail) with\n// the force suspend context. If the first render didn't have anything in\n// in fallback state. Then we render each row in the tail one-by-one.\n// That happens in the completeWork phase without going back to beginWork.\n\n\nfunction updateSuspenseListComponent(current, workInProgress, renderLanes) {\n  const nextProps = workInProgress.pendingProps;\n  const revealOrder = nextProps.revealOrder;\n  const tailMode = nextProps.tail;\n  const newChildren = nextProps.children;\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n  let suspenseContext = suspenseStackCursor.current;\n  const shouldForceFallback = hasSuspenseListContext(suspenseContext, ForceSuspenseFallback);\n\n  if (shouldForceFallback) {\n    suspenseContext = setShallowSuspenseListContext(suspenseContext, ForceSuspenseFallback);\n    workInProgress.flags |= DidCapture;\n  } else {\n    const didSuspendBefore = current !== null && (current.flags & DidCapture) !== NoFlags$1;\n\n    if (didSuspendBefore) {\n      // If we previously forced a fallback, we need to schedule work\n      // on any nested boundaries to let them know to try to render\n      // again. This is the same as context updating.\n      propagateSuspenseContextChange(workInProgress, workInProgress.child, renderLanes);\n    }\n\n    suspenseContext = setDefaultShallowSuspenseListContext(suspenseContext);\n  }\n\n  pushSuspenseListContext(workInProgress, suspenseContext);\n\n  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n    // In legacy mode, SuspenseList doesn't work so we just\n    // use make it a noop by treating it as the default revealOrder.\n    workInProgress.memoizedState = null;\n  } else {\n    switch (revealOrder) {\n      case 'forwards':\n        {\n          const lastContentRow = findLastContentRow(workInProgress.child);\n          let tail;\n\n          if (lastContentRow === null) {\n            // The whole list is part of the tail.\n            // TODO: We could fast path by just rendering the tail now.\n            tail = workInProgress.child;\n            workInProgress.child = null;\n          } else {\n            // Disconnect the tail rows after the content row.\n            // We're going to render them separately later.\n            tail = lastContentRow.sibling;\n            lastContentRow.sibling = null;\n          }\n\n          initSuspenseListRenderState(workInProgress, false, // isBackwards\n          tail, lastContentRow, tailMode);\n          break;\n        }\n\n      case 'backwards':\n        {\n          // We're going to find the first row that has existing content.\n          // At the same time we're going to reverse the list of everything\n          // we pass in the meantime. That's going to be our tail in reverse\n          // order.\n          let tail = null;\n          let row = workInProgress.child;\n          workInProgress.child = null;\n\n          while (row !== null) {\n            const currentRow = row.alternate; // New rows can't be content rows.\n\n            if (currentRow !== null && findFirstSuspended(currentRow) === null) {\n              // This is the beginning of the main content.\n              workInProgress.child = row;\n              break;\n            }\n\n            const nextRow = row.sibling;\n            row.sibling = tail;\n            tail = row;\n            row = nextRow;\n          } // TODO: If workInProgress.child is null, we can continue on the tail immediately.\n\n\n          initSuspenseListRenderState(workInProgress, true, // isBackwards\n          tail, null, // last\n          tailMode);\n          break;\n        }\n\n      case 'together':\n        {\n          initSuspenseListRenderState(workInProgress, false, // isBackwards\n          null, // tail\n          null, // last\n          undefined);\n          break;\n        }\n\n      default:\n        {\n          // The default reveal order is the same as not having\n          // a boundary.\n          workInProgress.memoizedState = null;\n        }\n    }\n  }\n\n  return workInProgress.child;\n}\n\nfunction updatePortalComponent(current, workInProgress, renderLanes) {\n  pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n  const nextChildren = workInProgress.pendingProps;\n\n  if (current === null) {\n    // Portals are special because we don't append the children during mount\n    // but at commit. Therefore we need to track insertions which the normal\n    // flow doesn't do during mount. This doesn't happen at the root because\n    // the root always starts with a \"current\" with a null child.\n    // TODO: Consider unifying this with how the root works.\n    workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);\n  } else {\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  }\n\n  return workInProgress.child;\n}\n\nfunction updateContextProvider(current, workInProgress, renderLanes) {\n  let context;\n\n  {\n    context = workInProgress.type._context;\n  }\n\n  const newProps = workInProgress.pendingProps;\n  const oldProps = workInProgress.memoizedProps;\n  const newValue = newProps.value;\n\n  pushProvider(workInProgress, context, newValue);\n\n  {\n    if (oldProps !== null) {\n      const oldValue = oldProps.value;\n\n      if (objectIs(oldValue, newValue)) {\n        // No change. Bailout early if children are the same.\n        if (oldProps.children === newProps.children && !hasContextChanged()) {\n          return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n        }\n      } else {\n        // The context value changed. Search for matching consumers and schedule\n        // them to update.\n        propagateContextChange(workInProgress, context, renderLanes);\n      }\n    }\n  }\n\n  const newChildren = newProps.children;\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateContextConsumer(current, workInProgress, renderLanes) {\n  let context;\n\n  {\n    context = workInProgress.type;\n  }\n\n  const newProps = workInProgress.pendingProps;\n  const render = newProps.children;\n\n  prepareToReadContext(workInProgress, renderLanes);\n  const newValue = readContext(context);\n\n  let newChildren;\n\n  {\n    newChildren = render(newValue);\n  }\n\n\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction markWorkInProgressReceivedUpdate() {\n  didReceiveUpdate = true;\n}\n\nfunction resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress) {\n  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n    if (current !== null) {\n      // A lazy component only mounts if it suspended inside a non-\n      // concurrent tree, in an inconsistent state. We want to treat it like\n      // a new mount, even though an empty version of it already committed.\n      // Disconnect the alternate pointers.\n      current.alternate = null;\n      workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect\n\n      workInProgress.flags |= Placement;\n    }\n  }\n}\n\nfunction bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {\n  if (current !== null) {\n    // Reuse previous dependencies\n    workInProgress.dependencies = current.dependencies;\n  }\n\n  markSkippedUpdateLanes(workInProgress.lanes); // Check if the children have any pending work.\n\n  if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {\n    // The children don't have any work either. We can skip them.\n    // TODO: Once we add back resuming, we should check if the children are\n    // a work-in-progress set. If so, we need to transfer their effects.\n    {\n      return null;\n    }\n  } // This fiber doesn't have work, but its subtree does. Clone the child\n  // fibers and continue.\n\n\n  cloneChildFibers(current, workInProgress);\n  return workInProgress.child;\n}\n\nfunction checkScheduledUpdateOrContext(current, renderLanes) {\n  // Before performing an early bailout, we must check if there are pending\n  // updates or context.\n  const updateLanes = current.lanes;\n\n  if (includesSomeLane(updateLanes, renderLanes)) {\n    return true;\n  } // No pending update, but because context is propagated lazily, we need\n\n  return false;\n}\n\nfunction attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes) {\n  // This fiber does not have any pending work. Bailout without entering\n  // the begin phase. There's still some bookkeeping we that needs to be done\n  // in this optimized path, mostly pushing stuff onto the stack.\n  switch (workInProgress.tag) {\n    case HostRoot:\n      pushHostRootContext(workInProgress);\n\n      {\n        const cache = current.memoizedState.cache;\n        pushCacheProvider(workInProgress, cache);\n      }\n\n      resetHydrationState();\n      break;\n\n    case HostSingleton:\n    case HostComponent:\n      pushHostContext(workInProgress);\n      break;\n\n    case ClassComponent:\n      {\n        const Component = workInProgress.type;\n\n        if (isContextProvider(Component)) {\n          pushContextProvider(workInProgress);\n        }\n\n        break;\n      }\n\n    case HostPortal:\n      pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n      break;\n\n    case ContextProvider:\n      {\n        const newValue = workInProgress.memoizedProps.value;\n        let context;\n\n        {\n          context = workInProgress.type._context;\n        }\n\n        pushProvider(workInProgress, context, newValue);\n        break;\n      }\n\n    case Profiler:\n\n      break;\n\n    case SuspenseComponent:\n      {\n        const state = workInProgress.memoizedState;\n\n        if (state !== null) {\n          if (state.dehydrated !== null) {\n            // We're not going to render the children, so this is just to maintain\n            // push/pop symmetry\n            pushPrimaryTreeSuspenseHandler(workInProgress); // We know that this component will suspend again because if it has\n            // been unsuspended it has committed as a resolved Suspense component.\n            // If it needs to be retried, it should have work scheduled on it.\n\n            workInProgress.flags |= DidCapture; // We should never render the children of a dehydrated boundary until we\n            // upgrade it. We return null instead of bailoutOnAlreadyFinishedWork.\n\n            return null;\n          } // If this boundary is currently timed out, we need to decide\n          // whether to retry the primary children, or to skip over it and\n          // go straight to the fallback. Check the priority of the primary\n          // child fragment.\n\n\n          const primaryChildFragment = workInProgress.child;\n          const primaryChildLanes = primaryChildFragment.childLanes;\n\n          if (includesSomeLane(renderLanes, primaryChildLanes)) {\n            // The primary children have pending work. Use the normal path\n            // to attempt to render the primary children again.\n            return updateSuspenseComponent(current, workInProgress, renderLanes);\n          } else {\n            // The primary child fragment does not have pending work marked\n            // on it\n            pushPrimaryTreeSuspenseHandler(workInProgress); // The primary children do not have pending work with sufficient\n            // priority. Bailout.\n\n            const child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n\n            if (child !== null) {\n              // The fallback children have pending work. Skip over the\n              // primary children and work on the fallback.\n              return child.sibling;\n            } else {\n              // Note: We can return `null` here because we already checked\n              // whether there were nested context consumers, via the call to\n              // `bailoutOnAlreadyFinishedWork` above.\n              return null;\n            }\n          }\n        } else {\n          pushPrimaryTreeSuspenseHandler(workInProgress);\n        }\n\n        break;\n      }\n\n    case SuspenseListComponent:\n      {\n        const didSuspendBefore = (current.flags & DidCapture) !== NoFlags$1;\n        let hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);\n\n        if (didSuspendBefore) {\n          if (hasChildWork) {\n            // If something was in fallback state last time, and we have all the\n            // same children then we're still in progressive loading state.\n            // Something might get unblocked by state updates or retries in the\n            // tree which will affect the tail. So we need to use the normal\n            // path to compute the correct tail.\n            return updateSuspenseListComponent(current, workInProgress, renderLanes);\n          } // If none of the children had any work, that means that none of\n          // them got retried so they'll still be blocked in the same way\n          // as before. We can fast bail out.\n\n\n          workInProgress.flags |= DidCapture;\n        } // If nothing suspended before and we're rendering the same children,\n        // then the tail doesn't matter. Anything new that suspends will work\n        // in the \"together\" mode, so we can continue from the state we had.\n\n\n        const renderState = workInProgress.memoizedState;\n\n        if (renderState !== null) {\n          // Reset to the \"together\" mode in case we've started a different\n          // update in the past but didn't complete it.\n          renderState.rendering = null;\n          renderState.tail = null;\n          renderState.lastEffect = null;\n        }\n\n        pushSuspenseListContext(workInProgress, suspenseStackCursor.current);\n\n        if (hasChildWork) {\n          break;\n        } else {\n          // If none of the children had any work, that means that none of\n          // them got retried so they'll still be blocked in the same way\n          // as before. We can fast bail out.\n          return null;\n        }\n      }\n\n    case OffscreenComponent:\n    case LegacyHiddenComponent:\n      {\n        // Need to check if the tree still needs to be deferred. This is\n        // almost identical to the logic used in the normal update path,\n        // so we'll just enter that. The only difference is we'll bail out\n        // at the next level instead of this one, because the child props\n        // have not changed. Which is fine.\n        // TODO: Probably should refactor `beginWork` to split the bailout\n        // path from the normal path. I'm tempted to do a labeled break here\n        // but I won't :)\n        workInProgress.lanes = NoLanes;\n        return updateOffscreenComponent(current, workInProgress, renderLanes);\n      }\n\n    case CacheComponent:\n      {\n        {\n          const cache = current.memoizedState.cache;\n          pushCacheProvider(workInProgress, cache);\n        }\n\n        break;\n      }\n  }\n\n  return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n}\n\nfunction beginWork(current, workInProgress, renderLanes) {\n\n  if (current !== null) {\n    const oldProps = current.memoizedProps;\n    const newProps = workInProgress.pendingProps;\n\n    if (oldProps !== newProps || hasContextChanged() || ( // Force a re-render if the implementation changed due to hot reload:\n    false)) {\n      // If props or context changed, mark the fiber as having performed work.\n      // This may be unset if the props are determined to be equal later (memo).\n      didReceiveUpdate = true;\n    } else {\n      // Neither props nor legacy context changes. Check if there's a pending\n      // update or context change.\n      const hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);\n\n      if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there\n      // may not be work scheduled on `current`, so we check for this flag.\n      (workInProgress.flags & DidCapture) === NoFlags$1) {\n        // No pending updates or context. Bail out now.\n        didReceiveUpdate = false;\n        return attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes);\n      }\n\n      if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags$1) {\n        // This is a special case that only exists for legacy mode.\n        // See https://github.com/facebook/react/pull/19216.\n        didReceiveUpdate = true;\n      } else {\n        // An update was scheduled on this fiber, but there are no new props\n        // nor legacy context. Set this to false. If an update queue or context\n        // consumer produces a changed value, it will set this to true. Otherwise,\n        // the component will assume the children have not changed and bail out.\n        didReceiveUpdate = false;\n      }\n    }\n  } else {\n    didReceiveUpdate = false;\n\n    if (getIsHydrating() && isForkedChild(workInProgress)) {\n      // Check if this child belongs to a list of muliple children in\n      // its parent.\n      //\n      // In a true multi-threaded implementation, we would render children on\n      // parallel threads. This would represent the beginning of a new render\n      // thread for this subtree.\n      //\n      // We only use this for id generation during hydration, which is why the\n      // logic is located in this special branch.\n      const slotIndex = workInProgress.index;\n      const numberOfForks = getForksAtLevel();\n      pushTreeId(workInProgress, numberOfForks, slotIndex);\n    }\n  } // Before entering the begin phase, clear pending update priority.\n  // TODO: This assumes that we're about to evaluate the component and process\n  // the update queue. However, there's an exception: SimpleMemoComponent\n  // sometimes bails out later in the begin phase. This indicates that we should\n  // move this assignment out of the common path and into each branch.\n\n\n  workInProgress.lanes = NoLanes;\n\n  switch (workInProgress.tag) {\n    case IndeterminateComponent:\n      {\n        return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderLanes);\n      }\n\n    case LazyComponent:\n      {\n        const elementType = workInProgress.elementType;\n        return mountLazyComponent(current, workInProgress, elementType, renderLanes);\n      }\n\n    case FunctionComponent:\n      {\n        const Component = workInProgress.type;\n        const unresolvedProps = workInProgress.pendingProps;\n        const resolvedProps = workInProgress.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);\n        return updateFunctionComponent(current, workInProgress, Component, resolvedProps, renderLanes);\n      }\n\n    case ClassComponent:\n      {\n        const Component = workInProgress.type;\n        const unresolvedProps = workInProgress.pendingProps;\n        const resolvedProps = workInProgress.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);\n        return updateClassComponent(current, workInProgress, Component, resolvedProps, renderLanes);\n      }\n\n    case HostRoot:\n      return updateHostRoot(current, workInProgress, renderLanes);\n\n    case HostHoistable:\n      {\n        return updateHostHoistable(current, workInProgress);\n      }\n\n    // Fall through\n\n    case HostSingleton:\n      {\n        return updateHostSingleton(current, workInProgress, renderLanes);\n      }\n\n    // Fall through\n\n    case HostComponent:\n      return updateHostComponent$1(current, workInProgress, renderLanes);\n\n    case HostText:\n      return updateHostText$1(current, workInProgress);\n\n    case SuspenseComponent:\n      return updateSuspenseComponent(current, workInProgress, renderLanes);\n\n    case HostPortal:\n      return updatePortalComponent(current, workInProgress, renderLanes);\n\n    case ForwardRef:\n      {\n        const type = workInProgress.type;\n        const unresolvedProps = workInProgress.pendingProps;\n        const resolvedProps = workInProgress.elementType === type ? unresolvedProps : resolveDefaultProps(type, unresolvedProps);\n        return updateForwardRef(current, workInProgress, type, resolvedProps, renderLanes);\n      }\n\n    case Fragment:\n      return updateFragment(current, workInProgress, renderLanes);\n\n    case Mode:\n      return updateMode(current, workInProgress, renderLanes);\n\n    case Profiler:\n      return updateProfiler(current, workInProgress, renderLanes);\n\n    case ContextProvider:\n      return updateContextProvider(current, workInProgress, renderLanes);\n\n    case ContextConsumer:\n      return updateContextConsumer(current, workInProgress, renderLanes);\n\n    case MemoComponent:\n      {\n        const type = workInProgress.type;\n        const unresolvedProps = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.\n\n        let resolvedProps = resolveDefaultProps(type, unresolvedProps);\n        resolvedProps = resolveDefaultProps(type.type, resolvedProps);\n        return updateMemoComponent(current, workInProgress, type, resolvedProps, renderLanes);\n      }\n\n    case SimpleMemoComponent:\n      {\n        return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);\n      }\n\n    case IncompleteClassComponent:\n      {\n        const Component = workInProgress.type;\n        const unresolvedProps = workInProgress.pendingProps;\n        const resolvedProps = workInProgress.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);\n        return mountIncompleteClassComponent(current, workInProgress, Component, resolvedProps, renderLanes);\n      }\n\n    case SuspenseListComponent:\n      {\n        return updateSuspenseListComponent(current, workInProgress, renderLanes);\n      }\n\n    case ScopeComponent:\n      {\n\n        break;\n      }\n\n    case OffscreenComponent:\n      {\n        return updateOffscreenComponent(current, workInProgress, renderLanes);\n      }\n\n    case LegacyHiddenComponent:\n      {\n\n        break;\n      }\n\n    case CacheComponent:\n      {\n        {\n          return updateCacheComponent(current, workInProgress, renderLanes);\n        }\n      }\n  }\n\n  throw Error(formatProdErrorMessage(156, workInProgress.tag));\n}\n\nconst valueCursor = createCursor(null);\n\nlet currentlyRenderingFiber = null;\nlet lastContextDependency = null;\nlet lastFullyObservedContext = null;\nfunction resetContextDependencies() {\n  // This is called right before React yields execution, to ensure `readContext`\n  // cannot be called outside the render phase.\n  currentlyRenderingFiber = null;\n  lastContextDependency = null;\n  lastFullyObservedContext = null;\n}\nfunction pushProvider(providerFiber, context, nextValue) {\n  {\n    push(valueCursor, context._currentValue);\n    context._currentValue = nextValue;\n  }\n}\nfunction popProvider(context, providerFiber) {\n  const currentValue = valueCursor.current;\n\n  {\n    context._currentValue = currentValue;\n  }\n\n  pop(valueCursor);\n}\nfunction scheduleContextWorkOnParentPath(parent, renderLanes, propagationRoot) {\n  // Update the child lanes of all the ancestors, including the alternates.\n  let node = parent;\n\n  while (node !== null) {\n    const alternate = node.alternate;\n\n    if (!isSubsetOfLanes(node.childLanes, renderLanes)) {\n      node.childLanes = mergeLanes(node.childLanes, renderLanes);\n\n      if (alternate !== null) {\n        alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n      }\n    } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes)) {\n      alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n    } else ;\n\n    if (node === propagationRoot) {\n      break;\n    }\n\n    node = node.return;\n  }\n}\nfunction propagateContextChange(workInProgress, context, renderLanes) {\n  {\n    propagateContextChange_eager(workInProgress, context, renderLanes);\n  }\n}\n\nfunction propagateContextChange_eager(workInProgress, context, renderLanes) {\n\n  let fiber = workInProgress.child;\n\n  if (fiber !== null) {\n    // Set the return pointer of the child to the work-in-progress fiber.\n    fiber.return = workInProgress;\n  }\n\n  while (fiber !== null) {\n    let nextFiber; // Visit this fiber.\n\n    const list = fiber.dependencies;\n\n    if (list !== null) {\n      nextFiber = fiber.child;\n      let dependency = list.firstContext;\n\n      while (dependency !== null) {\n        // Check if the context matches.\n        if (dependency.context === context) {\n          // Match! Schedule an update on this fiber.\n          if (fiber.tag === ClassComponent) {\n            // Schedule a force update on the work-in-progress.\n            const lane = pickArbitraryLane(renderLanes);\n            const update = createUpdate(lane);\n            update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the\n            // update to the current fiber, too, which means it will persist even if\n            // this render is thrown away. Since it's a race condition, not sure it's\n            // worth fixing.\n            // Inlined `enqueueUpdate` to remove interleaved update check\n\n            const updateQueue = fiber.updateQueue;\n\n            if (updateQueue === null) ; else {\n              const sharedQueue = updateQueue.shared;\n              const pending = sharedQueue.pending;\n\n              if (pending === null) {\n                // This is the first update. Create a circular list.\n                update.next = update;\n              } else {\n                update.next = pending.next;\n                pending.next = update;\n              }\n\n              sharedQueue.pending = update;\n            }\n          }\n\n          fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n          const alternate = fiber.alternate;\n\n          if (alternate !== null) {\n            alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n          }\n\n          scheduleContextWorkOnParentPath(fiber.return, renderLanes, workInProgress); // Mark the updated lanes on the list, too.\n\n          list.lanes = mergeLanes(list.lanes, renderLanes); // Since we already found a match, we can stop traversing the\n          // dependency list.\n\n          break;\n        }\n\n        dependency = dependency.next;\n      }\n    } else if (fiber.tag === ContextProvider) {\n      // Don't scan deeper if this is a matching provider\n      nextFiber = fiber.type === workInProgress.type ? null : fiber.child;\n    } else if (fiber.tag === DehydratedFragment) {\n      // If a dehydrated suspense boundary is in this subtree, we don't know\n      // if it will have any context consumers in it. The best we can do is\n      // mark it as having updates.\n      const parentSuspense = fiber.return;\n\n      if (parentSuspense === null) {\n        throw Error(formatProdErrorMessage(341));\n      }\n\n      parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);\n      const alternate = parentSuspense.alternate;\n\n      if (alternate !== null) {\n        alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n      } // This is intentionally passing this fiber as the parent\n      // because we want to schedule this fiber as having work\n      // on its children. We'll use the childLanes on\n      // this fiber to indicate that a context has changed.\n\n\n      scheduleContextWorkOnParentPath(parentSuspense, renderLanes, workInProgress);\n      nextFiber = fiber.sibling;\n    } else {\n      // Traverse down.\n      nextFiber = fiber.child;\n    }\n\n    if (nextFiber !== null) {\n      // Set the return pointer of the child to the work-in-progress fiber.\n      nextFiber.return = fiber;\n    } else {\n      // No child. Traverse to next sibling.\n      nextFiber = fiber;\n\n      while (nextFiber !== null) {\n        if (nextFiber === workInProgress) {\n          // We're back to the root of this subtree. Exit.\n          nextFiber = null;\n          break;\n        }\n\n        const sibling = nextFiber.sibling;\n\n        if (sibling !== null) {\n          // Set the return pointer of the sibling to the work-in-progress fiber.\n          sibling.return = nextFiber.return;\n          nextFiber = sibling;\n          break;\n        } // No more siblings. Traverse up.\n\n\n        nextFiber = nextFiber.return;\n      }\n    }\n\n    fiber = nextFiber;\n  }\n}\nfunction prepareToReadContext(workInProgress, renderLanes) {\n  currentlyRenderingFiber = workInProgress;\n  lastContextDependency = null;\n  lastFullyObservedContext = null;\n  const dependencies = workInProgress.dependencies;\n\n  if (dependencies !== null) {\n    {\n      const firstContext = dependencies.firstContext;\n\n      if (firstContext !== null) {\n        if (includesSomeLane(dependencies.lanes, renderLanes)) {\n          // Context list has a pending update. Mark that this fiber performed work.\n          markWorkInProgressReceivedUpdate();\n        } // Reset the work-in-progress list\n\n\n        dependencies.firstContext = null;\n      }\n    }\n  }\n}\nfunction readContext(context) {\n\n  return readContextForConsumer(currentlyRenderingFiber, context);\n}\nfunction readContextDuringReconciliation(consumer, context, renderLanes) {\n  if (currentlyRenderingFiber === null) {\n    prepareToReadContext(consumer, renderLanes);\n  }\n\n  return readContextForConsumer(consumer, context);\n}\n\nfunction readContextForConsumer(consumer, context) {\n  const value = context._currentValue ;\n\n  if (lastFullyObservedContext === context) ; else {\n    const contextItem = {\n      context: context,\n      memoizedValue: value,\n      next: null\n    };\n\n    if (lastContextDependency === null) {\n      if (consumer === null) {\n        throw Error(formatProdErrorMessage(308));\n      } // This is the first dependency for this component. Create a new list.\n\n\n      lastContextDependency = contextItem;\n      consumer.dependencies = {\n        lanes: NoLanes,\n        firstContext: contextItem\n      };\n    } else {\n      // Append a new context item.\n      lastContextDependency = lastContextDependency.next = contextItem;\n    }\n  }\n\n  return value;\n}\n\n// replace it with a lightweight shim that only has the features we use.\n\nconst AbortControllerLocal = typeof AbortController !== 'undefined' ? AbortController : // $FlowFixMe[missing-this-annot]\n// $FlowFixMe[prop-missing]\nfunction AbortControllerShim() {\n  const listeners = [];\n  const signal = this.signal = {\n    aborted: false,\n    addEventListener: (type, listener) => {\n      listeners.push(listener);\n    }\n  };\n\n  this.abort = () => {\n    signal.aborted = true;\n    listeners.forEach(listener => listener());\n  };\n} ; // Intentionally not named imports because Rollup would\n// use dynamic dispatch for CommonJS interop named imports.\n\nconst scheduleCallback$1 = Scheduler.unstable_scheduleCallback,\n      NormalPriority = Scheduler.unstable_NormalPriority;\nconst CacheContext = {\n  $$typeof: REACT_CONTEXT_TYPE,\n  // We don't use Consumer/Provider for Cache components. So we'll cheat.\n  Consumer: null,\n  Provider: null,\n  // We'll initialize these at the root.\n  _currentValue: null,\n  _currentValue2: null,\n  _threadCount: 0\n} ;\n// for retaining the cache once it is in use (retainCache), and releasing the cache\n// once it is no longer needed (releaseCache).\n\n\nfunction createCache() {\n\n  const cache = {\n    controller: new AbortControllerLocal(),\n    data: new Map(),\n    refCount: 0\n  };\n  return cache;\n}\nfunction retainCache(cache) {\n\n  cache.refCount++;\n} // Cleanup a cache instance, potentially freeing it if there are no more references\n\nfunction releaseCache(cache) {\n\n  cache.refCount--;\n\n  if (cache.refCount === 0) {\n    scheduleCallback$1(NormalPriority, () => {\n      cache.controller.abort();\n    });\n  }\n}\nfunction pushCacheProvider(workInProgress, cache) {\n\n  pushProvider(workInProgress, CacheContext, cache);\n}\nfunction popCacheProvider(workInProgress, cache) {\n\n  popProvider(CacheContext);\n}\n\nconst ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;\nfunction requestCurrentTransition() {\n  const transition = ReactCurrentBatchConfig$2.transition;\n\n  if (transition !== null) {\n    // Whenever a transition update is scheduled, register a callback on the\n    // transition object so we can get the return value of the scope function.\n    transition._callbacks.add(handleAsyncAction);\n  }\n\n  return transition;\n}\n\nfunction handleAsyncAction(transition, thenable) {\n  {\n    // This is an async action.\n    entangleAsyncAction(transition, thenable);\n  }\n}\n\nfunction notifyTransitionCallbacks(transition, returnValue) {\n  const callbacks = transition._callbacks;\n  callbacks.forEach(callback => callback(transition, returnValue));\n} // When retrying a Suspense/Offscreen boundary, we restore the cache that was\n// used during the previous render by placing it here, on the stack.\n\nconst resumedCache = createCursor(null); // During the render/synchronous commit phase, we don't actually process the\n\nfunction peekCacheFromPool() {\n  // If we're rendering inside a Suspense boundary that is currently hidden,\n  // we should use the same cache that we used during the previous render, if\n  // one exists.\n\n\n  const cacheResumedFromPreviousRender = resumedCache.current;\n\n  if (cacheResumedFromPreviousRender !== null) {\n    return cacheResumedFromPreviousRender;\n  } // Otherwise, check the root's cache pool.\n\n\n  const root = getWorkInProgressRoot();\n  const cacheFromRootCachePool = root.pooledCache;\n  return cacheFromRootCachePool;\n}\n\nfunction requestCacheFromPool(renderLanes) {\n  // Similar to previous function, except if there's not already a cache in the\n  // pool, we allocate a new one.\n  const cacheFromPool = peekCacheFromPool();\n\n  if (cacheFromPool !== null) {\n    return cacheFromPool;\n  } // Create a fresh cache and add it to the root cache pool. A cache can have\n  // multiple owners:\n  // - A cache pool that lives on the FiberRoot. This is where all fresh caches\n  //   are originally created (TODO: except during refreshes, until we implement\n  //   this correctly). The root takes ownership immediately when the cache is\n  //   created. Conceptually, root.pooledCache is an Option<Arc<Cache>> (owned),\n  //   and the return value of this function is a &Arc<Cache> (borrowed).\n  // - One of several fiber types: host root, cache boundary, suspense\n  //   component. These retain and release in the commit phase.\n\n\n  const root = getWorkInProgressRoot();\n  const freshCache = createCache();\n  root.pooledCache = freshCache;\n  retainCache(freshCache);\n\n  if (freshCache !== null) {\n    root.pooledCacheLanes |= renderLanes;\n  }\n\n  return freshCache;\n}\nfunction pushTransition(offscreenWorkInProgress, prevCachePool, newTransitions) {\n  {\n    if (prevCachePool === null) {\n      push(resumedCache, resumedCache.current);\n    } else {\n      push(resumedCache, prevCachePool.pool);\n    }\n  }\n}\nfunction popTransition(workInProgress, current) {\n  if (current !== null) {\n\n    {\n      pop(resumedCache);\n    }\n  }\n}\nfunction getSuspendedCache() {\n  // cache that would have been used to render fresh data during this render,\n  // if there was any, so that we can resume rendering with the same cache when\n  // we receive more data.\n\n\n  const cacheFromPool = peekCacheFromPool();\n\n  if (cacheFromPool === null) {\n    return null;\n  }\n\n  return {\n    // We must also save the parent, so that when we resume we can detect\n    // a refresh.\n    parent: CacheContext._currentValue ,\n    pool: cacheFromPool\n  };\n}\nfunction getOffscreenDeferredCache() {\n\n  const cacheFromPool = peekCacheFromPool();\n\n  if (cacheFromPool === null) {\n    return null;\n  }\n\n  return {\n    // We must also store the parent, so that when we resume we can detect\n    // a refresh.\n    parent: CacheContext._currentValue ,\n    pool: cacheFromPool\n  };\n}\n\n/**\n * Tag the fiber with an update effect. This turns a Placement into\n * a PlacementAndUpdate.\n */\n\nfunction markUpdate(workInProgress) {\n  workInProgress.flags |= Update;\n}\n\nfunction appendAllChildren(parent, workInProgress, needsVisibilityToggle, isHidden) {\n  {\n    // We only have the top Fiber that was created but we need recurse down its\n    // children to find all the terminal nodes.\n    let node = workInProgress.child;\n\n    while (node !== null) {\n      if (node.tag === HostComponent || node.tag === HostText) {\n        appendInitialChild(parent, node.stateNode);\n      } else if (node.tag === HostPortal || (node.tag === HostSingleton )) ; else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n\n      if (node === workInProgress) {\n        return;\n      } // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n\n      while (node.sibling === null) {\n        // $FlowFixMe[incompatible-use] found when upgrading Flow\n        if (node.return === null || node.return === workInProgress) {\n          return;\n        }\n\n        node = node.return;\n      } // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  }\n} // An unfortunate fork of appendAllChildren because we have two different parent types.\n\nfunction updateHostComponent(current, workInProgress, type, newProps, renderLanes) {\n  {\n    // If we have an alternate, that means this is an update and we need to\n    // schedule a side-effect to do the updates.\n    const oldProps = current.memoizedProps;\n\n    if (oldProps === newProps) {\n      // In mutation mode, this is sufficient for a bailout because\n      // we won't touch this node even if children changed.\n      return;\n    }\n\n    markUpdate(workInProgress);\n  }\n} // This function must be called at the very end of the complete phase, because\n// it might throw to suspend, and if the resource immediately loads, the work\n// loop will resume rendering as if the work-in-progress completed. So it must\n// fully complete.\n// TODO: This should ideally move to begin phase, but currently the instance is\n// not created until the complete phase. For our existing use cases, host nodes\n// that suspend don't have children, so it doesn't matter. But that might not\n// always be true in the future.\n\n\nfunction preloadInstanceAndSuspendIfNeeded(workInProgress, type, props, renderLanes) {\n  {\n    // If this flag was set previously, we can remove it. The flag\n    // represents whether this particular set of props might ever need to\n    // suspend. The safest thing to do is for maySuspendCommit to always\n    // return true, but if the renderer is reasonably confident that the\n    // underlying resource won't be evicted, it can return false as a\n    // performance optimization.\n    workInProgress.flags &= ~MaySuspendCommit;\n    return;\n  } // Mark this fiber with a flag. This gets set on all host instances\n}\n\nfunction preloadResourceAndSuspendIfNeeded(workInProgress, resource, type, props, renderLanes) {\n  // This is a fork of preloadInstanceAndSuspendIfNeeded, but for resources.\n  if (!mayResourceSuspendCommit(resource)) {\n    workInProgress.flags &= ~MaySuspendCommit;\n    return;\n  }\n\n  workInProgress.flags |= MaySuspendCommit;\n  const rootRenderLanes = getWorkInProgressRootRenderLanes();\n\n  if (!includesOnlyNonUrgentLanes(rootRenderLanes)) ; else {\n    const isReady = preloadResource(resource);\n\n    if (!isReady) {\n      if (shouldRemainOnPreviousScreen()) {\n        workInProgress.flags |= ShouldSuspendCommit;\n      } else {\n        suspendCommit();\n      }\n    }\n  }\n}\n\nfunction scheduleRetryEffect(workInProgress, retryQueue) {\n  const wakeables = retryQueue;\n\n  if (wakeables !== null) {\n    // Schedule an effect to attach a retry listener to the promise.\n    // TODO: Move to passive phase\n    workInProgress.flags |= Update;\n  } else {\n    // This boundary suspended, but no wakeables were added to the retry\n    // queue. Check if the renderer suspended commit. If so, this means\n    // that once the fallback is committed, we can immediately retry\n    // rendering again, because rendering wasn't actually blocked. Only\n    // the commit phase.\n    // TODO: Consider a model where we always schedule an immediate retry, even\n    // for normal Suspense. That way the retry can partially render up to the\n    // first thing that suspends.\n    if (workInProgress.flags & ScheduleRetry) {\n      const retryLane = // TODO: This check should probably be moved into claimNextRetryLane\n      // I also suspect that we need some further consolidation of offscreen\n      // and retry lanes.\n      workInProgress.tag !== OffscreenComponent ? claimNextRetryLane() : OffscreenLane;\n      workInProgress.lanes = mergeLanes(workInProgress.lanes, retryLane);\n    }\n  }\n}\n\nfunction updateHostText(current, workInProgress, oldText, newText) {\n  {\n    // If the text differs, mark it as an update. All the work in done in commitWork.\n    if (oldText !== newText) {\n      markUpdate(workInProgress);\n    }\n  }\n}\n\nfunction cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {\n  if (getIsHydrating()) {\n    // If we're hydrating, we should consume as many items as we can\n    // so we don't leave any behind.\n    return;\n  }\n\n  switch (renderState.tailMode) {\n    case 'hidden':\n      {\n        // Any insertions at the end of the tail list after this point\n        // should be invisible. If there are already mounted boundaries\n        // anything before them are not considered for collapsing.\n        // Therefore we need to go through the whole tail to find if\n        // there are any.\n        let tailNode = renderState.tail;\n        let lastTailNode = null;\n\n        while (tailNode !== null) {\n          if (tailNode.alternate !== null) {\n            lastTailNode = tailNode;\n          }\n\n          tailNode = tailNode.sibling;\n        } // Next we're simply going to delete all insertions after the\n        // last rendered item.\n\n\n        if (lastTailNode === null) {\n          // All remaining items in the tail are insertions.\n          renderState.tail = null;\n        } else {\n          // Detach the insertion after the last node that was already\n          // inserted.\n          lastTailNode.sibling = null;\n        }\n\n        break;\n      }\n\n    case 'collapsed':\n      {\n        // Any insertions at the end of the tail list after this point\n        // should be invisible. If there are already mounted boundaries\n        // anything before them are not considered for collapsing.\n        // Therefore we need to go through the whole tail to find if\n        // there are any.\n        let tailNode = renderState.tail;\n        let lastTailNode = null;\n\n        while (tailNode !== null) {\n          if (tailNode.alternate !== null) {\n            lastTailNode = tailNode;\n          }\n\n          tailNode = tailNode.sibling;\n        } // Next we're simply going to delete all insertions after the\n        // last rendered item.\n\n\n        if (lastTailNode === null) {\n          // All remaining items in the tail are insertions.\n          if (!hasRenderedATailFallback && renderState.tail !== null) {\n            // We suspended during the head. We want to show at least one\n            // row at the tail. So we'll keep on and cut off the rest.\n            renderState.tail.sibling = null;\n          } else {\n            renderState.tail = null;\n          }\n        } else {\n          // Detach the insertion after the last node that was already\n          // inserted.\n          lastTailNode.sibling = null;\n        }\n\n        break;\n      }\n  }\n}\n\nfunction bubbleProperties(completedWork) {\n  const didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;\n  let newChildLanes = NoLanes;\n  let subtreeFlags = NoFlags$1;\n\n  if (!didBailout) {\n    // Bubble up the earliest expiration time.\n    {\n      let child = completedWork.child;\n\n      while (child !== null) {\n        newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));\n        subtreeFlags |= child.subtreeFlags;\n        subtreeFlags |= child.flags; // Update the return pointer so the tree is consistent. This is a code\n        // smell because it assumes the commit phase is never concurrent with\n        // the render phase. Will address during refactor to alternate model.\n\n        child.return = completedWork;\n        child = child.sibling;\n      }\n    }\n\n    completedWork.subtreeFlags |= subtreeFlags;\n  } else {\n    // Bubble up the earliest expiration time.\n    {\n      let child = completedWork.child;\n\n      while (child !== null) {\n        newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes)); // \"Static\" flags share the lifetime of the fiber/hook they belong to,\n        // so we should bubble those up even during a bailout. All the other\n        // flags have a lifetime only of a single render + commit, so we should\n        // ignore them.\n\n        subtreeFlags |= child.subtreeFlags & StaticMask;\n        subtreeFlags |= child.flags & StaticMask; // Update the return pointer so the tree is consistent. This is a code\n        // smell because it assumes the commit phase is never concurrent with\n        // the render phase. Will address during refactor to alternate model.\n\n        child.return = completedWork;\n        child = child.sibling;\n      }\n    }\n\n    completedWork.subtreeFlags |= subtreeFlags;\n  }\n\n  completedWork.childLanes = newChildLanes;\n  return didBailout;\n}\n\nfunction completeDehydratedSuspenseBoundary(current, workInProgress, nextState) {\n  const wasHydrated = popHydrationState(workInProgress);\n\n  if (nextState !== null && nextState.dehydrated !== null) {\n    // We might be inside a hydration state the first time we're picking up this\n    // Suspense boundary, and also after we've reentered it for further hydration.\n    if (current === null) {\n      if (!wasHydrated) {\n        throw Error(formatProdErrorMessage(318));\n      }\n\n      prepareToHydrateHostSuspenseInstance(workInProgress);\n      bubbleProperties(workInProgress);\n\n      return false;\n    } else {\n      // state since we're now exiting out of it. popHydrationState doesn't do that for us.\n\n      resetHydrationState();\n\n      if ((workInProgress.flags & DidCapture) === NoFlags$1) {\n        // This boundary did not suspend so it's now hydrated and unsuspended.\n        workInProgress.memoizedState = null;\n      } // If nothing suspended, we need to schedule an effect to mark this boundary\n      // as having hydrated so events know that they're free to be invoked.\n      // It's also a signal to replay events and the suspense callback.\n      // If something suspended, schedule an effect to attach retry listeners.\n      // So we might as well always mark this.\n\n\n      workInProgress.flags |= Update;\n      bubbleProperties(workInProgress);\n\n      return false;\n    }\n  } else {\n    // Successfully completed this tree. If this was a forced client render,\n    // there may have been recoverable errors during first hydration\n    // attempt. If so, add them to a queue so we can log them in the\n    // commit phase.\n    upgradeHydrationErrorsToRecoverable(); // Fall through to normal Suspense path\n\n    return true;\n  }\n}\n\nfunction completeWork(current, workInProgress, renderLanes) {\n  const newProps = workInProgress.pendingProps; // Note: This intentionally doesn't check if we're hydrating because comparing\n  // to the current tree provider fiber is just as fast and less error-prone.\n  // Ideally we would have a special version of the work loop only\n  // for hydration.\n\n  popTreeContext(workInProgress);\n\n  switch (workInProgress.tag) {\n    case IndeterminateComponent:\n    case LazyComponent:\n    case SimpleMemoComponent:\n    case FunctionComponent:\n    case ForwardRef:\n    case Fragment:\n    case Mode:\n    case Profiler:\n    case ContextConsumer:\n    case MemoComponent:\n      bubbleProperties(workInProgress);\n      return null;\n\n    case ClassComponent:\n      {\n        const Component = workInProgress.type;\n\n        if (isContextProvider(Component)) {\n          popContext();\n        }\n\n        bubbleProperties(workInProgress);\n        return null;\n      }\n\n    case HostRoot:\n      {\n        const fiberRoot = workInProgress.stateNode;\n\n        {\n          let previousCache = null;\n\n          if (current !== null) {\n            previousCache = current.memoizedState.cache;\n          }\n\n          const cache = workInProgress.memoizedState.cache;\n\n          if (cache !== previousCache) {\n            // Run passive effects to retain/release the cache.\n            workInProgress.flags |= Passive$1;\n          }\n\n          popCacheProvider();\n        }\n        popHostContainer();\n        popTopLevelContextObject();\n\n        if (fiberRoot.pendingContext) {\n          fiberRoot.context = fiberRoot.pendingContext;\n          fiberRoot.pendingContext = null;\n        }\n\n        if (current === null || current.child === null) {\n          // If we hydrated, pop so that we can delete any remaining children\n          // that weren't hydrated.\n          const wasHydrated = popHydrationState(workInProgress);\n\n          if (wasHydrated) {\n            // the commit side-effects on the root.\n\n            markUpdate(workInProgress);\n          } else {\n            if (current !== null) {\n              const prevState = current.memoizedState;\n\n              if ( // Check if this is a client root\n              !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)\n              (workInProgress.flags & ForceClientRender) !== NoFlags$1) {\n                // Schedule an effect to clear this container at the start of the\n                // next commit. This handles the case of React rendering into a\n                // container with previous children. It's also safe to do for\n                // updates too, because current.child would only be null if the\n                // previous render was null (so the container would already\n                // be empty).\n                workInProgress.flags |= Snapshot; // If this was a forced client render, there may have been\n                // recoverable errors during first hydration attempt. If so, add\n                // them to a queue so we can log them in the commit phase.\n\n                upgradeHydrationErrorsToRecoverable();\n              }\n            }\n          }\n        }\n        bubbleProperties(workInProgress);\n\n        return null;\n      }\n\n    case HostHoistable:\n      {\n        {\n          const nextResource = workInProgress.memoizedState;\n\n          if (current === null) {\n            // We are mounting and must Update this Hoistable in this commit\n            // @TODO refactor this block to create the instance here in complete\n            // phase if we are not hydrating.\n            markUpdate(workInProgress);\n\n            if (nextResource !== null) {\n              // This is a Hoistable Resource\n              // This must come at the very end of the complete phase.\n              bubbleProperties(workInProgress);\n              preloadResourceAndSuspendIfNeeded(workInProgress, nextResource);\n              return null;\n            } else {\n              // This is a Hoistable Instance\n              // This must come at the very end of the complete phase.\n              bubbleProperties(workInProgress);\n              preloadInstanceAndSuspendIfNeeded(workInProgress);\n              return null;\n            }\n          } else {\n            // We are updating.\n            const currentResource = current.memoizedState;\n\n            if (nextResource !== currentResource) {\n              // We are transitioning to, from, or between Hoistable Resources\n              // and require an update\n              markUpdate(workInProgress);\n            }\n\n            if (nextResource !== null) {\n              // This is a Hoistable Resource\n              // This must come at the very end of the complete phase.\n              bubbleProperties(workInProgress);\n\n              if (nextResource === currentResource) {\n                workInProgress.flags &= ~MaySuspendCommit;\n              } else {\n                preloadResourceAndSuspendIfNeeded(workInProgress, nextResource);\n              }\n\n              return null;\n            } else {\n              // This is a Hoistable Instance\n              // We may have props to update on the Hoistable instance.\n              {\n                const oldProps = current.memoizedProps;\n\n                if (oldProps !== newProps) {\n                  markUpdate(workInProgress);\n                }\n              } // This must come at the very end of the complete phase.\n\n\n              bubbleProperties(workInProgress);\n              preloadInstanceAndSuspendIfNeeded(workInProgress);\n              return null;\n            }\n          }\n        } // Fall through\n\n      }\n\n    case HostSingleton:\n      {\n        {\n          popHostContext(workInProgress);\n          const rootContainerInstance = getRootHostContainer();\n          const type = workInProgress.type;\n\n          if (current !== null && workInProgress.stateNode != null) {\n            {\n              const oldProps = current.memoizedProps;\n\n              if (oldProps !== newProps) {\n                markUpdate(workInProgress);\n              }\n            }\n          } else {\n            if (!newProps) {\n              if (workInProgress.stateNode === null) {\n                throw Error(formatProdErrorMessage(166));\n              } // This can happen when we abort work.\n\n\n              bubbleProperties(workInProgress);\n              return null;\n            }\n\n            const currentHostContext = getHostContext();\n            const wasHydrated = popHydrationState(workInProgress);\n            let instance;\n\n            if (wasHydrated) {\n              // We ignore the boolean indicating there is an updateQueue because\n              // it is used only to set text children and HostSingletons do not\n              // use them.\n              prepareToHydrateHostInstance(workInProgress, currentHostContext);\n              instance = workInProgress.stateNode;\n            } else {\n              instance = resolveSingletonInstance(type, newProps, rootContainerInstance);\n              workInProgress.stateNode = instance;\n              markUpdate(workInProgress);\n            }\n          }\n\n          bubbleProperties(workInProgress);\n          return null;\n        } // Fall through\n\n      }\n\n    case HostComponent:\n      {\n        popHostContext(workInProgress);\n        const type = workInProgress.type;\n\n        if (current !== null && workInProgress.stateNode != null) {\n          updateHostComponent(current, workInProgress, type, newProps);\n        } else {\n          if (!newProps) {\n            if (workInProgress.stateNode === null) {\n              throw Error(formatProdErrorMessage(166));\n            } // This can happen when we abort work.\n\n\n            bubbleProperties(workInProgress);\n            return null;\n          }\n\n          const currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context\n          // \"stack\" as the parent. Then append children as we go in beginWork\n          // or completeWork depending on whether we want to add them top->down or\n          // bottom->up. Top->down is faster in IE11.\n\n          const wasHydrated = popHydrationState(workInProgress);\n\n          if (wasHydrated) {\n            // TODO: Move this and createInstance step into the beginPhase\n            // to consolidate.\n            prepareToHydrateHostInstance(workInProgress, currentHostContext);\n          } else {\n            const rootContainerInstance = getRootHostContainer();\n            const instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress); // TODO: For persistent renderers, we should pass children as part\n            // of the initial instance creation\n\n            appendAllChildren(instance, workInProgress);\n            workInProgress.stateNode = instance; // Certain renderers require commit-time effects for initial mount.\n            // (eg DOM renderer supports auto-focus for certain elements).\n            // Make sure such renderers get scheduled for later work.\n\n            if (finalizeInitialChildren(instance, type, newProps)) {\n              markUpdate(workInProgress);\n            }\n          }\n        }\n\n        bubbleProperties(workInProgress); // This must come at the very end of the complete phase, because it might\n        // throw to suspend, and if the resource immediately loads, the work loop\n        // will resume rendering as if the work-in-progress completed. So it must\n        // fully complete.\n\n        preloadInstanceAndSuspendIfNeeded(workInProgress);\n        return null;\n      }\n\n    case HostText:\n      {\n        const newText = newProps;\n\n        if (current && workInProgress.stateNode != null) {\n          const oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need\n          // to schedule a side-effect to do the updates.\n\n          updateHostText(current, workInProgress, oldText, newText);\n        } else {\n          if (typeof newText !== 'string') {\n            if (workInProgress.stateNode === null) {\n              throw Error(formatProdErrorMessage(166));\n            } // This can happen when we abort work.\n\n          }\n\n          const rootContainerInstance = getRootHostContainer();\n          const currentHostContext = getHostContext();\n          const wasHydrated = popHydrationState(workInProgress);\n\n          if (wasHydrated) {\n            prepareToHydrateHostTextInstance(workInProgress);\n          } else {\n            workInProgress.stateNode = createTextInstance(newText, rootContainerInstance, currentHostContext, workInProgress);\n          }\n        }\n\n        bubbleProperties(workInProgress);\n        return null;\n      }\n\n    case SuspenseComponent:\n      {\n        const nextState = workInProgress.memoizedState; // Special path for dehydrated boundaries. We may eventually move this\n        // to its own fiber type so that we can add other kinds of hydration\n        // boundaries that aren't associated with a Suspense tree. In anticipation\n        // of such a refactor, all the hydration logic is contained in\n        // this branch.\n\n        if (current === null || current.memoizedState !== null && current.memoizedState.dehydrated !== null) {\n          const fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current, workInProgress, nextState);\n\n          if (!fallthroughToNormalSuspensePath) {\n            if (workInProgress.flags & ForceClientRender) {\n              popSuspenseHandler(workInProgress); // Special case. There were remaining unhydrated nodes. We treat\n              // this as a mismatch. Revert to client rendering.\n\n              return workInProgress;\n            } else {\n              popSuspenseHandler(workInProgress); // Did not finish hydrating, either because this is the initial\n              // render or because something suspended.\n\n              return null;\n            }\n          } // Continue with the normal Suspense path.\n\n        }\n\n        popSuspenseHandler(workInProgress);\n\n        if ((workInProgress.flags & DidCapture) !== NoFlags$1) {\n          // Something suspended. Re-render with the fallback children.\n          workInProgress.lanes = renderLanes; // Do not reset the effect list.\n\n\n          return workInProgress;\n        }\n\n        const nextDidTimeout = nextState !== null;\n        const prevDidTimeout = current !== null && current.memoizedState !== null;\n\n        if (nextDidTimeout) {\n          const offscreenFiber = workInProgress.child;\n          let previousCache = null;\n\n          if (offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null && offscreenFiber.alternate.memoizedState.cachePool !== null) {\n            previousCache = offscreenFiber.alternate.memoizedState.cachePool.pool;\n          }\n\n          let cache = null;\n\n          if (offscreenFiber.memoizedState !== null && offscreenFiber.memoizedState.cachePool !== null) {\n            cache = offscreenFiber.memoizedState.cachePool.pool;\n          }\n\n          if (cache !== previousCache) {\n            // Run passive effects to retain/release the cache.\n            offscreenFiber.flags |= Passive$1;\n          }\n        } // If the suspended state of the boundary changes, we need to schedule\n        // a passive effect, which is when we process the transitions\n\n\n        if (nextDidTimeout !== prevDidTimeout) {\n          // an effect to toggle the subtree's visibility. When we switch from\n          // fallback -> primary, the inner Offscreen fiber schedules this effect\n          // as part of its normal complete phase. But when we switch from\n          // primary -> fallback, the inner Offscreen fiber does not have a complete\n          // phase. So we need to schedule its effect here.\n          //\n          // We also use this flag to connect/disconnect the effects, but the same\n          // logic applies: when re-connecting, the Offscreen fiber's complete\n          // phase will handle scheduling the effect. It's only when the fallback\n          // is active that we have to do anything special.\n\n\n          if (nextDidTimeout) {\n            const offscreenFiber = workInProgress.child;\n            offscreenFiber.flags |= Visibility;\n          }\n        }\n\n        const retryQueue = workInProgress.updateQueue;\n        scheduleRetryEffect(workInProgress, retryQueue);\n\n        bubbleProperties(workInProgress);\n\n        return null;\n      }\n\n    case HostPortal:\n      popHostContainer();\n\n      if (current === null) {\n        preparePortalMount(workInProgress.stateNode.containerInfo);\n      }\n\n      bubbleProperties(workInProgress);\n      return null;\n\n    case ContextProvider:\n      // Pop provider fiber\n      let context;\n\n      {\n        context = workInProgress.type._context;\n      }\n\n      popProvider(context);\n      bubbleProperties(workInProgress);\n      return null;\n\n    case IncompleteClassComponent:\n      {\n        // Same as class component case. I put it down here so that the tags are\n        // sequential to ensure this switch is compiled to a jump table.\n        const Component = workInProgress.type;\n\n        if (isContextProvider(Component)) {\n          popContext();\n        }\n\n        bubbleProperties(workInProgress);\n        return null;\n      }\n\n    case SuspenseListComponent:\n      {\n        popSuspenseListContext();\n        const renderState = workInProgress.memoizedState;\n\n        if (renderState === null) {\n          // We're running in the default, \"independent\" mode.\n          // We don't do anything in this mode.\n          bubbleProperties(workInProgress);\n          return null;\n        }\n\n        let didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags$1;\n        const renderedTail = renderState.rendering;\n\n        if (renderedTail === null) {\n          // We just rendered the head.\n          if (!didSuspendAlready) {\n            // This is the first pass. We need to figure out if anything is still\n            // suspended in the rendered set.\n            // If new content unsuspended, but there's still some content that\n            // didn't. Then we need to do a second pass that forces everything\n            // to keep showing their fallbacks.\n            // We might be suspended if something in this render pass suspended, or\n            // something in the previous committed pass suspended. Otherwise,\n            // there's no chance so we can skip the expensive call to\n            // findFirstSuspended.\n            const cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.flags & DidCapture) === NoFlags$1);\n\n            if (!cannotBeSuspended) {\n              let row = workInProgress.child;\n\n              while (row !== null) {\n                const suspended = findFirstSuspended(row);\n\n                if (suspended !== null) {\n                  didSuspendAlready = true;\n                  workInProgress.flags |= DidCapture;\n                  cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as\n                  // part of the second pass. In that case nothing will subscribe to\n                  // its thenables. Instead, we'll transfer its thenables to the\n                  // SuspenseList so that it can retry if they resolve.\n                  // There might be multiple of these in the list but since we're\n                  // going to wait for all of them anyway, it doesn't really matter\n                  // which ones gets to ping. In theory we could get clever and keep\n                  // track of how many dependencies remain but it gets tricky because\n                  // in the meantime, we can add/remove/change items and dependencies.\n                  // We might bail out of the loop before finding any but that\n                  // doesn't matter since that means that the other boundaries that\n                  // we did find already has their listeners attached.\n\n                  const retryQueue = suspended.updateQueue;\n                  workInProgress.updateQueue = retryQueue;\n                  scheduleRetryEffect(workInProgress, retryQueue); // Rerender the whole list, but this time, we'll force fallbacks\n                  // to stay in place.\n                  // Reset the effect flags before doing the second pass since that's now invalid.\n                  // Reset the child fibers to their original state.\n\n                  workInProgress.subtreeFlags = NoFlags$1;\n                  resetChildFibers(workInProgress, renderLanes); // Set up the Suspense List Context to force suspense and\n                  // immediately rerender the children.\n\n                  pushSuspenseListContext(workInProgress, setShallowSuspenseListContext(suspenseStackCursor.current, ForceSuspenseFallback)); // Don't bubble properties in this case.\n\n                  return workInProgress.child;\n                }\n\n                row = row.sibling;\n              }\n            }\n\n            if (renderState.tail !== null && now() > getRenderTargetTime()) {\n              // We have already passed our CPU deadline but we still have rows\n              // left in the tail. We'll just give up further attempts to render\n              // the main content and only render fallbacks.\n              workInProgress.flags |= DidCapture;\n              didSuspendAlready = true;\n              cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this\n              // to get it started back up to attempt the next item. While in terms\n              // of priority this work has the same priority as this current render,\n              // it's not part of the same transition once the transition has\n              // committed. If it's sync, we still want to yield so that it can be\n              // painted. Conceptually, this is really the same as pinging.\n              // We can use any RetryLane even if it's the one currently rendering\n              // since we're leaving it behind on this node.\n\n              workInProgress.lanes = SomeRetryLane;\n            }\n          } else {\n            cutOffTailIfNeeded(renderState, false);\n          } // Next we're going to render the tail.\n\n        } else {\n          // Append the rendered row to the child list.\n          if (!didSuspendAlready) {\n            const suspended = findFirstSuspended(renderedTail);\n\n            if (suspended !== null) {\n              workInProgress.flags |= DidCapture;\n              didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't\n              // get lost if this row ends up dropped during a second pass.\n\n              const retryQueue = suspended.updateQueue;\n              workInProgress.updateQueue = retryQueue;\n              scheduleRetryEffect(workInProgress, retryQueue);\n              cutOffTailIfNeeded(renderState, true); // This might have been modified.\n\n              if (renderState.tail === null && renderState.tailMode === 'hidden' && !renderedTail.alternate && !getIsHydrating() // We don't cut it if we're hydrating.\n              ) {\n                  // We're done.\n                  bubbleProperties(workInProgress);\n                  return null;\n                }\n            } else if ( // The time it took to render last row is greater than the remaining\n            // time we have to render. So rendering one more row would likely\n            // exceed it.\n            now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes !== OffscreenLane) {\n              // We have now passed our CPU deadline and we'll just give up further\n              // attempts to render the main content and only render fallbacks.\n              // The assumption is that this is usually faster.\n              workInProgress.flags |= DidCapture;\n              didSuspendAlready = true;\n              cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this\n              // to get it started back up to attempt the next item. While in terms\n              // of priority this work has the same priority as this current render,\n              // it's not part of the same transition once the transition has\n              // committed. If it's sync, we still want to yield so that it can be\n              // painted. Conceptually, this is really the same as pinging.\n              // We can use any RetryLane even if it's the one currently rendering\n              // since we're leaving it behind on this node.\n\n              workInProgress.lanes = SomeRetryLane;\n            }\n          }\n\n          if (renderState.isBackwards) {\n            // The effect list of the backwards tail will have been added\n            // to the end. This breaks the guarantee that life-cycles fire in\n            // sibling order but that isn't a strong guarantee promised by React.\n            // Especially since these might also just pop in during future commits.\n            // Append to the beginning of the list.\n            renderedTail.sibling = workInProgress.child;\n            workInProgress.child = renderedTail;\n          } else {\n            const previousSibling = renderState.last;\n\n            if (previousSibling !== null) {\n              previousSibling.sibling = renderedTail;\n            } else {\n              workInProgress.child = renderedTail;\n            }\n\n            renderState.last = renderedTail;\n          }\n        }\n\n        if (renderState.tail !== null) {\n          // We still have tail rows to render.\n          // Pop a row.\n          const next = renderState.tail;\n          renderState.rendering = next;\n          renderState.tail = next.sibling;\n          renderState.renderingStartTime = now();\n          next.sibling = null; // Restore the context.\n          // TODO: We can probably just avoid popping it instead and only\n          // setting it the first time we go from not suspended to suspended.\n\n          let suspenseContext = suspenseStackCursor.current;\n\n          if (didSuspendAlready) {\n            suspenseContext = setShallowSuspenseListContext(suspenseContext, ForceSuspenseFallback);\n          } else {\n            suspenseContext = setDefaultShallowSuspenseListContext(suspenseContext);\n          }\n\n          pushSuspenseListContext(workInProgress, suspenseContext); // Do a pass over the next row.\n          // Don't bubble properties in this case.\n\n          return next;\n        }\n\n        bubbleProperties(workInProgress);\n        return null;\n      }\n\n    case ScopeComponent:\n      {\n\n        break;\n      }\n\n    case OffscreenComponent:\n    case LegacyHiddenComponent:\n      {\n        popSuspenseHandler(workInProgress);\n        popHiddenContext();\n        const nextState = workInProgress.memoizedState;\n        const nextIsHidden = nextState !== null; // Schedule a Visibility effect if the visibility has changed\n\n        {\n          if (current !== null) {\n            const prevState = current.memoizedState;\n            const prevIsHidden = prevState !== null;\n\n            if (prevIsHidden !== nextIsHidden) {\n              workInProgress.flags |= Visibility;\n            }\n          } else {\n            // On initial mount, we only need a Visibility effect if the tree\n            // is hidden.\n            if (nextIsHidden) {\n              workInProgress.flags |= Visibility;\n            }\n          }\n        }\n\n        if (!nextIsHidden || (workInProgress.mode & ConcurrentMode) === NoMode) {\n          bubbleProperties(workInProgress);\n        } else {\n          // Don't bubble properties for hidden children unless we're rendering\n          // at offscreen priority.\n          if (includesSomeLane(renderLanes, OffscreenLane) && // Also don't bubble if the tree suspended\n          (workInProgress.flags & DidCapture) === NoLanes) {\n            bubbleProperties(workInProgress); // Check if there was an insertion or update in the hidden subtree.\n            // If so, we need to hide those nodes in the commit phase, so\n            // schedule a visibility effect.\n\n            if (workInProgress.subtreeFlags & (Placement | Update)) {\n              workInProgress.flags |= Visibility;\n            }\n          }\n        }\n\n        const offscreenQueue = workInProgress.updateQueue;\n\n        if (offscreenQueue !== null) {\n          const retryQueue = offscreenQueue.retryQueue;\n          scheduleRetryEffect(workInProgress, retryQueue);\n        }\n\n        {\n          let previousCache = null;\n\n          if (current !== null && current.memoizedState !== null && current.memoizedState.cachePool !== null) {\n            previousCache = current.memoizedState.cachePool.pool;\n          }\n\n          let cache = null;\n\n          if (workInProgress.memoizedState !== null && workInProgress.memoizedState.cachePool !== null) {\n            cache = workInProgress.memoizedState.cachePool.pool;\n          }\n\n          if (cache !== previousCache) {\n            // Run passive effects to retain/release the cache.\n            workInProgress.flags |= Passive$1;\n          }\n        }\n\n        popTransition(workInProgress, current);\n        return null;\n      }\n\n    case CacheComponent:\n      {\n        {\n          let previousCache = null;\n\n          if (current !== null) {\n            previousCache = current.memoizedState.cache;\n          }\n\n          const cache = workInProgress.memoizedState.cache;\n\n          if (cache !== previousCache) {\n            // Run passive effects to retain/release the cache.\n            workInProgress.flags |= Passive$1;\n          }\n\n          popCacheProvider();\n          bubbleProperties(workInProgress);\n        }\n\n        return null;\n      }\n\n    case TracingMarkerComponent:\n      {\n\n        return null;\n      }\n  }\n\n  throw Error(formatProdErrorMessage(156, workInProgress.tag));\n}\n\nfunction unwindWork(current, workInProgress, renderLanes) {\n  // Note: This intentionally doesn't check if we're hydrating because comparing\n  // to the current tree provider fiber is just as fast and less error-prone.\n  // Ideally we would have a special version of the work loop only\n  // for hydration.\n  popTreeContext(workInProgress);\n\n  switch (workInProgress.tag) {\n    case ClassComponent:\n      {\n        const Component = workInProgress.type;\n\n        if (isContextProvider(Component)) {\n          popContext();\n        }\n\n        const flags = workInProgress.flags;\n\n        if (flags & ShouldCapture) {\n          workInProgress.flags = flags & ~ShouldCapture | DidCapture;\n\n          return workInProgress;\n        }\n\n        return null;\n      }\n\n    case HostRoot:\n      {\n\n        {\n          popCacheProvider();\n        }\n        popHostContainer();\n        popTopLevelContextObject();\n        const flags = workInProgress.flags;\n\n        if ((flags & ShouldCapture) !== NoFlags$1 && (flags & DidCapture) === NoFlags$1) {\n          // There was an error during render that wasn't captured by a suspense\n          // boundary. Do a second pass on the root to unmount the children.\n          workInProgress.flags = flags & ~ShouldCapture | DidCapture;\n          return workInProgress;\n        } // We unwound to the root without completing it. Exit.\n\n\n        return null;\n      }\n\n    case HostHoistable:\n    case HostSingleton:\n    case HostComponent:\n      {\n        // TODO: popHydrationState\n        popHostContext(workInProgress);\n        return null;\n      }\n\n    case SuspenseComponent:\n      {\n        popSuspenseHandler(workInProgress);\n        const suspenseState = workInProgress.memoizedState;\n\n        if (suspenseState !== null && suspenseState.dehydrated !== null) {\n          if (workInProgress.alternate === null) {\n            throw Error(formatProdErrorMessage(340));\n          }\n\n          resetHydrationState();\n        }\n\n        const flags = workInProgress.flags;\n\n        if (flags & ShouldCapture) {\n          workInProgress.flags = flags & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.\n\n          return workInProgress;\n        }\n\n        return null;\n      }\n\n    case SuspenseListComponent:\n      {\n        popSuspenseListContext(); // SuspenseList doesn't actually catch anything. It should've been\n        // caught by a nested boundary. If not, it should bubble through.\n\n        return null;\n      }\n\n    case HostPortal:\n      popHostContainer();\n      return null;\n\n    case ContextProvider:\n      let context;\n\n      {\n        context = workInProgress.type._context;\n      }\n\n      popProvider(context);\n      return null;\n\n    case OffscreenComponent:\n    case LegacyHiddenComponent:\n      {\n        popSuspenseHandler(workInProgress);\n        popHiddenContext();\n        popTransition(workInProgress, current);\n        const flags = workInProgress.flags;\n\n        if (flags & ShouldCapture) {\n          workInProgress.flags = flags & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.\n\n          return workInProgress;\n        }\n\n        return null;\n      }\n\n    case CacheComponent:\n      {\n        popCacheProvider();\n      }\n\n      return null;\n\n    case TracingMarkerComponent:\n\n      return null;\n\n    default:\n      return null;\n  }\n}\n\nfunction unwindInterruptedWork(current, interruptedWork, renderLanes) {\n  // Note: This intentionally doesn't check if we're hydrating because comparing\n  // to the current tree provider fiber is just as fast and less error-prone.\n  // Ideally we would have a special version of the work loop only\n  // for hydration.\n  popTreeContext(interruptedWork);\n\n  switch (interruptedWork.tag) {\n    case ClassComponent:\n      {\n        const childContextTypes = interruptedWork.type.childContextTypes;\n\n        if (childContextTypes !== null && childContextTypes !== undefined) {\n          popContext();\n        }\n\n        break;\n      }\n\n    case HostRoot:\n      {\n\n        {\n          popCacheProvider();\n        }\n        popHostContainer();\n        popTopLevelContextObject();\n        break;\n      }\n\n    case HostHoistable:\n    case HostSingleton:\n    case HostComponent:\n      {\n        popHostContext(interruptedWork);\n        break;\n      }\n\n    case HostPortal:\n      popHostContainer();\n      break;\n\n    case SuspenseComponent:\n      popSuspenseHandler(interruptedWork);\n      break;\n\n    case SuspenseListComponent:\n      popSuspenseListContext();\n      break;\n\n    case ContextProvider:\n      let context;\n\n      {\n        context = interruptedWork.type._context;\n      }\n\n      popProvider(context);\n      break;\n\n    case OffscreenComponent:\n    case LegacyHiddenComponent:\n      popSuspenseHandler(interruptedWork);\n      popHiddenContext();\n      popTransition(interruptedWork, current);\n      break;\n\n    case CacheComponent:\n      {\n        popCacheProvider();\n      }\n\n      break;\n  }\n}\n\n// Allows us to avoid traversing the return path to find the nearest Offscreen ancestor.\n\n\nlet offscreenSubtreeIsHidden = false;\nlet offscreenSubtreeWasHidden = false;\nconst PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;\nlet nextEffect = null; // Used for Profiling builds to track updaters.\n\nfunction shouldProfile(current) {\n  return enableProfilerTimer   ;\n}\n\nfunction callComponentWillUnmountWithTimer(current, instance) {\n  instance.props = current.memoizedProps;\n  instance.state = current.memoizedState;\n\n  {\n    instance.componentWillUnmount();\n  }\n} // Capture errors so they don't interrupt unmounting.\n\n\nfunction safelyCallComponentWillUnmount(current, nearestMountedAncestor, instance) {\n  try {\n    callComponentWillUnmountWithTimer(current, instance);\n  } catch (error) {\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n} // Capture errors so they don't interrupt mounting.\n\n\nfunction safelyAttachRef(current, nearestMountedAncestor) {\n  try {\n    commitAttachRef(current);\n  } catch (error) {\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n}\n\nfunction safelyDetachRef(current, nearestMountedAncestor) {\n  const ref = current.ref;\n  const refCleanup = current.refCleanup;\n\n  if (ref !== null) {\n    if (typeof refCleanup === 'function') {\n      try {\n        if (shouldProfile(current)) ; else {\n          refCleanup();\n        }\n      } catch (error) {\n        captureCommitPhaseError(current, nearestMountedAncestor, error);\n      } finally {\n        // `refCleanup` has been called. Nullify all references to it to prevent double invocation.\n        current.refCleanup = null;\n        const finishedWork = current.alternate;\n\n        if (finishedWork != null) {\n          finishedWork.refCleanup = null;\n        }\n      }\n    } else if (typeof ref === 'function') {\n      let retVal;\n\n      try {\n        if (shouldProfile(current)) ; else {\n          retVal = ref(null);\n        }\n      } catch (error) {\n        captureCommitPhaseError(current, nearestMountedAncestor, error);\n      }\n    } else {\n      // $FlowFixMe[incompatible-use] unable to narrow type to RefObject\n      ref.current = null;\n    }\n  }\n}\n\nfunction safelyCallDestroy(current, nearestMountedAncestor, destroy) {\n  try {\n    destroy();\n  } catch (error) {\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n}\nlet shouldFireAfterActiveInstanceBlur = false;\nfunction commitBeforeMutationEffects(root, firstChild) {\n  prepareForCommit();\n  nextEffect = firstChild;\n  commitBeforeMutationEffects_begin(); // We no longer need to track the active instance fiber\n\n  const shouldFire = shouldFireAfterActiveInstanceBlur;\n  shouldFireAfterActiveInstanceBlur = false;\n  return shouldFire;\n}\n\nfunction commitBeforeMutationEffects_begin() {\n  while (nextEffect !== null) {\n    const fiber = nextEffect; // This phase is only used for beforeActiveInstanceBlur.\n\n    const child = fiber.child;\n\n    if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags$1 && child !== null) {\n      child.return = fiber;\n      nextEffect = child;\n    } else {\n      commitBeforeMutationEffects_complete();\n    }\n  }\n}\n\nfunction commitBeforeMutationEffects_complete() {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n\n    try {\n      commitBeforeMutationEffectsOnFiber(fiber);\n    } catch (error) {\n      captureCommitPhaseError(fiber, fiber.return, error);\n    }\n    const sibling = fiber.sibling;\n\n    if (sibling !== null) {\n      sibling.return = fiber.return;\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction commitBeforeMutationEffectsOnFiber(finishedWork) {\n  const current = finishedWork.alternate;\n  const flags = finishedWork.flags;\n\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n      {\n\n        break;\n      }\n\n    case ForwardRef:\n    case SimpleMemoComponent:\n      {\n        break;\n      }\n\n    case ClassComponent:\n      {\n        if ((flags & Snapshot) !== NoFlags$1) {\n          if (current !== null) {\n            const prevProps = current.memoizedProps;\n            const prevState = current.memoizedState;\n            const instance = finishedWork.stateNode; // We could update instance props and state here,\n\n            const snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);\n\n            instance.__reactInternalSnapshotBeforeUpdate = snapshot;\n          }\n        }\n\n        break;\n      }\n\n    case HostRoot:\n      {\n        if ((flags & Snapshot) !== NoFlags$1) {\n          {\n            const root = finishedWork.stateNode;\n            clearContainer(root.containerInfo);\n          }\n        }\n\n        break;\n      }\n\n    case HostComponent:\n    case HostHoistable:\n    case HostSingleton:\n    case HostText:\n    case HostPortal:\n    case IncompleteClassComponent:\n      // Nothing to do for these component types\n      break;\n\n    default:\n      {\n        if ((flags & Snapshot) !== NoFlags$1) {\n          throw Error(formatProdErrorMessage(163));\n        }\n      }\n  }\n}\n\nfunction commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {\n  const updateQueue = finishedWork.updateQueue;\n  const lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n\n  if (lastEffect !== null) {\n    const firstEffect = lastEffect.next;\n    let effect = firstEffect;\n\n    do {\n      if ((effect.tag & flags) === flags) {\n        // Unmount\n        const inst = effect.inst;\n        const destroy = inst.destroy;\n\n        if (destroy !== undefined) {\n          inst.destroy = undefined;\n\n          safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);\n        }\n      }\n\n      effect = effect.next;\n    } while (effect !== firstEffect);\n  }\n}\n\nfunction commitHookEffectListMount(flags, finishedWork) {\n  const updateQueue = finishedWork.updateQueue;\n  const lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n\n  if (lastEffect !== null) {\n    const firstEffect = lastEffect.next;\n    let effect = firstEffect;\n\n    do {\n      if ((effect.tag & flags) === flags) {\n\n\n        const create = effect.create;\n\n        const inst = effect.inst;\n        const destroy = create();\n        inst.destroy = destroy;\n      }\n\n      effect = effect.next;\n    } while (effect !== firstEffect);\n  }\n}\n\nfunction commitHookLayoutEffects(finishedWork, hookFlags) {\n  // At this point layout effects have already been destroyed (during mutation phase).\n  // This is done to prevent sibling component effects from interfering with each other,\n  // e.g. a destroy function in one component should never override a ref set\n  // by a create function in another component during the same commit.\n  {\n    try {\n      commitHookEffectListMount(hookFlags, finishedWork);\n    } catch (error) {\n      captureCommitPhaseError(finishedWork, finishedWork.return, error);\n    }\n  }\n}\n\nfunction commitClassLayoutLifecycles(finishedWork, current) {\n  const instance = finishedWork.stateNode;\n\n  if (current === null) {\n\n    {\n      try {\n        instance.componentDidMount();\n      } catch (error) {\n        captureCommitPhaseError(finishedWork, finishedWork.return, error);\n      }\n    }\n  } else {\n    const prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);\n    const prevState = current.memoizedState; // We could update instance props and state here,\n\n    {\n      try {\n        instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);\n      } catch (error) {\n        captureCommitPhaseError(finishedWork, finishedWork.return, error);\n      }\n    }\n  }\n}\n\nfunction commitClassCallbacks(finishedWork) {\n  // TODO: I think this is now always non-null by the time it reaches the\n  // commit phase. Consider removing the type check.\n  const updateQueue = finishedWork.updateQueue;\n\n  if (updateQueue !== null) {\n    const instance = finishedWork.stateNode;\n    // but instead we rely on them being set during last render.\n    // TODO: revisit this when we implement resuming.\n\n\n    try {\n      commitCallbacks(updateQueue, instance);\n    } catch (error) {\n      captureCommitPhaseError(finishedWork, finishedWork.return, error);\n    }\n  }\n}\n\nfunction commitHostComponentMount(finishedWork) {\n  const type = finishedWork.type;\n  const props = finishedWork.memoizedProps;\n  const instance = finishedWork.stateNode;\n\n  try {\n    commitMount(instance, type, props, finishedWork);\n  } catch (error) {\n    captureCommitPhaseError(finishedWork, finishedWork.return, error);\n  }\n}\n\nfunction commitLayoutEffectOnFiber(finishedRoot, current, finishedWork, committedLanes) {\n  // When updating this function, also update reappearLayoutEffects, which does\n  // most of the same things when an offscreen tree goes from hidden -> visible.\n  const flags = finishedWork.flags;\n\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent:\n      {\n        recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);\n\n        if (flags & Update) {\n          commitHookLayoutEffects(finishedWork, Layout | HasEffect);\n        }\n\n        break;\n      }\n\n    case ClassComponent:\n      {\n        recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);\n\n        if (flags & Update) {\n          commitClassLayoutLifecycles(finishedWork, current);\n        }\n\n        if (flags & Callback) {\n          commitClassCallbacks(finishedWork);\n        }\n\n        if (flags & Ref) {\n          safelyAttachRef(finishedWork, finishedWork.return);\n        }\n\n        break;\n      }\n\n    case HostRoot:\n      {\n        recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);\n\n        if (flags & Callback) {\n          // TODO: I think this is now always non-null by the time it reaches the\n          // commit phase. Consider removing the type check.\n          const updateQueue = finishedWork.updateQueue;\n\n          if (updateQueue !== null) {\n            let instance = null;\n\n            if (finishedWork.child !== null) {\n              switch (finishedWork.child.tag) {\n                case HostSingleton:\n                case HostComponent:\n                  instance = getPublicInstance(finishedWork.child.stateNode);\n                  break;\n\n                case ClassComponent:\n                  instance = finishedWork.child.stateNode;\n                  break;\n              }\n            }\n\n            try {\n              commitCallbacks(updateQueue, instance);\n            } catch (error) {\n              captureCommitPhaseError(finishedWork, finishedWork.return, error);\n            }\n          }\n        }\n\n        break;\n      }\n\n    case HostHoistable:\n      {\n        {\n          recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);\n\n          if (flags & Ref) {\n            safelyAttachRef(finishedWork, finishedWork.return);\n          }\n\n          break;\n        } // Fall through\n\n      }\n\n    case HostSingleton:\n    case HostComponent:\n      {\n        recursivelyTraverseLayoutEffects(finishedRoot, finishedWork); // Renderers may schedule work to be done after host components are mounted\n        // (eg DOM renderer may schedule auto-focus for inputs and form controls).\n        // These effects should only be committed when components are first mounted,\n        // aka when there is no current/alternate.\n\n        if (current === null && flags & Update) {\n          commitHostComponentMount(finishedWork);\n        }\n\n        if (flags & Ref) {\n          safelyAttachRef(finishedWork, finishedWork.return);\n        }\n\n        break;\n      }\n\n    case Profiler:\n      {\n        recursivelyTraverseLayoutEffects(finishedRoot, finishedWork); // TODO: Should this fire inside an offscreen tree? Or should it wait to\n\n        break;\n      }\n\n    case SuspenseComponent:\n      {\n        recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);\n\n        if (flags & Update) {\n          commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);\n        }\n\n        break;\n      }\n\n    case OffscreenComponent:\n      {\n        const isModernRoot = (finishedWork.mode & ConcurrentMode) !== NoMode;\n\n        if (isModernRoot) {\n          const isHidden = finishedWork.memoizedState !== null;\n          const newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;\n\n          if (newOffscreenSubtreeIsHidden) ; else {\n            // The Offscreen tree is visible.\n            const wasHidden = current !== null && current.memoizedState !== null;\n            const newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;\n            const prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;\n            const prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;\n            offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;\n            offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;\n\n            if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {\n              // This is the root of a reappearing boundary. As we continue\n              // traversing the layout effects, we must also re-mount layout\n              // effects that were unmounted when the Offscreen subtree was\n              // hidden. So this is a superset of the normal commitLayoutEffects.\n              const includeWorkInProgressEffects = (finishedWork.subtreeFlags & LayoutMask) !== NoFlags$1;\n              recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);\n            } else {\n              recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);\n            }\n\n            offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;\n            offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n          }\n        } else {\n          recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);\n        }\n\n        if (flags & Ref) {\n          const props = finishedWork.memoizedProps;\n\n          if (props.mode === 'manual') {\n            safelyAttachRef(finishedWork, finishedWork.return);\n          } else {\n            safelyDetachRef(finishedWork, finishedWork.return);\n          }\n        }\n\n        break;\n      }\n\n    default:\n      {\n        recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);\n        break;\n      }\n  }\n}\n\nfunction hideOrUnhideAllChildren(finishedWork, isHidden) {\n  // Only hide or unhide the top-most host nodes.\n  let hostSubtreeRoot = null;\n\n  {\n    // We only have the top Fiber that was inserted but we need to recurse down its\n    // children to find all the terminal nodes.\n    let node = finishedWork;\n\n    while (true) {\n      if (node.tag === HostComponent || (node.tag === HostHoistable ) || (node.tag === HostSingleton )) {\n        if (hostSubtreeRoot === null) {\n          hostSubtreeRoot = node;\n\n          try {\n            const instance = node.stateNode;\n\n            if (isHidden) {\n              hideInstance(instance);\n            } else {\n              unhideInstance(node.stateNode, node.memoizedProps);\n            }\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n        }\n      } else if (node.tag === HostText) {\n        if (hostSubtreeRoot === null) {\n          try {\n            const instance = node.stateNode;\n\n            if (isHidden) {\n              hideTextInstance(instance);\n            } else {\n              unhideTextInstance(instance, node.memoizedProps);\n            }\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n        }\n      } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ; else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n\n      if (node === finishedWork) {\n        return;\n      }\n\n      while (node.sibling === null) {\n        if (node.return === null || node.return === finishedWork) {\n          return;\n        }\n\n        if (hostSubtreeRoot === node) {\n          hostSubtreeRoot = null;\n        }\n\n        node = node.return;\n      }\n\n      if (hostSubtreeRoot === node) {\n        hostSubtreeRoot = null;\n      }\n\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  }\n}\n\nfunction commitAttachRef(finishedWork) {\n  const ref = finishedWork.ref;\n\n  if (ref !== null) {\n    const instance = finishedWork.stateNode;\n    let instanceToUse;\n\n    switch (finishedWork.tag) {\n      case HostHoistable:\n      case HostSingleton:\n      case HostComponent:\n        instanceToUse = getPublicInstance(instance);\n        break;\n\n      default:\n        instanceToUse = instance;\n    } // Moved outside to ensure DCE works with this flag\n\n    if (typeof ref === 'function') {\n      {\n        finishedWork.refCleanup = ref(instanceToUse);\n      }\n    } else {\n\n\n      ref.current = instanceToUse;\n    }\n  }\n}\n\nfunction detachFiberMutation(fiber) {\n  // Cut off the return pointer to disconnect it from the tree.\n  // This enables us to detect and warn against state updates on an unmounted component.\n  // It also prevents events from bubbling from within disconnected components.\n  //\n  // Ideally, we should also clear the child pointer of the parent alternate to let this\n  // get GC:ed but we don't know which for sure which parent is the current\n  // one so we'll settle for GC:ing the subtree of this child.\n  // This child itself will be GC:ed when the parent updates the next time.\n  //\n  // Note that we can't clear child or sibling pointers yet.\n  // They're needed for passive effects and for findDOMNode.\n  // We defer those fields, and all other cleanup, to the passive phase (see detachFiberAfterEffects).\n  //\n  // Don't reset the alternate yet, either. We need that so we can detach the\n  // alternate's fields in the passive phase. Clearing the return pointer is\n  // sufficient for findDOMNode semantics.\n  const alternate = fiber.alternate;\n\n  if (alternate !== null) {\n    alternate.return = null;\n  }\n\n  fiber.return = null;\n}\n\nfunction detachFiberAfterEffects(fiber) {\n  const alternate = fiber.alternate;\n\n  if (alternate !== null) {\n    fiber.alternate = null;\n    detachFiberAfterEffects(alternate);\n  } // Clear cyclical Fiber fields. This level alone is designed to roughly\n  // approximate the planned Fiber refactor. In that world, `setState` will be\n  // bound to a special \"instance\" object instead of a Fiber. The Instance\n  // object will not have any of these fields. It will only be connected to\n  // the fiber tree via a single link at the root. So if this level alone is\n  // sufficient to fix memory issues, that bodes well for our plans.\n\n\n  fiber.child = null;\n  fiber.deletions = null;\n  fiber.sibling = null; // The `stateNode` is cyclical because on host nodes it points to the host\n  // tree, which has its own pointers to children, parents, and siblings.\n  // The other host nodes also point back to fibers, so we should detach that\n  // one, too.\n\n  if (fiber.tag === HostComponent) {\n    const hostInstance = fiber.stateNode;\n\n    if (hostInstance !== null) {\n      detachDeletedInstance(hostInstance);\n    }\n  }\n\n  fiber.stateNode = null;\n  // disconnected the fiber from the tree. So even if something leaks this\n  // particular fiber, it won't leak anything else.\n\n\n  fiber.return = null;\n  fiber.dependencies = null;\n  fiber.memoizedProps = null;\n  fiber.memoizedState = null;\n  fiber.pendingProps = null;\n  fiber.stateNode = null; // TODO: Move to `commitPassiveUnmountInsideDeletedTreeOnFiber` instead.\n\n  fiber.updateQueue = null;\n}\n\nfunction getHostParentFiber(fiber) {\n  let parent = fiber.return;\n\n  while (parent !== null) {\n    if (isHostParent(parent)) {\n      return parent;\n    }\n\n    parent = parent.return;\n  }\n\n  throw Error(formatProdErrorMessage(160));\n}\n\nfunction isHostParent(fiber) {\n  return fiber.tag === HostComponent || fiber.tag === HostRoot || (fiber.tag === HostHoistable ) || (fiber.tag === HostSingleton ) || fiber.tag === HostPortal;\n}\n\nfunction getHostSibling(fiber) {\n  // We're going to search forward into the tree until we find a sibling host\n  // node. Unfortunately, if multiple insertions are done in a row we have to\n  // search past them. This leads to exponential search for the next sibling.\n  // TODO: Find a more efficient way to do this.\n  let node = fiber;\n\n  siblings: while (true) {\n    // If we didn't find anything, let's try the next sibling.\n    while (node.sibling === null) {\n      if (node.return === null || isHostParent(node.return)) {\n        // If we pop out of the root or hit the parent the fiber we are the\n        // last sibling.\n        return null;\n      } // $FlowFixMe[incompatible-type] found when upgrading Flow\n\n\n      node = node.return;\n    }\n\n    node.sibling.return = node.return;\n    node = node.sibling;\n\n    while (node.tag !== HostComponent && node.tag !== HostText && (node.tag !== HostSingleton) && node.tag !== DehydratedFragment) {\n      // If it is not host node and, we might have a host node inside it.\n      // Try to search down until we find one.\n      if (node.flags & Placement) {\n        // If we don't have a child, try the siblings instead.\n        continue siblings;\n      } // If we don't have a child, try the siblings instead.\n      // We also skip portals because they are not part of this host tree.\n\n\n      if (node.child === null || node.tag === HostPortal) {\n        continue siblings;\n      } else {\n        node.child.return = node;\n        node = node.child;\n      }\n    } // Check if this host node is stable or about to be placed.\n\n\n    if (!(node.flags & Placement)) {\n      // Found it!\n      return node.stateNode;\n    }\n  }\n}\n\nfunction commitPlacement(finishedWork) {\n\n  {\n    if (finishedWork.tag === HostSingleton) {\n      // Singletons are already in the Host and don't need to be placed\n      // Since they operate somewhat like Portals though their children will\n      // have Placement and will get placed inside them\n      return;\n    }\n  } // Recursively insert all host nodes into the parent.\n\n\n  const parentFiber = getHostParentFiber(finishedWork);\n\n  switch (parentFiber.tag) {\n    case HostSingleton:\n      {\n        {\n          const parent = parentFiber.stateNode;\n          const before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its\n          // children to find all the terminal nodes.\n\n          insertOrAppendPlacementNode(finishedWork, before, parent);\n          break;\n        } // Fall through\n\n      }\n\n    case HostComponent:\n      {\n        const parent = parentFiber.stateNode;\n\n        if (parentFiber.flags & ContentReset) {\n          // Reset the text content of the parent before doing any insertions\n          resetTextContent(parent); // Clear ContentReset from the effect tag\n\n          parentFiber.flags &= ~ContentReset;\n        }\n\n        const before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its\n        // children to find all the terminal nodes.\n\n        insertOrAppendPlacementNode(finishedWork, before, parent);\n        break;\n      }\n\n    case HostRoot:\n    case HostPortal:\n      {\n        const parent = parentFiber.stateNode.containerInfo;\n        const before = getHostSibling(finishedWork);\n        insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);\n        break;\n      }\n\n    default:\n      throw Error(formatProdErrorMessage(161));\n  }\n}\n\nfunction insertOrAppendPlacementNodeIntoContainer(node, before, parent) {\n  const tag = node.tag;\n  const isHost = tag === HostComponent || tag === HostText;\n\n  if (isHost) {\n    const stateNode = node.stateNode;\n\n    if (before) {\n      insertInContainerBefore(parent, stateNode, before);\n    } else {\n      appendChildToContainer(parent, stateNode);\n    }\n  } else if (tag === HostPortal || (tag === HostSingleton )) ; else {\n    const child = node.child;\n\n    if (child !== null) {\n      insertOrAppendPlacementNodeIntoContainer(child, before, parent);\n      let sibling = child.sibling;\n\n      while (sibling !== null) {\n        insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);\n        sibling = sibling.sibling;\n      }\n    }\n  }\n}\n\nfunction insertOrAppendPlacementNode(node, before, parent) {\n  const tag = node.tag;\n  const isHost = tag === HostComponent || tag === HostText;\n\n  if (isHost) {\n    const stateNode = node.stateNode;\n\n    if (before) {\n      insertBefore(parent, stateNode, before);\n    } else {\n      appendChild(parent, stateNode);\n    }\n  } else if (tag === HostPortal || (tag === HostSingleton )) ; else {\n    const child = node.child;\n\n    if (child !== null) {\n      insertOrAppendPlacementNode(child, before, parent);\n      let sibling = child.sibling;\n\n      while (sibling !== null) {\n        insertOrAppendPlacementNode(sibling, before, parent);\n        sibling = sibling.sibling;\n      }\n    }\n  }\n} // These are tracked on the stack as we recursively traverse a\n// deleted subtree.\n// TODO: Update these during the whole mutation phase, not just during\n// a deletion.\n\n\nlet hostParent = null;\nlet hostParentIsContainer = false;\n\nfunction commitDeletionEffects(root, returnFiber, deletedFiber) {\n  {\n    // We only have the top Fiber that was deleted but we need to recurse down its\n    // children to find all the terminal nodes.\n    // Recursively delete all host nodes from the parent, detach refs, clean\n    // up mounted layout effects, and call componentWillUnmount.\n    // We only need to remove the topmost host child in each branch. But then we\n    // still need to keep traversing to unmount effects, refs, and cWU. TODO: We\n    // could split this into two separate traversals functions, where the second\n    // one doesn't include any removeChild logic. This is maybe the same\n    // function as \"disappearLayoutEffects\" (or whatever that turns into after\n    // the layout phase is refactored to use recursion).\n    // Before starting, find the nearest host parent on the stack so we know\n    // which instance/container to remove the children from.\n    // TODO: Instead of searching up the fiber return path on every deletion, we\n    // can track the nearest host component on the JS stack as we traverse the\n    // tree during the commit phase. This would make insertions faster, too.\n    let parent = returnFiber;\n\n    findParent: while (parent !== null) {\n      switch (parent.tag) {\n        case HostSingleton:\n        case HostComponent:\n          {\n            hostParent = parent.stateNode;\n            hostParentIsContainer = false;\n            break findParent;\n          }\n\n        case HostRoot:\n          {\n            hostParent = parent.stateNode.containerInfo;\n            hostParentIsContainer = true;\n            break findParent;\n          }\n\n        case HostPortal:\n          {\n            hostParent = parent.stateNode.containerInfo;\n            hostParentIsContainer = true;\n            break findParent;\n          }\n      }\n\n      parent = parent.return;\n    }\n\n    if (hostParent === null) {\n      throw Error(formatProdErrorMessage(160));\n    }\n\n    commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);\n    hostParent = null;\n    hostParentIsContainer = false;\n  }\n\n  detachFiberMutation(deletedFiber);\n}\n\nfunction recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {\n  // TODO: Use a static flag to skip trees that don't have unmount effects\n  let child = parent.child;\n\n  while (child !== null) {\n    commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);\n    child = child.sibling;\n  }\n}\n\nfunction commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {\n  onCommitUnmount(deletedFiber); // The cases in this outer switch modify the stack before they traverse\n  // into their subtree. There are simpler cases in the inner switch\n  // that don't modify the stack.\n\n  switch (deletedFiber.tag) {\n    case HostHoistable:\n      {\n        {\n          if (!offscreenSubtreeWasHidden) {\n            safelyDetachRef(deletedFiber, nearestMountedAncestor);\n          }\n\n          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n\n          if (deletedFiber.memoizedState) {\n            releaseResource(deletedFiber.memoizedState);\n          } else if (deletedFiber.stateNode) {\n            unmountHoistable(deletedFiber.stateNode);\n          }\n\n          return;\n        } // Fall through\n\n      }\n\n    case HostSingleton:\n      {\n        {\n          if (!offscreenSubtreeWasHidden) {\n            safelyDetachRef(deletedFiber, nearestMountedAncestor);\n          }\n\n          const prevHostParent = hostParent;\n          const prevHostParentIsContainer = hostParentIsContainer;\n          hostParent = deletedFiber.stateNode;\n          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber); // Normally this is called in passive unmount effect phase however with\n          // HostSingleton we warn if you acquire one that is already associated to\n          // a different fiber. To increase our chances of avoiding this, specifically\n          // if you keyed a HostSingleton so there will be a delete followed by a Placement\n          // we treat detach eagerly here\n\n          releaseSingletonInstance(deletedFiber.stateNode);\n          hostParent = prevHostParent;\n          hostParentIsContainer = prevHostParentIsContainer;\n          return;\n        } // Fall through\n\n      }\n\n    case HostComponent:\n      {\n        if (!offscreenSubtreeWasHidden) {\n          safelyDetachRef(deletedFiber, nearestMountedAncestor);\n        } // Intentional fallthrough to next branch\n\n      }\n\n    case HostText:\n      {\n        // We only need to remove the nearest host child. Set the host parent\n        // to `null` on the stack to indicate that nested children don't\n        // need to be removed.\n        {\n          const prevHostParent = hostParent;\n          const prevHostParentIsContainer = hostParentIsContainer;\n          hostParent = null;\n          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n          hostParent = prevHostParent;\n          hostParentIsContainer = prevHostParentIsContainer;\n\n          if (hostParent !== null) {\n            // Now that all the child effects have unmounted, we can remove the\n            // node from the tree.\n            if (hostParentIsContainer) {\n              removeChildFromContainer(hostParent, deletedFiber.stateNode);\n            } else {\n              removeChild(hostParent, deletedFiber.stateNode);\n            }\n          }\n        }\n\n        return;\n      }\n\n    case DehydratedFragment:\n      {\n        // Delete the dehydrated suspense boundary and all of its content.\n\n\n        {\n          if (hostParent !== null) {\n            if (hostParentIsContainer) {\n              clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);\n            } else {\n              clearSuspenseBoundary(hostParent, deletedFiber.stateNode);\n            }\n          }\n        }\n\n        return;\n      }\n\n    case HostPortal:\n      {\n        {\n          // When we go into a portal, it becomes the parent to remove from.\n          const prevHostParent = hostParent;\n          const prevHostParentIsContainer = hostParentIsContainer;\n          hostParent = deletedFiber.stateNode.containerInfo;\n          hostParentIsContainer = true;\n          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n          hostParent = prevHostParent;\n          hostParentIsContainer = prevHostParentIsContainer;\n        }\n\n        return;\n      }\n\n    case FunctionComponent:\n    case ForwardRef:\n    case MemoComponent:\n    case SimpleMemoComponent:\n      {\n        if (!offscreenSubtreeWasHidden) {\n          const updateQueue = deletedFiber.updateQueue;\n\n          if (updateQueue !== null) {\n            const lastEffect = updateQueue.lastEffect;\n\n            if (lastEffect !== null) {\n              const firstEffect = lastEffect.next;\n              let effect = firstEffect;\n\n              do {\n                const tag = effect.tag;\n                const inst = effect.inst;\n                const destroy = inst.destroy;\n\n                if (destroy !== undefined) {\n                  if ((tag & Insertion) !== NoFlags) {\n                    inst.destroy = undefined;\n                    safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);\n                  } else if ((tag & Layout) !== NoFlags) {\n\n                    {\n                      inst.destroy = undefined;\n                      safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);\n                    }\n                  }\n                }\n\n                effect = effect.next;\n              } while (effect !== firstEffect);\n            }\n          }\n        }\n\n        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n        return;\n      }\n\n    case ClassComponent:\n      {\n        if (!offscreenSubtreeWasHidden) {\n          safelyDetachRef(deletedFiber, nearestMountedAncestor);\n          const instance = deletedFiber.stateNode;\n\n          if (typeof instance.componentWillUnmount === 'function') {\n            safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);\n          }\n        }\n\n        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n        return;\n      }\n\n    case ScopeComponent:\n      {\n\n        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n        return;\n      }\n\n    case OffscreenComponent:\n      {\n        safelyDetachRef(deletedFiber, nearestMountedAncestor);\n\n        if (deletedFiber.mode & ConcurrentMode) {\n          // If this offscreen component is hidden, we already unmounted it. Before\n          // deleting the children, track that it's already unmounted so that we\n          // don't attempt to unmount the effects again.\n          // TODO: If the tree is hidden, in most cases we should be able to skip\n          // over the nested children entirely. An exception is we haven't yet found\n          // the topmost host node to delete, which we already track on the stack.\n          // But the other case is portals, which need to be detached no matter how\n          // deeply they are nested. We should use a subtree flag to track whether a\n          // subtree includes a nested portal.\n          const prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;\n          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;\n          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n        } else {\n          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n        }\n\n        break;\n      }\n\n    default:\n      {\n        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n        return;\n      }\n  }\n}\n\nfunction commitSuspenseCallback(finishedWork) {\n}\n\nfunction commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {\n\n  const newState = finishedWork.memoizedState;\n\n  if (newState === null) {\n    const current = finishedWork.alternate;\n\n    if (current !== null) {\n      const prevState = current.memoizedState;\n\n      if (prevState !== null) {\n        const suspenseInstance = prevState.dehydrated;\n\n        if (suspenseInstance !== null) {\n          try {\n            commitHydratedSuspenseInstance(suspenseInstance);\n\n            if (enableSuspenseCallback) ;\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction getRetryCache(finishedWork) {\n  // TODO: Unify the interface for the retry cache so we don't have to switch\n  // on the tag like this.\n  switch (finishedWork.tag) {\n    case SuspenseComponent:\n    case SuspenseListComponent:\n      {\n        let retryCache = finishedWork.stateNode;\n\n        if (retryCache === null) {\n          retryCache = finishedWork.stateNode = new PossiblyWeakSet();\n        }\n\n        return retryCache;\n      }\n\n    case OffscreenComponent:\n      {\n        const instance = finishedWork.stateNode;\n        let retryCache = instance._retryCache;\n\n        if (retryCache === null) {\n          retryCache = instance._retryCache = new PossiblyWeakSet();\n        }\n\n        return retryCache;\n      }\n\n    default:\n      {\n        throw Error(formatProdErrorMessage(435, finishedWork.tag));\n      }\n  }\n}\n\nfunction detachOffscreenInstance(instance) {\n  const fiber = instance._current;\n\n  if (fiber === null) {\n    throw Error(formatProdErrorMessage(456));\n  }\n\n  if ((instance._pendingVisibility & OffscreenDetached) !== NoFlags$1) {\n    // The instance is already detached, this is a noop.\n    return;\n  } // TODO: There is an opportunity to optimise this by not entering commit phase\n  // and unmounting effects directly.\n\n\n  const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n  if (root !== null) {\n    instance._pendingVisibility |= OffscreenDetached;\n    scheduleUpdateOnFiber(root, fiber, SyncLane);\n  }\n}\nfunction attachOffscreenInstance(instance) {\n  const fiber = instance._current;\n\n  if (fiber === null) {\n    throw Error(formatProdErrorMessage(456));\n  }\n\n  if ((instance._pendingVisibility & OffscreenDetached) === NoFlags$1) {\n    // The instance is already attached, this is a noop.\n    return;\n  }\n\n  const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n  if (root !== null) {\n    instance._pendingVisibility &= ~OffscreenDetached;\n    scheduleUpdateOnFiber(root, fiber, SyncLane);\n  }\n}\n\nfunction attachSuspenseRetryListeners(finishedWork, wakeables) {\n  // If this boundary just timed out, then it will have a set of wakeables.\n  // For each wakeable, attach a listener so that when it resolves, React\n  // attempts to re-render the boundary in the primary (pre-timeout) state.\n  const retryCache = getRetryCache(finishedWork);\n  wakeables.forEach(wakeable => {\n    // Memoize using the boundary fiber to prevent redundant listeners.\n    const retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);\n\n    if (!retryCache.has(wakeable)) {\n      retryCache.add(wakeable);\n\n      wakeable.then(retry, retry);\n    }\n  });\n} // This function detects when a Suspense boundary goes from visible to hidden.\nfunction commitMutationEffects(root, finishedWork, committedLanes) {\n  commitMutationEffectsOnFiber(finishedWork, root);\n}\n\nfunction recursivelyTraverseMutationEffects(root, parentFiber, lanes) {\n  // Deletions effects can be scheduled on any fiber type. They need to happen\n  // before the children effects hae fired.\n  const deletions = parentFiber.deletions;\n\n  if (deletions !== null) {\n    for (let i = 0; i < deletions.length; i++) {\n      const childToDelete = deletions[i];\n\n      try {\n        commitDeletionEffects(root, parentFiber, childToDelete);\n      } catch (error) {\n        captureCommitPhaseError(childToDelete, parentFiber, error);\n      }\n    }\n  }\n\n  if (parentFiber.subtreeFlags & MutationMask) {\n    let child = parentFiber.child;\n\n    while (child !== null) {\n      commitMutationEffectsOnFiber(child, root);\n      child = child.sibling;\n    }\n  }\n}\n\nlet currentHoistableRoot = null;\n\nfunction commitMutationEffectsOnFiber(finishedWork, root, lanes) {\n  const current = finishedWork.alternate;\n  const flags = finishedWork.flags; // The effect flag should be checked *after* we refine the type of fiber,\n  // because the fiber tag is more specific. An exception is any flag related\n  // to reconciliation, because those can be set on all fiber types.\n\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case MemoComponent:\n    case SimpleMemoComponent:\n      {\n        recursivelyTraverseMutationEffects(root, finishedWork);\n        commitReconciliationEffects(finishedWork);\n\n        if (flags & Update) {\n          try {\n            commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);\n            commitHookEffectListMount(Insertion | HasEffect, finishedWork);\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          } // Layout effects are destroyed during the mutation phase so that all\n          // destroy functions for all fibers are called before any create functions.\n          // This prevents sibling component effects from interfering with each other,\n          // e.g. a destroy function in one component should never override a ref set\n          // by a create function in another component during the same commit.\n\n\n          {\n            try {\n              commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);\n            } catch (error) {\n              captureCommitPhaseError(finishedWork, finishedWork.return, error);\n            }\n          }\n        }\n\n        return;\n      }\n\n    case ClassComponent:\n      {\n        recursivelyTraverseMutationEffects(root, finishedWork);\n        commitReconciliationEffects(finishedWork);\n\n        if (flags & Ref) {\n          if (current !== null) {\n            safelyDetachRef(current, current.return);\n          }\n        }\n\n        if (flags & Callback && offscreenSubtreeIsHidden) {\n          const updateQueue = finishedWork.updateQueue;\n\n          if (updateQueue !== null) {\n            deferHiddenCallbacks(updateQueue);\n          }\n        }\n\n        return;\n      }\n\n    case HostHoistable:\n      {\n        {\n          // We cast because we always set the root at the React root and so it cannot be\n          // null while we are processing mutation effects\n          const hoistableRoot = currentHoistableRoot;\n          recursivelyTraverseMutationEffects(root, finishedWork);\n          commitReconciliationEffects(finishedWork);\n\n          if (flags & Ref) {\n            if (current !== null) {\n              safelyDetachRef(current, current.return);\n            }\n          }\n\n          if (flags & Update) {\n            const currentResource = current !== null ? current.memoizedState : null;\n            const newResource = finishedWork.memoizedState;\n\n            if (current === null) {\n              // We are mounting a new HostHoistable Fiber. We fork the mount\n              // behavior based on whether this instance is a Hoistable Instance\n              // or a Hoistable Resource\n              if (newResource === null) {\n                if (finishedWork.stateNode === null) {\n                  finishedWork.stateNode = hydrateHoistable(hoistableRoot, finishedWork.type, finishedWork.memoizedProps, finishedWork);\n                } else {\n                  mountHoistable(hoistableRoot, finishedWork.type, finishedWork.stateNode);\n                }\n              } else {\n                finishedWork.stateNode = acquireResource(hoistableRoot, newResource, finishedWork.memoizedProps);\n              }\n            } else if (currentResource !== newResource) {\n              // We are moving to or from Hoistable Resource, or between different Hoistable Resources\n              if (currentResource === null) {\n                if (current.stateNode !== null) {\n                  unmountHoistable(current.stateNode);\n                }\n              } else {\n                releaseResource(currentResource);\n              }\n\n              if (newResource === null) {\n                mountHoistable(hoistableRoot, finishedWork.type, finishedWork.stateNode);\n              } else {\n                acquireResource(hoistableRoot, newResource, finishedWork.memoizedProps);\n              }\n            } else if (newResource === null && finishedWork.stateNode !== null) {\n              // We may have an update on a Hoistable element\n              const updatePayload = finishedWork.updateQueue;\n              finishedWork.updateQueue = null;\n\n              try {\n                commitUpdate(finishedWork.stateNode, updatePayload, finishedWork.type, current.memoizedProps, finishedWork.memoizedProps, finishedWork);\n              } catch (error) {\n                captureCommitPhaseError(finishedWork, finishedWork.return, error);\n              }\n            }\n          }\n\n          return;\n        } // Fall through\n\n      }\n\n    case HostSingleton:\n      {\n        {\n          if (flags & Update) {\n            const previousWork = finishedWork.alternate;\n\n            if (previousWork === null) {\n              const singleton = finishedWork.stateNode;\n              const props = finishedWork.memoizedProps; // This was a new mount, we need to clear and set initial properties\n\n              clearSingleton(singleton);\n              acquireSingletonInstance(finishedWork.type, props, singleton, finishedWork);\n            }\n          }\n        } // Fall through\n\n      }\n\n    case HostComponent:\n      {\n        recursivelyTraverseMutationEffects(root, finishedWork);\n        commitReconciliationEffects(finishedWork);\n\n        if (flags & Ref) {\n          if (current !== null) {\n            safelyDetachRef(current, current.return);\n          }\n        }\n\n        {\n          // TODO: ContentReset gets cleared by the children during the commit\n          // phase. This is a refactor hazard because it means we must read\n          // flags the flags after `commitReconciliationEffects` has already run;\n          // the order matters. We should refactor so that ContentReset does not\n          // rely on mutating the flag during commit. Like by setting a flag\n          // during the render phase instead.\n          if (finishedWork.flags & ContentReset) {\n            const instance = finishedWork.stateNode;\n\n            try {\n              resetTextContent(instance);\n            } catch (error) {\n              captureCommitPhaseError(finishedWork, finishedWork.return, error);\n            }\n          }\n\n          if (flags & Update) {\n            const instance = finishedWork.stateNode;\n\n            if (instance != null) {\n              // Commit the work prepared earlier.\n              const newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps\n              // as the newProps. The updatePayload will contain the real change in\n              // this case.\n\n              const oldProps = current !== null ? current.memoizedProps : newProps;\n              const type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.\n\n              const updatePayload = finishedWork.updateQueue;\n              finishedWork.updateQueue = null;\n\n              try {\n                commitUpdate(instance, updatePayload, type, oldProps, newProps, finishedWork);\n              } catch (error) {\n                captureCommitPhaseError(finishedWork, finishedWork.return, error);\n              }\n            }\n          }\n        }\n\n        return;\n      }\n\n    case HostText:\n      {\n        recursivelyTraverseMutationEffects(root, finishedWork);\n        commitReconciliationEffects(finishedWork);\n\n        if (flags & Update) {\n          {\n            if (finishedWork.stateNode === null) {\n              throw Error(formatProdErrorMessage(162));\n            }\n\n            const textInstance = finishedWork.stateNode;\n            const newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps\n            // as the newProps. The updatePayload will contain the real change in\n            // this case.\n\n            const oldText = current !== null ? current.memoizedProps : newText;\n\n            try {\n              commitTextUpdate(textInstance, oldText, newText);\n            } catch (error) {\n              captureCommitPhaseError(finishedWork, finishedWork.return, error);\n            }\n          }\n        }\n\n        return;\n      }\n\n    case HostRoot:\n      {\n        {\n          prepareToCommitHoistables();\n          const previousHoistableRoot = currentHoistableRoot;\n          currentHoistableRoot = getHoistableRoot(root.containerInfo);\n          recursivelyTraverseMutationEffects(root, finishedWork);\n          currentHoistableRoot = previousHoistableRoot;\n          commitReconciliationEffects(finishedWork);\n        }\n\n        if (flags & Update) {\n          {\n            if (current !== null) {\n              const prevRootState = current.memoizedState;\n\n              if (prevRootState.isDehydrated) {\n                try {\n                  commitHydratedContainer(root.containerInfo);\n                } catch (error) {\n                  captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                }\n              }\n            }\n          }\n        }\n\n        return;\n      }\n\n    case HostPortal:\n      {\n        {\n          const previousHoistableRoot = currentHoistableRoot;\n          currentHoistableRoot = getHoistableRoot(finishedWork.stateNode.containerInfo);\n          recursivelyTraverseMutationEffects(root, finishedWork);\n          commitReconciliationEffects(finishedWork);\n          currentHoistableRoot = previousHoistableRoot;\n        }\n\n        return;\n      }\n\n    case SuspenseComponent:\n      {\n        recursivelyTraverseMutationEffects(root, finishedWork);\n        commitReconciliationEffects(finishedWork); // TODO: We should mark a flag on the Suspense fiber itself, rather than\n        // relying on the Offscreen fiber having a flag also being marked. The\n        // reason is that this offscreen fiber might not be part of the work-in-\n        // progress tree! It could have been reused from a previous render. This\n        // doesn't lead to incorrect behavior because we don't rely on the flag\n        // check alone; we also compare the states explicitly below. But for\n        // modeling purposes, we _should_ be able to rely on the flag check alone.\n        // So this is a bit fragile.\n        //\n        // Also, all this logic could/should move to the passive phase so it\n        // doesn't block paint.\n\n        const offscreenFiber = finishedWork.child;\n\n        if (offscreenFiber.flags & Visibility) {\n          // Throttle the appearance and disappearance of Suspense fallbacks.\n          const isShowingFallback = finishedWork.memoizedState !== null;\n          const wasShowingFallback = current !== null && current.memoizedState !== null;\n\n          {\n            if (isShowingFallback !== wasShowingFallback) {\n              // A fallback is either appearing or disappearing.\n              markCommitTimeOfFallback();\n            }\n          }\n        }\n\n        if (flags & Update) {\n          try {\n            commitSuspenseCallback(finishedWork);\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n\n          const retryQueue = finishedWork.updateQueue;\n\n          if (retryQueue !== null) {\n            finishedWork.updateQueue = null;\n            attachSuspenseRetryListeners(finishedWork, retryQueue);\n          }\n        }\n\n        return;\n      }\n\n    case OffscreenComponent:\n      {\n        if (flags & Ref) {\n          if (current !== null) {\n            safelyDetachRef(current, current.return);\n          }\n        }\n\n        const newState = finishedWork.memoizedState;\n        const isHidden = newState !== null;\n        const wasHidden = current !== null && current.memoizedState !== null;\n\n        if (finishedWork.mode & ConcurrentMode) {\n          // Before committing the children, track on the stack whether this\n          // offscreen subtree was already hidden, so that we don't unmount the\n          // effects again.\n          const prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;\n          const prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;\n          offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden || isHidden;\n          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || wasHidden;\n          recursivelyTraverseMutationEffects(root, finishedWork);\n          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n          offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;\n        } else {\n          recursivelyTraverseMutationEffects(root, finishedWork);\n        }\n\n        commitReconciliationEffects(finishedWork);\n        const offscreenInstance = finishedWork.stateNode; // TODO: Add explicit effect flag to set _current.\n\n        offscreenInstance._current = finishedWork; // Offscreen stores pending changes to visibility in `_pendingVisibility`. This is\n        // to support batching of `attach` and `detach` calls.\n\n        offscreenInstance._visibility &= ~OffscreenDetached;\n        offscreenInstance._visibility |= offscreenInstance._pendingVisibility & OffscreenDetached;\n\n        if (flags & Visibility) {\n          // Track the current state on the Offscreen instance so we can\n          // read it during an event\n          if (isHidden) {\n            offscreenInstance._visibility &= ~OffscreenVisible;\n          } else {\n            offscreenInstance._visibility |= OffscreenVisible;\n          }\n\n          if (isHidden) {\n            const isUpdate = current !== null;\n            const wasHiddenByAncestorOffscreen = offscreenSubtreeIsHidden || offscreenSubtreeWasHidden; // Only trigger disapper layout effects if:\n            //   - This is an update, not first mount.\n            //   - This Offscreen was not hidden before.\n            //   - Ancestor Offscreen was not hidden in previous commit.\n\n            if (isUpdate && !wasHidden && !wasHiddenByAncestorOffscreen) {\n              if ((finishedWork.mode & ConcurrentMode) !== NoMode) {\n                // Disappear the layout effects of all the children\n                recursivelyTraverseDisappearLayoutEffects(finishedWork);\n              }\n            }\n          } // Offscreen with manual mode manages visibility manually.\n\n\n          if (!isOffscreenManual(finishedWork)) {\n            // TODO: This needs to run whenever there's an insertion or update\n            // inside a hidden Offscreen tree.\n            hideOrUnhideAllChildren(finishedWork, isHidden);\n          }\n        } // TODO: Move to passive phase\n\n\n        if (flags & Update) {\n          const offscreenQueue = finishedWork.updateQueue;\n\n          if (offscreenQueue !== null) {\n            const retryQueue = offscreenQueue.retryQueue;\n\n            if (retryQueue !== null) {\n              offscreenQueue.retryQueue = null;\n              attachSuspenseRetryListeners(finishedWork, retryQueue);\n            }\n          }\n        }\n\n        return;\n      }\n\n    case SuspenseListComponent:\n      {\n        recursivelyTraverseMutationEffects(root, finishedWork);\n        commitReconciliationEffects(finishedWork);\n\n        if (flags & Update) {\n          const retryQueue = finishedWork.updateQueue;\n\n          if (retryQueue !== null) {\n            finishedWork.updateQueue = null;\n            attachSuspenseRetryListeners(finishedWork, retryQueue);\n          }\n        }\n\n        return;\n      }\n\n    case ScopeComponent:\n      {\n\n        return;\n      }\n\n    default:\n      {\n        recursivelyTraverseMutationEffects(root, finishedWork);\n        commitReconciliationEffects(finishedWork);\n        return;\n      }\n  }\n}\n\nfunction commitReconciliationEffects(finishedWork) {\n  // Placement effects (insertions, reorders) can be scheduled on any fiber\n  // type. They needs to happen after the children effects have fired, but\n  // before the effects on this fiber have fired.\n  const flags = finishedWork.flags;\n\n  if (flags & Placement) {\n    try {\n      commitPlacement(finishedWork);\n    } catch (error) {\n      captureCommitPhaseError(finishedWork, finishedWork.return, error);\n    } // Clear the \"placement\" from effect tag so that we know that this is\n    // inserted, before any life-cycles like componentDidMount gets called.\n    // TODO: findDOMNode doesn't rely on this any more but isMounted does\n    // and isMounted is deprecated anyway so we should be able to kill this.\n\n\n    finishedWork.flags &= ~Placement;\n  }\n\n  if (flags & Hydrating) {\n    finishedWork.flags &= ~Hydrating;\n  }\n}\n\nfunction commitLayoutEffects(finishedWork, root, committedLanes) {\n  const current = finishedWork.alternate;\n  commitLayoutEffectOnFiber(root, current, finishedWork);\n}\n\nfunction recursivelyTraverseLayoutEffects(root, parentFiber, lanes) {\n\n  if (parentFiber.subtreeFlags & LayoutMask) {\n    let child = parentFiber.child;\n\n    while (child !== null) {\n      const current = child.alternate;\n      commitLayoutEffectOnFiber(root, current, child);\n      child = child.sibling;\n    }\n  }\n}\n\nfunction disappearLayoutEffects(finishedWork) {\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case MemoComponent:\n    case SimpleMemoComponent:\n      {\n        // TODO (Offscreen) Check: flags & LayoutStatic\n        {\n          commitHookEffectListUnmount(Layout, finishedWork, finishedWork.return);\n        }\n\n        recursivelyTraverseDisappearLayoutEffects(finishedWork);\n        break;\n      }\n\n    case ClassComponent:\n      {\n        // TODO (Offscreen) Check: flags & RefStatic\n        safelyDetachRef(finishedWork, finishedWork.return);\n        const instance = finishedWork.stateNode;\n\n        if (typeof instance.componentWillUnmount === 'function') {\n          safelyCallComponentWillUnmount(finishedWork, finishedWork.return, instance);\n        }\n\n        recursivelyTraverseDisappearLayoutEffects(finishedWork);\n        break;\n      }\n\n    case HostHoistable:\n    case HostSingleton:\n    case HostComponent:\n      {\n        // TODO (Offscreen) Check: flags & RefStatic\n        safelyDetachRef(finishedWork, finishedWork.return);\n        recursivelyTraverseDisappearLayoutEffects(finishedWork);\n        break;\n      }\n\n    case OffscreenComponent:\n      {\n        // TODO (Offscreen) Check: flags & RefStatic\n        safelyDetachRef(finishedWork, finishedWork.return);\n        const isHidden = finishedWork.memoizedState !== null;\n\n        if (isHidden) ; else {\n          recursivelyTraverseDisappearLayoutEffects(finishedWork);\n        }\n\n        break;\n      }\n\n    default:\n      {\n        recursivelyTraverseDisappearLayoutEffects(finishedWork);\n        break;\n      }\n  }\n}\n\nfunction recursivelyTraverseDisappearLayoutEffects(parentFiber) {\n  // TODO (Offscreen) Check: flags & (RefStatic | LayoutStatic)\n  let child = parentFiber.child;\n\n  while (child !== null) {\n    disappearLayoutEffects(child);\n    child = child.sibling;\n  }\n}\n\nfunction reappearLayoutEffects(finishedRoot, current, finishedWork, // This function visits both newly finished work and nodes that were re-used\n// from a previously committed tree. We cannot check non-static flags if the\n// node was reused.\nincludeWorkInProgressEffects) {\n  // Turn on layout effects in a tree that previously disappeared.\n  const flags = finishedWork.flags;\n\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent:\n      {\n        recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects); // TODO: Check flags & LayoutStatic\n\n        commitHookLayoutEffects(finishedWork, Layout);\n        break;\n      }\n\n    case ClassComponent:\n      {\n        recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects); // TODO: Check for LayoutStatic flag\n\n        const instance = finishedWork.stateNode;\n\n        if (typeof instance.componentDidMount === 'function') {\n          try {\n            instance.componentDidMount();\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n        } // Commit any callbacks that would have fired while the component\n        // was hidden.\n\n\n        const updateQueue = finishedWork.updateQueue;\n\n        if (updateQueue !== null) {\n          commitHiddenCallbacks(updateQueue, instance);\n        } // If this is newly finished work, check for setState callbacks\n\n\n        if (includeWorkInProgressEffects && flags & Callback) {\n          commitClassCallbacks(finishedWork);\n        } // TODO: Check flags & RefStatic\n\n\n        safelyAttachRef(finishedWork, finishedWork.return);\n        break;\n      }\n    // Unlike commitLayoutEffectsOnFiber, we don't need to handle HostRoot\n    // because this function only visits nodes that are inside an\n    // Offscreen fiber.\n    // case HostRoot: {\n    //  ...\n    // }\n\n    case HostHoistable:\n    case HostSingleton:\n    case HostComponent:\n      {\n        recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects); // Renderers may schedule work to be done after host components are mounted\n        // (eg DOM renderer may schedule auto-focus for inputs and form controls).\n        // These effects should only be committed when components are first mounted,\n        // aka when there is no current/alternate.\n\n        if (includeWorkInProgressEffects && current === null && flags & Update) {\n          commitHostComponentMount(finishedWork);\n        } // TODO: Check flags & Ref\n\n\n        safelyAttachRef(finishedWork, finishedWork.return);\n        break;\n      }\n\n    case Profiler:\n      {\n        recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects); // TODO: Figure out how Profiler updates should work with Offscreen\n\n        break;\n      }\n\n    case SuspenseComponent:\n      {\n        recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects); // TODO: Figure out how Suspense hydration callbacks should work\n        // with Offscreen.\n\n        if (includeWorkInProgressEffects && flags & Update) {\n          commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);\n        }\n\n        break;\n      }\n\n    case OffscreenComponent:\n      {\n        const offscreenState = finishedWork.memoizedState;\n        const isHidden = offscreenState !== null;\n\n        if (isHidden) ; else {\n          recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);\n        } // TODO: Check flags & Ref\n\n\n        safelyAttachRef(finishedWork, finishedWork.return);\n        break;\n      }\n\n    default:\n      {\n        recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);\n        break;\n      }\n  }\n}\n\nfunction recursivelyTraverseReappearLayoutEffects(finishedRoot, parentFiber, includeWorkInProgressEffects) {\n  // This function visits both newly finished work and nodes that were re-used\n  // from a previously committed tree. We cannot check non-static flags if the\n  // node was reused.\n  const childShouldIncludeWorkInProgressEffects = includeWorkInProgressEffects && (parentFiber.subtreeFlags & LayoutMask) !== NoFlags$1; // TODO (Offscreen) Check: flags & (RefStatic | LayoutStatic)\n  let child = parentFiber.child;\n\n  while (child !== null) {\n    const current = child.alternate;\n    reappearLayoutEffects(finishedRoot, current, child, childShouldIncludeWorkInProgressEffects);\n    child = child.sibling;\n  }\n}\n\nfunction commitHookPassiveMountEffects(finishedWork, hookFlags) {\n  {\n    try {\n      commitHookEffectListMount(hookFlags, finishedWork);\n    } catch (error) {\n      captureCommitPhaseError(finishedWork, finishedWork.return, error);\n    }\n  }\n}\n\nfunction commitOffscreenPassiveMountEffects(current, finishedWork, instance) {\n  {\n    let previousCache = null;\n\n    if (current !== null && current.memoizedState !== null && current.memoizedState.cachePool !== null) {\n      previousCache = current.memoizedState.cachePool.pool;\n    }\n\n    let nextCache = null;\n\n    if (finishedWork.memoizedState !== null && finishedWork.memoizedState.cachePool !== null) {\n      nextCache = finishedWork.memoizedState.cachePool.pool;\n    } // Retain/release the cache used for pending (suspended) nodes.\n    // Note that this is only reached in the non-suspended/visible case:\n    // when the content is suspended/hidden, the retain/release occurs\n    // via the parent Suspense component (see case above).\n\n\n    if (nextCache !== previousCache) {\n      if (nextCache != null) {\n        retainCache(nextCache);\n      }\n\n      if (previousCache != null) {\n        releaseCache(previousCache);\n      }\n    }\n  }\n}\n\nfunction commitCachePassiveMountEffect(current, finishedWork) {\n  {\n    let previousCache = null;\n\n    if (finishedWork.alternate !== null) {\n      previousCache = finishedWork.alternate.memoizedState.cache;\n    }\n\n    const nextCache = finishedWork.memoizedState.cache; // Retain/release the cache. In theory the cache component\n    // could be \"borrowing\" a cache instance owned by some parent,\n    // in which case we could avoid retaining/releasing. But it\n    // is non-trivial to determine when that is the case, so we\n    // always retain/release.\n\n    if (nextCache !== previousCache) {\n      retainCache(nextCache);\n\n      if (previousCache != null) {\n        releaseCache(previousCache);\n      }\n    }\n  }\n}\n\nfunction commitPassiveMountEffects(root, finishedWork, committedLanes, committedTransitions) {\n  commitPassiveMountOnFiber(root, finishedWork, committedLanes, committedTransitions);\n}\n\nfunction recursivelyTraversePassiveMountEffects(root, parentFiber, committedLanes, committedTransitions) {\n\n  if (parentFiber.subtreeFlags & PassiveMask) {\n    let child = parentFiber.child;\n\n    while (child !== null) {\n      commitPassiveMountOnFiber(root, child, committedLanes, committedTransitions);\n      child = child.sibling;\n    }\n  }\n}\n\nfunction commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {\n  // When updating this function, also update reconnectPassiveEffects, which does\n  // most of the same things when an offscreen tree goes from hidden -> visible,\n  // or when toggling effects inside a hidden tree.\n  const flags = finishedWork.flags;\n\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent:\n      {\n        recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);\n\n        if (flags & Passive$1) {\n          commitHookPassiveMountEffects(finishedWork, Passive | HasEffect);\n        }\n\n        break;\n      }\n\n    case HostRoot:\n      {\n        recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);\n\n        if (flags & Passive$1) {\n          {\n            let previousCache = null;\n\n            if (finishedWork.alternate !== null) {\n              previousCache = finishedWork.alternate.memoizedState.cache;\n            }\n\n            const nextCache = finishedWork.memoizedState.cache; // Retain/release the root cache.\n            // Note that on initial mount, previousCache and nextCache will be the same\n            // and this retain won't occur. To counter this, we instead retain the HostRoot's\n            // initial cache when creating the root itself (see createFiberRoot() in\n            // ReactFiberRoot.js). Subsequent updates that change the cache are reflected\n            // here, such that previous/next caches are retained correctly.\n\n            if (nextCache !== previousCache) {\n              retainCache(nextCache);\n\n              if (previousCache != null) {\n                releaseCache(previousCache);\n              }\n            }\n          }\n        }\n\n        break;\n      }\n\n    case LegacyHiddenComponent:\n      {\n\n        break;\n      }\n\n    case OffscreenComponent:\n      {\n        // TODO: Pass `current` as argument to this function\n        const instance = finishedWork.stateNode;\n        const nextState = finishedWork.memoizedState;\n        const isHidden = nextState !== null;\n\n        if (isHidden) {\n          if (instance._visibility & OffscreenPassiveEffectsConnected) {\n            // The effects are currently connected. Update them.\n            recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);\n          } else {\n            if (finishedWork.mode & ConcurrentMode) {\n              // The effects are currently disconnected. Since the tree is hidden,\n              // don't connect them. This also applies to the initial render.\n              {\n                // \"Atomic\" effects are ones that need to fire on every commit,\n                // even during pre-rendering. An example is updating the reference\n                // count on cache instances.\n                recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);\n              }\n            } else {\n              // Legacy Mode: Fire the effects even if the tree is hidden.\n              instance._visibility |= OffscreenPassiveEffectsConnected;\n              recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);\n            }\n          }\n        } else {\n          // Tree is visible\n          if (instance._visibility & OffscreenPassiveEffectsConnected) {\n            // The effects are currently connected. Update them.\n            recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);\n          } else {\n            // The effects are currently disconnected. Reconnect them, while also\n            // firing effects inside newly mounted trees. This also applies to\n            // the initial render.\n            instance._visibility |= OffscreenPassiveEffectsConnected;\n            const includeWorkInProgressEffects = (finishedWork.subtreeFlags & PassiveMask) !== NoFlags$1;\n            recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects);\n          }\n        }\n\n        if (flags & Passive$1) {\n          const current = finishedWork.alternate;\n          commitOffscreenPassiveMountEffects(current, finishedWork);\n        }\n\n        break;\n      }\n\n    case CacheComponent:\n      {\n        recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);\n\n        if (flags & Passive$1) {\n          // TODO: Pass `current` as argument to this function\n          const current = finishedWork.alternate;\n          commitCachePassiveMountEffect(current, finishedWork);\n        }\n\n        break;\n      }\n\n    case TracingMarkerComponent:\n\n    default:\n      {\n        recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);\n        break;\n      }\n  }\n}\n\nfunction recursivelyTraverseReconnectPassiveEffects(finishedRoot, parentFiber, committedLanes, committedTransitions, includeWorkInProgressEffects) {\n  // This function visits both newly finished work and nodes that were re-used\n  // from a previously committed tree. We cannot check non-static flags if the\n  // node was reused.\n  const childShouldIncludeWorkInProgressEffects = includeWorkInProgressEffects && (parentFiber.subtreeFlags & PassiveMask) !== NoFlags$1; // TODO (Offscreen) Check: flags & (RefStatic | LayoutStatic)\n  let child = parentFiber.child;\n\n  while (child !== null) {\n    reconnectPassiveEffects(finishedRoot, child, committedLanes, committedTransitions, childShouldIncludeWorkInProgressEffects);\n    child = child.sibling;\n  }\n}\n\nfunction reconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, // This function visits both newly finished work and nodes that were re-used\n// from a previously committed tree. We cannot check non-static flags if the\n// node was reused.\nincludeWorkInProgressEffects) {\n  const flags = finishedWork.flags;\n\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent:\n      {\n        recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects); // TODO: Check for PassiveStatic flag\n\n        commitHookPassiveMountEffects(finishedWork, Passive);\n        break;\n      }\n    // Unlike commitPassiveMountOnFiber, we don't need to handle HostRoot\n    // because this function only visits nodes that are inside an\n    // Offscreen fiber.\n    // case HostRoot: {\n    //  ...\n    // }\n\n    case LegacyHiddenComponent:\n      {\n\n        break;\n      }\n\n    case OffscreenComponent:\n      {\n        const instance = finishedWork.stateNode;\n        const nextState = finishedWork.memoizedState;\n        const isHidden = nextState !== null;\n\n        if (isHidden) {\n          if (instance._visibility & OffscreenPassiveEffectsConnected) {\n            // The effects are currently connected. Update them.\n            recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects);\n          } else {\n            if (finishedWork.mode & ConcurrentMode) {\n              // The effects are currently disconnected. Since the tree is hidden,\n              // don't connect them. This also applies to the initial render.\n              {\n                // \"Atomic\" effects are ones that need to fire on every commit,\n                // even during pre-rendering. An example is updating the reference\n                // count on cache instances.\n                recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);\n              }\n            } else {\n              // Legacy Mode: Fire the effects even if the tree is hidden.\n              instance._visibility |= OffscreenPassiveEffectsConnected;\n              recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects);\n            }\n          }\n        } else {\n          // Tree is visible\n          // Since we're already inside a reconnecting tree, it doesn't matter\n          // whether the effects are currently connected. In either case, we'll\n          // continue traversing the tree and firing all the effects.\n          //\n          // We do need to set the \"connected\" flag on the instance, though.\n          instance._visibility |= OffscreenPassiveEffectsConnected;\n          recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects);\n        }\n\n        if (includeWorkInProgressEffects && flags & Passive$1) {\n          // TODO: Pass `current` as argument to this function\n          const current = finishedWork.alternate;\n          commitOffscreenPassiveMountEffects(current, finishedWork);\n        }\n\n        break;\n      }\n\n    case CacheComponent:\n      {\n        recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects);\n\n        if (includeWorkInProgressEffects && flags & Passive$1) {\n          // TODO: Pass `current` as argument to this function\n          const current = finishedWork.alternate;\n          commitCachePassiveMountEffect(current, finishedWork);\n        }\n\n        break;\n      }\n\n    case TracingMarkerComponent:\n\n    default:\n      {\n        recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects);\n        break;\n      }\n  }\n}\n\nfunction recursivelyTraverseAtomicPassiveEffects(finishedRoot, parentFiber, committedLanes, committedTransitions) {\n\n  if (parentFiber.subtreeFlags & PassiveMask) {\n    let child = parentFiber.child;\n\n    while (child !== null) {\n      commitAtomicPassiveEffects(finishedRoot, child);\n      child = child.sibling;\n    }\n  }\n}\n\nfunction commitAtomicPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions) {\n  // \"Atomic\" effects are ones that need to fire on every commit, even during\n  // pre-rendering. We call this function when traversing a hidden tree whose\n  // regular effects are currently disconnected.\n  const flags = finishedWork.flags;\n\n  switch (finishedWork.tag) {\n    case OffscreenComponent:\n      {\n        recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);\n\n        if (flags & Passive$1) {\n          // TODO: Pass `current` as argument to this function\n          const current = finishedWork.alternate;\n          commitOffscreenPassiveMountEffects(current, finishedWork);\n        }\n\n        break;\n      }\n\n    case CacheComponent:\n      {\n        recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);\n\n        if (flags & Passive$1) {\n          // TODO: Pass `current` as argument to this function\n          const current = finishedWork.alternate;\n          commitCachePassiveMountEffect(current, finishedWork);\n        }\n\n        break;\n      }\n\n    default:\n      {\n        recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);\n        break;\n      }\n  }\n}\n\nfunction commitPassiveUnmountEffects(finishedWork) {\n  commitPassiveUnmountOnFiber(finishedWork);\n} // If we're inside a brand new tree, or a tree that was already visible, then we\n// should only suspend host components that have a ShouldSuspendCommit flag.\n// Components without it haven't changed since the last commit, so we can skip\n// over those.\n//\n// When we enter a tree that is being revealed (going from hidden -> visible),\n// we need to suspend _any_ component that _may_ suspend. Even if they're\n// already in the \"current\" tree. Because their visibility has changed, the\n// browser may not have prerendered them yet. So we check the MaySuspendCommit\n// flag instead.\n\nlet suspenseyCommitFlag = ShouldSuspendCommit;\nfunction accumulateSuspenseyCommit(finishedWork) {\n  accumulateSuspenseyCommitOnFiber(finishedWork);\n}\n\nfunction recursivelyAccumulateSuspenseyCommit(parentFiber) {\n  if (parentFiber.subtreeFlags & suspenseyCommitFlag) {\n    let child = parentFiber.child;\n\n    while (child !== null) {\n      accumulateSuspenseyCommitOnFiber(child);\n      child = child.sibling;\n    }\n  }\n}\n\nfunction accumulateSuspenseyCommitOnFiber(fiber) {\n  switch (fiber.tag) {\n    case HostHoistable:\n      {\n        recursivelyAccumulateSuspenseyCommit(fiber);\n\n        if (fiber.flags & suspenseyCommitFlag) {\n          if (fiber.memoizedState !== null) {\n            suspendResource( // This should always be set by visiting HostRoot first\n            currentHoistableRoot, fiber.memoizedState, fiber.memoizedProps);\n          }\n        }\n\n        break;\n      }\n\n    case HostComponent:\n      {\n        recursivelyAccumulateSuspenseyCommit(fiber);\n\n        break;\n      }\n\n    case HostRoot:\n    case HostPortal:\n      {\n        {\n          const previousHoistableRoot = currentHoistableRoot;\n          const container = fiber.stateNode.containerInfo;\n          currentHoistableRoot = getHoistableRoot(container);\n          recursivelyAccumulateSuspenseyCommit(fiber);\n          currentHoistableRoot = previousHoistableRoot;\n        }\n\n        break;\n      }\n\n    case OffscreenComponent:\n      {\n        const isHidden = fiber.memoizedState !== null;\n\n        if (isHidden) ; else {\n          const current = fiber.alternate;\n          const wasHidden = current !== null && current.memoizedState !== null;\n\n          if (wasHidden) {\n            // This tree is being revealed. Visit all newly visible suspensey\n            // instances, even if they're in the current tree.\n            const prevFlags = suspenseyCommitFlag;\n            suspenseyCommitFlag = MaySuspendCommit;\n            recursivelyAccumulateSuspenseyCommit(fiber);\n            suspenseyCommitFlag = prevFlags;\n          } else {\n            recursivelyAccumulateSuspenseyCommit(fiber);\n          }\n        }\n\n        break;\n      }\n\n    default:\n      {\n        recursivelyAccumulateSuspenseyCommit(fiber);\n      }\n  }\n}\n\nfunction detachAlternateSiblings(parentFiber) {\n  // A fiber was deleted from this parent fiber, but it's still part of the\n  // previous (alternate) parent fiber's list of children. Because children\n  // are a linked list, an earlier sibling that's still alive will be\n  // connected to the deleted fiber via its `alternate`:\n  //\n  //   live fiber --alternate--> previous live fiber --sibling--> deleted\n  //   fiber\n  //\n  // We can't disconnect `alternate` on nodes that haven't been deleted yet,\n  // but we can disconnect the `sibling` and `child` pointers.\n  const previousFiber = parentFiber.alternate;\n\n  if (previousFiber !== null) {\n    let detachedChild = previousFiber.child;\n\n    if (detachedChild !== null) {\n      previousFiber.child = null;\n\n      do {\n        // $FlowFixMe[incompatible-use] found when upgrading Flow\n        const detachedSibling = detachedChild.sibling; // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n        detachedChild.sibling = null;\n        detachedChild = detachedSibling;\n      } while (detachedChild !== null);\n    }\n  }\n}\n\nfunction commitHookPassiveUnmountEffects(finishedWork, nearestMountedAncestor, hookFlags) {\n  {\n    commitHookEffectListUnmount(hookFlags, finishedWork, nearestMountedAncestor);\n  }\n}\n\nfunction recursivelyTraversePassiveUnmountEffects(parentFiber) {\n  // Deletions effects can be scheduled on any fiber type. They need to happen\n  // before the children effects have fired.\n  const deletions = parentFiber.deletions;\n\n  if ((parentFiber.flags & ChildDeletion) !== NoFlags$1) {\n    if (deletions !== null) {\n      for (let i = 0; i < deletions.length; i++) {\n        const childToDelete = deletions[i]; // TODO: Convert this to use recursion\n\n        nextEffect = childToDelete;\n        commitPassiveUnmountEffectsInsideOfDeletedTree_begin(childToDelete, parentFiber);\n      }\n    }\n\n    detachAlternateSiblings(parentFiber);\n  }\n\n  if (parentFiber.subtreeFlags & PassiveMask) {\n    let child = parentFiber.child;\n\n    while (child !== null) {\n      commitPassiveUnmountOnFiber(child);\n      child = child.sibling;\n    }\n  }\n}\n\nfunction commitPassiveUnmountOnFiber(finishedWork) {\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent:\n      {\n        recursivelyTraversePassiveUnmountEffects(finishedWork);\n\n        if (finishedWork.flags & Passive$1) {\n          commitHookPassiveUnmountEffects(finishedWork, finishedWork.return, Passive | HasEffect);\n        }\n\n        break;\n      }\n\n    case OffscreenComponent:\n      {\n        const instance = finishedWork.stateNode;\n        const nextState = finishedWork.memoizedState;\n        const isHidden = nextState !== null;\n\n        if (isHidden && instance._visibility & OffscreenPassiveEffectsConnected && ( // For backwards compatibility, don't unmount when a tree suspends. In\n        // the future we may change this to unmount after a delay.\n        finishedWork.return === null || finishedWork.return.tag !== SuspenseComponent)) {\n          // The effects are currently connected. Disconnect them.\n          // TODO: Add option or heuristic to delay before disconnecting the\n          // effects. Then if the tree reappears before the delay has elapsed, we\n          // can skip toggling the effects entirely.\n          instance._visibility &= ~OffscreenPassiveEffectsConnected;\n          recursivelyTraverseDisconnectPassiveEffects(finishedWork);\n        } else {\n          recursivelyTraversePassiveUnmountEffects(finishedWork);\n        }\n\n        break;\n      }\n\n    default:\n      {\n        recursivelyTraversePassiveUnmountEffects(finishedWork);\n        break;\n      }\n  }\n}\n\nfunction recursivelyTraverseDisconnectPassiveEffects(parentFiber) {\n  // Deletions effects can be scheduled on any fiber type. They need to happen\n  // before the children effects have fired.\n  const deletions = parentFiber.deletions;\n\n  if ((parentFiber.flags & ChildDeletion) !== NoFlags$1) {\n    if (deletions !== null) {\n      for (let i = 0; i < deletions.length; i++) {\n        const childToDelete = deletions[i]; // TODO: Convert this to use recursion\n\n        nextEffect = childToDelete;\n        commitPassiveUnmountEffectsInsideOfDeletedTree_begin(childToDelete, parentFiber);\n      }\n    }\n\n    detachAlternateSiblings(parentFiber);\n  }\n\n  let child = parentFiber.child;\n\n  while (child !== null) {\n    disconnectPassiveEffect(child);\n    child = child.sibling;\n  }\n}\n\nfunction disconnectPassiveEffect(finishedWork) {\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent:\n      {\n        // TODO: Check PassiveStatic flag\n        commitHookPassiveUnmountEffects(finishedWork, finishedWork.return, Passive); // When disconnecting passive effects, we fire the effects in the same\n        // order as during a deletiong: parent before child\n\n        recursivelyTraverseDisconnectPassiveEffects(finishedWork);\n        break;\n      }\n\n    case OffscreenComponent:\n      {\n        const instance = finishedWork.stateNode;\n\n        if (instance._visibility & OffscreenPassiveEffectsConnected) {\n          instance._visibility &= ~OffscreenPassiveEffectsConnected;\n          recursivelyTraverseDisconnectPassiveEffects(finishedWork);\n        }\n\n        break;\n      }\n\n    default:\n      {\n        recursivelyTraverseDisconnectPassiveEffects(finishedWork);\n        break;\n      }\n  }\n}\n\nfunction commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect; // Deletion effects fire in parent -> child order\n    commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);\n    const child = fiber.child; // TODO: Only traverse subtree if it has a PassiveStatic flag.\n\n    if (child !== null) {\n      child.return = fiber;\n      nextEffect = child;\n    } else {\n      commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);\n    }\n  }\n}\n\nfunction commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    const sibling = fiber.sibling;\n    const returnFiber = fiber.return; // Recursively traverse the entire deleted tree and clean up fiber fields.\n    // This is more aggressive than ideal, and the long term goal is to only\n    // have to detach the deleted tree at the root.\n\n    detachFiberAfterEffects(fiber);\n\n    if (fiber === deletedSubtreeRoot) {\n      nextEffect = null;\n      return;\n    }\n\n    if (sibling !== null) {\n      sibling.return = returnFiber;\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = returnFiber;\n  }\n}\n\nfunction commitPassiveUnmountInsideDeletedTreeOnFiber(current, nearestMountedAncestor) {\n  switch (current.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent:\n      {\n        commitHookPassiveUnmountEffects(current, nearestMountedAncestor, Passive);\n        break;\n      }\n    // TODO: run passive unmount effects when unmounting a root.\n    // Because passive unmount effects are not currently run,\n    // the cache instance owned by the root will never be freed.\n    // When effects are run, the cache should be freed here:\n    // case HostRoot: {\n    //   if (enableCache) {\n    //     const cache = current.memoizedState.cache;\n    //     releaseCache(cache);\n    //   }\n    //   break;\n    // }\n\n    case LegacyHiddenComponent:\n    case OffscreenComponent:\n      {\n        {\n          if (current.memoizedState !== null && current.memoizedState.cachePool !== null) {\n            const cache = current.memoizedState.cachePool.pool; // Retain/release the cache used for pending (suspended) nodes.\n            // Note that this is only reached in the non-suspended/visible case:\n            // when the content is suspended/hidden, the retain/release occurs\n            // via the parent Suspense component (see case above).\n\n            if (cache != null) {\n              retainCache(cache);\n            }\n          }\n        }\n\n        break;\n      }\n\n    case SuspenseComponent:\n      {\n\n        break;\n      }\n\n    case CacheComponent:\n      {\n        {\n          const cache = current.memoizedState.cache;\n          releaseCache(cache);\n        }\n\n        break;\n      }\n  }\n}\n\nfunction getCacheSignal() {\n\n  const cache = readContext(CacheContext);\n  return cache.controller.signal;\n}\n\nfunction getCacheForType(resourceType) {\n\n  const cache = readContext(CacheContext);\n  let cacheForType = cache.data.get(resourceType);\n\n  if (cacheForType === undefined) {\n    cacheForType = resourceType();\n    cache.data.set(resourceType, cacheForType);\n  }\n\n  return cacheForType;\n}\n\nconst DefaultCacheDispatcher = {\n  getCacheSignal,\n  getCacheForType\n};\n\nconst PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\nconst ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher,\n      ReactCurrentCache = ReactSharedInternals.ReactCurrentCache,\n      ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner,\n      ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig,\n      ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;\nconst NoContext =\n/*             */\n0b000;\nconst BatchedContext =\n/*               */\n0b001;\nconst RenderContext =\n/*         */\n0b010;\nconst CommitContext =\n/*         */\n0b100;\nconst RootInProgress = 0;\nconst RootFatalErrored = 1;\nconst RootErrored = 2;\nconst RootSuspended = 3;\nconst RootSuspendedWithDelay = 4;\nconst RootCompleted = 5;\nconst RootDidNotComplete = 6; // Describes where we are in the React execution stack\n\nlet executionContext = NoContext; // The root we're working on\n\nlet workInProgressRoot = null; // The fiber we're working on\n\nlet workInProgress = null; // The lanes we're rendering\n\nlet workInProgressRootRenderLanes = NoLanes;\nconst NotSuspended = 0;\nconst SuspendedOnError = 1;\nconst SuspendedOnData = 2;\nconst SuspendedOnImmediate = 3;\nconst SuspendedOnInstance = 4;\nconst SuspendedOnInstanceAndReadyToContinue = 5;\nconst SuspendedOnDeprecatedThrowPromise = 6;\nconst SuspendedAndReadyToContinue = 7;\nconst SuspendedOnHydration = 8; // When this is true, the work-in-progress fiber just suspended (or errored) and\n// we've yet to unwind the stack. In some cases, we may yield to the main thread\n// after this happens. If the fiber is pinged before we resume, we can retry\n// immediately instead of unwinding the stack.\n\nlet workInProgressSuspendedReason = NotSuspended;\nlet workInProgressThrownValue = null; // Whether a ping listener was attached during this render. This is slightly\n// different that whether something suspended, because we don't add multiple\n// listeners to a promise we've already seen (per root and lane).\n\nlet workInProgressRootDidAttachPingListener = false; // A contextual version of workInProgressRootRenderLanes. It is a superset of\n// the lanes that we started working on at the root. When we enter a subtree\n// that is currently hidden, we add the lanes that would have committed if\n// the hidden tree hadn't been deferred. This is modified by the\n// HiddenContext module.\n//\n// Most things in the work loop should deal with workInProgressRootRenderLanes.\n// Most things in begin/complete phases should deal with entangledRenderLanes.\n\nlet entangledRenderLanes = NoLanes; // Whether to root completed, errored, suspended, etc.\n\nlet workInProgressRootExitStatus = RootInProgress; // The work left over by components that were visited during this render. Only\n// includes unprocessed updates, not work in bailed out children.\n\nlet workInProgressRootSkippedLanes = NoLanes; // Lanes that were updated (in an interleaved event) during this render.\n\nlet workInProgressRootInterleavedUpdatedLanes = NoLanes; // Lanes that were updated during the render phase (*not* an interleaved event).\n\nlet workInProgressRootPingedLanes = NoLanes; // If this lane scheduled deferred work, this is the lane of the deferred task.\n\nlet workInProgressDeferredLane = NoLane; // Errors that are thrown during the render phase.\n\nlet workInProgressRootConcurrentErrors = null; // These are errors that we recovered from without surfacing them to the UI.\n// We will log them once the tree commits.\n\nlet workInProgressRootRecoverableErrors = null; // Tracks when an update occurs during the render phase.\n\nlet workInProgressRootDidIncludeRecursiveRenderUpdate = false; // Thacks when an update occurs during the commit phase. It's a separate\n// variable from the one for renders because the commit phase may run\n// concurrently to a render phase.\n\nlet didIncludeCommitPhaseUpdate = false; // The most recent time we either committed a fallback, or when a fallback was\n// filled in with the resolved UI. This lets us throttle the appearance of new\n// content as it streams in, to minimize jank.\n// TODO: Think of a better name for this variable?\n\nlet globalMostRecentFallbackTime = 0;\nconst FALLBACK_THROTTLE_MS = 300; // The absolute time for when we should start giving up on rendering\n// more and prefer CPU suspense heuristics instead.\n\nlet workInProgressRootRenderTargetTime = Infinity; // How long a render is supposed to take before we start following CPU\n// suspense heuristics and opt out of rendering more content.\n\nconst RENDER_TIMEOUT_MS = 500;\nlet workInProgressTransitions = null;\n\nfunction resetRenderTimer() {\n  workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;\n}\n\nfunction getRenderTargetTime() {\n  return workInProgressRootRenderTargetTime;\n}\nlet legacyErrorBoundariesThatAlreadyFailed = null;\nlet rootDoesHavePassiveEffects = false;\nlet rootWithPendingPassiveEffects = null;\nlet pendingPassiveEffectsLanes = NoLanes;\nlet pendingPassiveEffectsRemainingLanes = NoLanes;\nlet pendingPassiveTransitions = null; // Use these to prevent an infinite loop of nested updates\n\nconst NESTED_UPDATE_LIMIT = 50;\nlet nestedUpdateCount = 0;\nlet rootWithNestedUpdates = null;\nfunction getWorkInProgressRoot() {\n  return workInProgressRoot;\n}\nfunction getWorkInProgressRootRenderLanes() {\n  return workInProgressRootRenderLanes;\n}\nfunction isWorkLoopSuspendedOnData() {\n  return workInProgressSuspendedReason === SuspendedOnData;\n}\nfunction requestUpdateLane(fiber) {\n  // Special cases\n  const mode = fiber.mode;\n\n  if ((mode & ConcurrentMode) === NoMode) {\n    return SyncLane;\n  } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {\n    // This is a render phase update. These are not officially supported. The\n    // old behavior is to give this the same \"thread\" (lanes) as\n    // whatever is currently rendering. So if you call `setState` on a component\n    // that happens later in the same render, it will flush. Ideally, we want to\n    // remove the special case and treat them as if they came from an\n    // interleaved event. Regardless, this pattern is not officially supported.\n    // This behavior is only a fallback. The flag only exists until we can roll\n    // out the setState warning, since existing code might accidentally rely on\n    // the current behavior.\n    return pickArbitraryLane(workInProgressRootRenderLanes);\n  }\n\n  const transition = requestCurrentTransition();\n\n  if (transition !== null) {\n\n    const actionScopeLane = peekEntangledActionLane();\n    return actionScopeLane !== NoLane ? // We're inside an async action scope. Reuse the same lane.\n    actionScopeLane : // We may or may not be inside an async action scope. If we are, this\n    // is the first update in that scope. Either way, we need to get a\n    // fresh transition lane.\n    requestTransitionLane();\n  } // Updates originating inside certain React methods, like flushSync, have\n  // their priority set by tracking it with a context variable.\n  //\n  // The opaque type returned by the host config is internally a lane, so we can\n  // use that directly.\n  // TODO: Move this type conversion to the event priority module.\n\n\n  const updateLane = getCurrentUpdatePriority();\n\n  if (updateLane !== NoLane) {\n    return updateLane;\n  } // This update originated outside React. Ask the host environment for an\n  // appropriate priority, based on the type of event.\n  //\n  // The opaque type returned by the host config is internally a lane, so we can\n  // use that directly.\n  // TODO: Move this type conversion to the event priority module.\n\n\n  const eventLane = getCurrentEventPriority();\n  return eventLane;\n}\n\nfunction requestRetryLane(fiber) {\n  // This is a fork of `requestUpdateLane` designed specifically for Suspense\n  // \"retries\" — a special update that attempts to flip a Suspense boundary\n  // from its placeholder state to its primary/resolved state.\n  // Special cases\n  const mode = fiber.mode;\n\n  if ((mode & ConcurrentMode) === NoMode) {\n    return SyncLane;\n  }\n\n  return claimNextRetryLane();\n}\n\nfunction requestDeferredLane() {\n  if (workInProgressDeferredLane === NoLane) {\n    // If there are multiple useDeferredValue hooks in the same render, the\n    // tasks that they spawn should all be batched together, so they should all\n    // receive the same lane.\n    // Check the priority of the current render to decide the priority of the\n    // deferred task.\n    // OffscreenLane is used for prerendering, but we also use OffscreenLane\n    // for incremental hydration. It's given the lowest priority because the\n    // initial HTML is the same as the final UI. But useDeferredValue during\n    // hydration is an exception — we need to upgrade the UI to the final\n    // value. So if we're currently hydrating, we treat it like a transition.\n    const isPrerendering = includesSomeLane(workInProgressRootRenderLanes, OffscreenLane) && !getIsHydrating();\n\n    if (isPrerendering) {\n      // There's only one OffscreenLane, so if it contains deferred work, we\n      // should just reschedule using the same lane.\n      workInProgressDeferredLane = OffscreenLane;\n    } else {\n      // Everything else is spawned as a transition.\n      workInProgressDeferredLane = claimNextTransitionLane();\n    }\n  } // Mark the parent Suspense boundary so it knows to spawn the deferred lane.\n\n\n  const suspenseHandler = getSuspenseHandler();\n\n  if (suspenseHandler !== null) {\n    // TODO: As an optimization, we shouldn't entangle the lanes at the root; we\n    // can entangle them using the baseLanes of the Suspense boundary instead.\n    // We only need to do something special if there's no Suspense boundary.\n    suspenseHandler.flags |= DidDefer;\n  }\n\n  return workInProgressDeferredLane;\n}\nfunction peekDeferredLane() {\n  return workInProgressDeferredLane;\n}\nfunction scheduleUpdateOnFiber(root, fiber, lane) {\n  // finish loading.\n\n\n  if ( // Suspended render phase\n  root === workInProgressRoot && workInProgressSuspendedReason === SuspendedOnData || // Suspended commit phase\n  root.cancelPendingCommit !== null) {\n    // The incoming update might unblock the current render. Interrupt the\n    // current attempt and restart from the top.\n    prepareFreshStack(root, NoLanes);\n    markRootSuspended(root, workInProgressRootRenderLanes, workInProgressDeferredLane);\n  } // Mark that the root has a pending update.\n\n\n  markRootUpdated(root, lane);\n\n  if ((executionContext & RenderContext) !== NoLanes && root === workInProgressRoot) ; else {\n\n    if (root === workInProgressRoot) {\n      // Received an update to a tree that's in the middle of rendering. Mark\n      // that there was an interleaved update work on this root.\n      if ((executionContext & RenderContext) === NoContext) {\n        workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);\n      }\n\n      if (workInProgressRootExitStatus === RootSuspendedWithDelay) {\n        // The root already suspended with a delay, which means this render\n        // definitely won't finish. Since we have a new update, let's mark it as\n        // suspended now, right before marking the incoming update. This has the\n        // effect of interrupting the current render and switching to the update.\n        // TODO: Make sure this doesn't override pings that happen while we've\n        // already started rendering.\n        markRootSuspended(root, workInProgressRootRenderLanes, workInProgressDeferredLane);\n      }\n    }\n\n    ensureRootIsScheduled(root);\n\n    if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode) {\n      {\n        // Flush the synchronous work now, unless we're already working or inside\n        // a batch. This is intentionally inside scheduleUpdateOnFiber instead of\n        // scheduleCallbackForFiber to preserve the ability to schedule a callback\n        // without immediately flushing it. We only do this for user-initiated\n        // updates, to preserve historical behavior of legacy mode.\n        resetRenderTimer();\n        flushSyncWorkOnLegacyRootsOnly();\n      }\n    }\n  }\n}\nfunction scheduleInitialHydrationOnRoot(root, lane) {\n  // This is a special fork of scheduleUpdateOnFiber that is only used to\n  // schedule the initial hydration of a root that has just been created. Most\n  // of the stuff in scheduleUpdateOnFiber can be skipped.\n  //\n  // The main reason for this separate path, though, is to distinguish the\n  // initial children from subsequent updates. In fully client-rendered roots\n  // (createRoot instead of hydrateRoot), all top-level renders are modeled as\n  // updates, but hydration roots are special because the initial render must\n  // match what was rendered on the server.\n  const current = root.current;\n  current.lanes = lane;\n  markRootUpdated(root, lane);\n  ensureRootIsScheduled(root);\n}\nfunction isUnsafeClassRenderPhaseUpdate(fiber) {\n  // Check if this is a render phase update. Only called by class components,\n  // which special (deprecated) behavior for UNSAFE_componentWillReceive props.\n  return (executionContext & RenderContext) !== NoContext;\n} // This is the entry point for every concurrent task, i.e. anything that\n// goes through Scheduler.\n\nfunction performConcurrentWorkOnRoot(root, didTimeout) {\n\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    throw Error(formatProdErrorMessage(327));\n  } // Flush any pending passive effects before deciding which lanes to work on,\n  // in case they schedule additional work.\n\n\n  const originalCallbackNode = root.callbackNode;\n  const didFlushPassiveEffects = flushPassiveEffects();\n\n  if (didFlushPassiveEffects) {\n    // Something in the passive effect phase may have canceled the current task.\n    // Check if the task node for this root was changed.\n    if (root.callbackNode !== originalCallbackNode) {\n      // The current task was canceled. Exit. We don't need to call\n      // `ensureRootIsScheduled` because the check above implies either that\n      // there's a new task, or that there's no remaining work on this root.\n      return null;\n    }\n  } // Determine the next lanes to work on, using the fields stored\n  // on the root.\n  // TODO: This was already computed in the caller. Pass it as an argument.\n\n\n  let lanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);\n\n  if (lanes === NoLanes) {\n    // Defensive coding. This is never expected to happen.\n    return null;\n  } // We disable time-slicing in some cases: if the work has been CPU-bound\n  // for too long (\"expired\" work, to prevent starvation), or we're in\n  // sync-updates-by-default mode.\n  // TODO: We only check `didTimeout` defensively, to account for a Scheduler\n  // bug we're still investigating. Once the bug in Scheduler is fixed,\n  // we can remove this, since we track expiration ourselves.\n\n\n  const shouldTimeSlice = !includesBlockingLane(root, lanes) && !includesExpiredLane(root, lanes) && (!didTimeout);\n  let exitStatus = shouldTimeSlice ? renderRootConcurrent(root, lanes) : renderRootSync(root, lanes);\n\n  if (exitStatus !== RootInProgress) {\n    let renderWasConcurrent = shouldTimeSlice;\n\n    do {\n      if (exitStatus === RootDidNotComplete) {\n        // The render unwound without completing the tree. This happens in special\n        // cases where need to exit the current render without producing a\n        // consistent tree or committing.\n        markRootSuspended(root, lanes, NoLane);\n      } else {\n        // The render completed.\n        // Check if this render may have yielded to a concurrent event, and if so,\n        // confirm that any newly rendered stores are consistent.\n        // TODO: It's possible that even a concurrent render may never have yielded\n        // to the main thread, if it was fast enough, or if it expired. We could\n        // skip the consistency check in that case, too.\n        const finishedWork = root.current.alternate;\n\n        if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {\n          // A store was mutated in an interleaved event. Render again,\n          // synchronously, to block further mutations.\n          exitStatus = renderRootSync(root, lanes); // We assume the tree is now consistent because we didn't yield to any\n          // concurrent events.\n\n          renderWasConcurrent = false; // Need to check the exit status again.\n\n          continue;\n        } // Check if something threw\n\n\n        if (exitStatus === RootErrored) {\n          const originallyAttemptedLanes = lanes;\n          const errorRetryLanes = getLanesToRetrySynchronouslyOnError(root, originallyAttemptedLanes);\n\n          if (errorRetryLanes !== NoLanes) {\n            lanes = errorRetryLanes;\n            exitStatus = recoverFromConcurrentError(root, originallyAttemptedLanes, errorRetryLanes);\n            renderWasConcurrent = false;\n          }\n        }\n\n        if (exitStatus === RootFatalErrored) {\n          prepareFreshStack(root, NoLanes);\n          markRootSuspended(root, lanes, NoLane);\n          break;\n        } // We now have a consistent tree. The next step is either to commit it,\n        // or, if something suspended, wait to commit it after a timeout.\n\n\n        root.finishedWork = finishedWork;\n        root.finishedLanes = lanes;\n        finishConcurrentRender(root, exitStatus, finishedWork, lanes);\n      }\n\n      break;\n    } while (true);\n  }\n\n  ensureRootIsScheduled(root);\n  return getContinuationForRoot(root, originalCallbackNode);\n}\n\nfunction recoverFromConcurrentError(root, originallyAttemptedLanes, errorRetryLanes) {\n  // If an error occurred during hydration, discard server response and fall\n  // back to client side render.\n  // Before rendering again, save the errors from the previous attempt.\n  const errorsFromFirstAttempt = workInProgressRootConcurrentErrors;\n  const wasRootDehydrated = isRootDehydrated(root);\n\n  if (wasRootDehydrated) {\n    // The shell failed to hydrate. Set a flag to force a client rendering\n    // during the next attempt. To do this, we call prepareFreshStack now\n    // to create the root work-in-progress fiber. This is a bit weird in terms\n    // of factoring, because it relies on renderRootSync not calling\n    // prepareFreshStack again in the call below, which happens because the\n    // root and lanes haven't changed.\n    //\n    // TODO: I think what we should do is set ForceClientRender inside\n    // throwException, like we do for nested Suspense boundaries. The reason\n    // it's here instead is so we can switch to the synchronous work loop, too.\n    // Something to consider for a future refactor.\n    const rootWorkInProgress = prepareFreshStack(root, errorRetryLanes);\n    rootWorkInProgress.flags |= ForceClientRender;\n  }\n\n  const exitStatus = renderRootSync(root, errorRetryLanes);\n\n  if (exitStatus !== RootErrored) {\n    // Successfully finished rendering on retry\n    if (workInProgressRootDidAttachPingListener && !wasRootDehydrated) {\n      // During the synchronous render, we attached additional ping listeners.\n      // This is highly suggestive of an uncached promise (though it's not the\n      // only reason this would happen). If it was an uncached promise, then\n      // it may have masked a downstream error from ocurring without actually\n      // fixing it. Example:\n      //\n      //    use(Promise.resolve('uncached'))\n      //    throw new Error('Oops!')\n      //\n      // When this happens, there's a conflict between blocking potential\n      // concurrent data races and unwrapping uncached promise values. We\n      // have to choose one or the other. Because the data race recovery is\n      // a last ditch effort, we'll disable it.\n      root.errorRecoveryDisabledLanes = mergeLanes(root.errorRecoveryDisabledLanes, originallyAttemptedLanes); // Mark the current render as suspended and force it to restart. Once\n      // these lanes finish successfully, we'll re-enable the error recovery\n      // mechanism for subsequent updates.\n\n      workInProgressRootInterleavedUpdatedLanes |= originallyAttemptedLanes;\n      return RootSuspendedWithDelay;\n    } // The errors from the failed first attempt have been recovered. Add\n    // them to the collection of recoverable errors. We'll log them in the\n    // commit phase.\n\n\n    const errorsFromSecondAttempt = workInProgressRootRecoverableErrors;\n    workInProgressRootRecoverableErrors = errorsFromFirstAttempt; // The errors from the second attempt should be queued after the errors\n    // from the first attempt, to preserve the causal sequence.\n\n    if (errorsFromSecondAttempt !== null) {\n      queueRecoverableErrors(errorsFromSecondAttempt);\n    }\n  }\n\n  return exitStatus;\n}\n\nfunction queueRecoverableErrors(errors) {\n  if (workInProgressRootRecoverableErrors === null) {\n    workInProgressRootRecoverableErrors = errors;\n  } else {\n    // $FlowFixMe[method-unbinding]\n    workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);\n  }\n}\n\nfunction finishConcurrentRender(root, exitStatus, finishedWork, lanes) {\n  // TODO: The fact that most of these branches are identical suggests that some\n  // of the exit statuses are not best modeled as exit statuses and should be\n  // tracked orthogonally.\n  switch (exitStatus) {\n    case RootInProgress:\n    case RootFatalErrored:\n      {\n        throw Error(formatProdErrorMessage(345));\n      }\n\n    case RootSuspendedWithDelay:\n      {\n        if (includesOnlyTransitions(lanes)) {\n          // This is a transition, so we should exit without committing a\n          // placeholder and without scheduling a timeout. Delay indefinitely\n          // until we receive more data.\n          markRootSuspended(root, lanes, workInProgressDeferredLane);\n          return;\n        } // Commit the placeholder.\n\n\n        break;\n      }\n\n    case RootErrored:\n      {\n        // This render errored. Ignore any recoverable errors because we weren't actually\n        // able to recover. Instead, whatever the final errors were is the ones we log.\n        // This ensures that we only log the actual client side error if it's just a plain\n        // error thrown from a component on the server and the client.\n        workInProgressRootRecoverableErrors = null;\n        break;\n      }\n\n    case RootSuspended:\n    case RootCompleted:\n      {\n        break;\n      }\n\n    default:\n      {\n        throw Error(formatProdErrorMessage(329));\n      }\n  }\n\n  {\n    if (includesOnlyRetries(lanes) && (alwaysThrottleRetries )) {\n      // This render only included retries, no updates. Throttle committing\n      // retries so that we don't show too many loading states too quickly.\n      const msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(); // Don't bother with a very short suspense time.\n\n      if (msUntilTimeout > 10) {\n        markRootSuspended(root, lanes, workInProgressDeferredLane);\n        const nextLanes = getNextLanes(root, NoLanes);\n\n        if (nextLanes !== NoLanes) {\n          // There's additional work we can do on this root. We might as well\n          // attempt to work on that while we're suspended.\n          return;\n        } // The render is suspended, it hasn't timed out, and there's no\n        // lower priority work to do. Instead of committing the fallback\n        // immediately, wait for more data to arrive.\n        // TODO: Combine retry throttling with Suspensey commits. Right now they\n        // run one after the other.\n\n\n        root.timeoutHandle = scheduleTimeout(commitRootWhenReady.bind(null, root, finishedWork, workInProgressRootRecoverableErrors, workInProgressTransitions, workInProgressRootDidIncludeRecursiveRenderUpdate, lanes, workInProgressDeferredLane), msUntilTimeout);\n        return;\n      }\n    }\n\n    commitRootWhenReady(root, finishedWork, workInProgressRootRecoverableErrors, workInProgressTransitions, workInProgressRootDidIncludeRecursiveRenderUpdate, lanes, workInProgressDeferredLane);\n  }\n}\n\nfunction commitRootWhenReady(root, finishedWork, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, lanes, spawnedLane) {\n  // TODO: Combine retry throttling with Suspensey commits. Right now they run\n  // one after the other.\n  if (includesOnlyNonUrgentLanes(lanes)) {\n    // Before committing, ask the renderer whether the host tree is ready.\n    // If it's not, we'll wait until it notifies us.\n    startSuspendingCommit(); // This will walk the completed fiber tree and attach listeners to all\n    // the suspensey resources. The renderer is responsible for accumulating\n    // all the load events. This all happens in a single synchronous\n    // transaction, so it track state in its own module scope.\n\n    accumulateSuspenseyCommit(finishedWork); // At the end, ask the renderer if it's ready to commit, or if we should\n    // suspend. If it's not ready, it will return a callback to subscribe to\n    // a ready event.\n\n    const schedulePendingCommit = waitForCommitToBeReady();\n\n    if (schedulePendingCommit !== null) {\n      // NOTE: waitForCommitToBeReady returns a subscribe function so that we\n      // only allocate a function if the commit isn't ready yet. The other\n      // pattern would be to always pass a callback to waitForCommitToBeReady.\n      // Not yet ready to commit. Delay the commit until the renderer notifies\n      // us that it's ready. This will be canceled if we start work on the\n      // root again.\n      root.cancelPendingCommit = schedulePendingCommit(commitRoot.bind(null, root, recoverableErrors, transitions, didIncludeRenderPhaseUpdate));\n      markRootSuspended(root, lanes, spawnedLane);\n      return;\n    }\n  } // Otherwise, commit immediately.\n\n\n  commitRoot(root, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, spawnedLane);\n}\n\nfunction isRenderConsistentWithExternalStores(finishedWork) {\n  // Search the rendered tree for external store reads, and check whether the\n  // stores were mutated in a concurrent event. Intentionally using an iterative\n  // loop instead of recursion so we can exit early.\n  let node = finishedWork;\n\n  while (true) {\n    if (node.flags & StoreConsistency) {\n      const updateQueue = node.updateQueue;\n\n      if (updateQueue !== null) {\n        const checks = updateQueue.stores;\n\n        if (checks !== null) {\n          for (let i = 0; i < checks.length; i++) {\n            const check = checks[i];\n            const getSnapshot = check.getSnapshot;\n            const renderedValue = check.value;\n\n            try {\n              if (!objectIs(getSnapshot(), renderedValue)) {\n                // Found an inconsistent store.\n                return false;\n              }\n            } catch (error) {\n              // If `getSnapshot` throws, return `false`. This will schedule\n              // a re-render, and the error will be rethrown during render.\n              return false;\n            }\n          }\n        }\n      }\n    }\n\n    const child = node.child;\n\n    if (node.subtreeFlags & StoreConsistency && child !== null) {\n      child.return = node;\n      node = child;\n      continue;\n    }\n\n    if (node === finishedWork) {\n      return true;\n    }\n\n    while (node.sibling === null) {\n      if (node.return === null || node.return === finishedWork) {\n        return true;\n      }\n\n      node = node.return;\n    }\n\n    node.sibling.return = node.return;\n    node = node.sibling;\n  } // Flow doesn't know this is unreachable, but eslint does\n  // eslint-disable-next-line no-unreachable\n\n\n  return true;\n} // The extra indirections around markRootUpdated and markRootSuspended is\n// needed to avoid a circular dependency between this module and\n// ReactFiberLane. There's probably a better way to split up these modules and\n// avoid this problem. Perhaps all the root-marking functions should move into\n// the work loop.\n\n\nfunction markRootUpdated(root, updatedLanes) {\n  markRootUpdated$1(root, updatedLanes);\n\n  {\n    // Check for recursive updates\n    if (executionContext & RenderContext) {\n      workInProgressRootDidIncludeRecursiveRenderUpdate = true;\n    } else if (executionContext & CommitContext) {\n      didIncludeCommitPhaseUpdate = true;\n    }\n\n    throwIfInfiniteUpdateLoopDetected();\n  }\n}\n\nfunction markRootPinged(root, pingedLanes) {\n  markRootPinged$1(root, pingedLanes);\n\n  {\n    // Check for recursive pings. Pings are conceptually different from updates in\n    // other contexts but we call it an \"update\" in this context because\n    // repeatedly pinging a suspended render can cause a recursive render loop.\n    // The relevant property is that it can result in a new render attempt\n    // being scheduled.\n    if (executionContext & RenderContext) {\n      workInProgressRootDidIncludeRecursiveRenderUpdate = true;\n    } else if (executionContext & CommitContext) {\n      didIncludeCommitPhaseUpdate = true;\n    }\n\n    throwIfInfiniteUpdateLoopDetected();\n  }\n}\n\nfunction markRootSuspended(root, suspendedLanes, spawnedLane) {\n  // When suspending, we should always exclude lanes that were pinged or (more\n  // rarely, since we try to avoid it) updated during the render phase.\n  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);\n  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);\n\n  markRootSuspended$1(root, suspendedLanes, spawnedLane);\n} // This is the entry point for synchronous tasks that don't go\n// through Scheduler\n\n\nfunction performSyncWorkOnRoot(root, lanes) {\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    throw Error(formatProdErrorMessage(327));\n  }\n\n  const didFlushPassiveEffects = flushPassiveEffects();\n\n  if (didFlushPassiveEffects) {\n    // If passive effects were flushed, exit to the outer work loop in the root\n    // scheduler, so we can recompute the priority.\n    // TODO: We don't actually need this `ensureRootIsScheduled` call because\n    // this path is only reachable if the root is already part of the schedule.\n    // I'm including it only for consistency with the other exit points from\n    // this function. Can address in a subsequent refactor.\n    ensureRootIsScheduled(root);\n    return null;\n  }\n\n  let exitStatus = renderRootSync(root, lanes);\n\n  if (root.tag !== LegacyRoot && exitStatus === RootErrored) {\n    // If something threw an error, try rendering one more time. We'll render\n    // synchronously to block concurrent data mutations, and we'll includes\n    // all pending updates are included. If it still fails after the second\n    // attempt, we'll give up and commit the resulting tree.\n    const originallyAttemptedLanes = lanes;\n    const errorRetryLanes = getLanesToRetrySynchronouslyOnError(root, originallyAttemptedLanes);\n\n    if (errorRetryLanes !== NoLanes) {\n      lanes = errorRetryLanes;\n      exitStatus = recoverFromConcurrentError(root, originallyAttemptedLanes, errorRetryLanes);\n    }\n  }\n\n  if (exitStatus === RootFatalErrored) {\n    prepareFreshStack(root, NoLanes);\n    markRootSuspended(root, lanes, NoLane);\n    ensureRootIsScheduled(root);\n    return null;\n  }\n\n  if (exitStatus === RootDidNotComplete) {\n    // The render unwound without completing the tree. This happens in special\n    // cases where need to exit the current render without producing a\n    // consistent tree or committing.\n    markRootSuspended(root, lanes, workInProgressDeferredLane);\n    ensureRootIsScheduled(root);\n    return null;\n  } // We now have a consistent tree. Because this is a sync render, we\n  // will commit it even if something suspended.\n\n\n  const finishedWork = root.current.alternate;\n  root.finishedWork = finishedWork;\n  root.finishedLanes = lanes;\n  commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions, workInProgressRootDidIncludeRecursiveRenderUpdate, workInProgressDeferredLane); // Before exiting, make sure there's a callback scheduled for the next\n  // pending level.\n\n  ensureRootIsScheduled(root);\n  return null;\n}\nfunction flushRoot(root, lanes) {\n  if (lanes !== NoLanes) {\n    upgradePendingLanesToSync(root, lanes);\n    ensureRootIsScheduled(root);\n\n    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\n      resetRenderTimer(); // TODO: For historical reasons this flushes all sync work across all\n      // roots. It shouldn't really matter either way, but we could change this\n      // to only flush the given root.\n\n      flushSyncWorkOnAllRoots();\n    }\n  }\n}\nfunction getExecutionContext() {\n  return executionContext;\n}\nfunction batchedUpdates$1(fn, a) {\n  {\n    const prevExecutionContext = executionContext;\n    executionContext |= BatchedContext;\n\n    try {\n      return fn(a);\n    } finally {\n      executionContext = prevExecutionContext; // If there were legacy sync updates, flush them at the end of the outer\n      // most batchedUpdates-like method.\n\n      if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.\n      !(false )) {\n        resetRenderTimer();\n        flushSyncWorkOnLegacyRootsOnly();\n      }\n    }\n  }\n}\n// Warning, this opts-out of checking the function body.\n// eslint-disable-next-line no-unused-vars\n// eslint-disable-next-line no-redeclare\n// eslint-disable-next-line no-redeclare\n\nfunction flushSync$1(fn) {\n  // In legacy mode, we flush pending passive effects at the beginning of the\n  // next event, not at the end of the previous one.\n  if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {\n    flushPassiveEffects();\n  }\n\n  const prevExecutionContext = executionContext;\n  executionContext |= BatchedContext;\n  const prevTransition = ReactCurrentBatchConfig$1.transition;\n  const previousPriority = getCurrentUpdatePriority();\n\n  try {\n    ReactCurrentBatchConfig$1.transition = null;\n    setCurrentUpdatePriority(DiscreteEventPriority);\n\n    if (fn) {\n      return fn();\n    } else {\n      return undefined;\n    }\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig$1.transition = prevTransition;\n    executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.\n    // Note that this will happen even if batchedUpdates is higher up\n    // the stack.\n\n    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\n      flushSyncWorkOnAllRoots();\n    }\n  }\n}\n// hidden subtree. The stack logic is managed there because that's the only\n// place that ever modifies it. Which module it lives in doesn't matter for\n// performance because this function will get inlined regardless\n\nfunction setEntangledRenderLanes(newEntangledRenderLanes) {\n  entangledRenderLanes = newEntangledRenderLanes;\n}\nfunction getEntangledRenderLanes() {\n  return entangledRenderLanes;\n}\n\nfunction resetWorkInProgressStack() {\n  if (workInProgress === null) return;\n  let interruptedWork;\n\n  if (workInProgressSuspendedReason === NotSuspended) {\n    // Normal case. Work-in-progress hasn't started yet. Unwind all\n    // its parents.\n    interruptedWork = workInProgress.return;\n  } else {\n    // Work-in-progress is in suspended state. Reset the work loop and unwind\n    // both the suspended fiber and all its parents.\n    resetSuspendedWorkLoopOnUnwind(workInProgress);\n    interruptedWork = workInProgress;\n  }\n\n  while (interruptedWork !== null) {\n    const current = interruptedWork.alternate;\n    unwindInterruptedWork(current, interruptedWork);\n    interruptedWork = interruptedWork.return;\n  }\n\n  workInProgress = null;\n}\n\nfunction prepareFreshStack(root, lanes) {\n  root.finishedWork = null;\n  root.finishedLanes = NoLanes;\n  const timeoutHandle = root.timeoutHandle;\n\n  if (timeoutHandle !== noTimeout) {\n    // The root previous suspended and scheduled a timeout to commit a fallback\n    // state. Now that we have additional work, cancel the timeout.\n    root.timeoutHandle = noTimeout; // $FlowFixMe[incompatible-call] Complains noTimeout is not a TimeoutID, despite the check above\n\n    cancelTimeout(timeoutHandle);\n  }\n\n  const cancelPendingCommit = root.cancelPendingCommit;\n\n  if (cancelPendingCommit !== null) {\n    root.cancelPendingCommit = null;\n    cancelPendingCommit();\n  }\n\n  resetWorkInProgressStack();\n  workInProgressRoot = root;\n  const rootWorkInProgress = createWorkInProgress(root.current, null);\n  workInProgress = rootWorkInProgress;\n  workInProgressRootRenderLanes = lanes;\n  workInProgressSuspendedReason = NotSuspended;\n  workInProgressThrownValue = null;\n  workInProgressRootDidAttachPingListener = false;\n  workInProgressRootExitStatus = RootInProgress;\n  workInProgressRootSkippedLanes = NoLanes;\n  workInProgressRootInterleavedUpdatedLanes = NoLanes;\n  workInProgressRootPingedLanes = NoLanes;\n  workInProgressDeferredLane = NoLane;\n  workInProgressRootConcurrentErrors = null;\n  workInProgressRootRecoverableErrors = null;\n  workInProgressRootDidIncludeRecursiveRenderUpdate = false; // Get the lanes that are entangled with whatever we're about to render. We\n  // track these separately so we can distinguish the priority of the render\n  // task from the priority of the lanes it is entangled with. For example, a\n  // transition may not be allowed to finish unless it includes the Sync lane,\n  // which is currently suspended. We should be able to render the Transition\n  // and Sync lane in the same batch, but at Transition priority, because the\n  // Sync lane already suspended.\n\n  entangledRenderLanes = getEntangledLanes(root, lanes);\n  finishQueueingConcurrentUpdates();\n\n  return rootWorkInProgress;\n}\n\nfunction resetSuspendedWorkLoopOnUnwind(fiber) {\n  // Reset module-level state that was set during the render phase.\n  resetContextDependencies();\n  resetHooksOnUnwind(fiber);\n  resetChildReconcilerOnUnwind();\n}\n\nfunction handleThrow(root, thrownValue) {\n  // A component threw an exception. Usually this is because it suspended, but\n  // it also includes regular program errors.\n  //\n  // We're either going to unwind the stack to show a Suspense or error\n  // boundary, or we're going to replay the component again. Like after a\n  // promise resolves.\n  //\n  // Until we decide whether we're going to unwind or replay, we should preserve\n  // the current state of the work loop without resetting anything.\n  //\n  // If we do decide to unwind the stack, module-level variables will be reset\n  // in resetSuspendedWorkLoopOnUnwind.\n  // These should be reset immediately because they're only supposed to be set\n  // when React is executing user code.\n  resetHooksAfterThrow();\n  ReactCurrentOwner.current = null;\n\n  if (thrownValue === SuspenseException) {\n    // This is a special type of exception used for Suspense. For historical\n    // reasons, the rest of the Suspense implementation expects the thrown value\n    // to be a thenable, because before `use` existed that was the (unstable)\n    // API for suspending. This implementation detail can change later, once we\n    // deprecate the old API in favor of `use`.\n    thrownValue = getSuspendedThenable();\n    workInProgressSuspendedReason = shouldRemainOnPreviousScreen() && // Check if there are other pending updates that might possibly unblock this\n    // component from suspending. This mirrors the check in\n    // renderDidSuspendDelayIfPossible. We should attempt to unify them somehow.\n    // TODO: Consider unwinding immediately, using the\n    // SuspendedOnHydration mechanism.\n    !includesNonIdleWork(workInProgressRootSkippedLanes) && !includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes) ? // Suspend work loop until data resolves\n    SuspendedOnData : // Don't suspend work loop, except to check if the data has\n    // immediately resolved (i.e. in a microtask). Otherwise, trigger the\n    // nearest Suspense fallback.\n    SuspendedOnImmediate;\n  } else if (thrownValue === SuspenseyCommitException) {\n    thrownValue = getSuspendedThenable();\n    workInProgressSuspendedReason = SuspendedOnInstance;\n  } else if (thrownValue === SelectiveHydrationException) {\n    // An update flowed into a dehydrated boundary. Before we can apply the\n    // update, we need to finish hydrating. Interrupt the work-in-progress\n    // render so we can restart at the hydration lane.\n    //\n    // The ideal implementation would be able to switch contexts without\n    // unwinding the current stack.\n    //\n    // We could name this something more general but as of now it's the only\n    // case where we think this should happen.\n    workInProgressSuspendedReason = SuspendedOnHydration;\n  } else {\n    // This is a regular error.\n    const isWakeable = thrownValue !== null && typeof thrownValue === 'object' && typeof thrownValue.then === 'function';\n    workInProgressSuspendedReason = isWakeable ? // A wakeable object was thrown by a legacy Suspense implementation.\n    // This has slightly different behavior than suspending with `use`.\n    SuspendedOnDeprecatedThrowPromise : // This is a regular error. If something earlier in the component already\n    // suspended, we must clear the thenable state to unblock the work loop.\n    SuspendedOnError;\n  }\n\n  workInProgressThrownValue = thrownValue;\n  const erroredWork = workInProgress;\n\n  if (erroredWork === null) {\n    // This is a fatal error\n    workInProgressRootExitStatus = RootFatalErrored;\n    logUncaughtError(root, createCapturedValueAtFiber(thrownValue, root.current));\n    return;\n  }\n}\n\nfunction shouldRemainOnPreviousScreen() {\n  // This is asking whether it's better to suspend the transition and remain\n  // on the previous screen, versus showing a fallback as soon as possible. It\n  // takes into account both the priority of render and also whether showing a\n  // fallback would produce a desirable user experience.\n  const handler = getSuspenseHandler();\n\n  if (handler === null) {\n    // There's no Suspense boundary that can provide a fallback. We have no\n    // choice but to remain on the previous screen.\n    // NOTE: We do this even for sync updates, for lack of any better option. In\n    // the future, we may change how we handle this, like by putting the whole\n    // root into a \"detached\" mode.\n    return true;\n  } // TODO: Once `use` has fully replaced the `throw promise` pattern, we should\n  // be able to remove the equivalent check in finishConcurrentRender, and rely\n  // just on this one.\n\n\n  if (includesOnlyTransitions(workInProgressRootRenderLanes)) {\n    if (getShellBoundary() === null) {\n      // We're rendering inside the \"shell\" of the app. Activating the nearest\n      // fallback would cause visible content to disappear. It's better to\n      // suspend the transition and remain on the previous screen.\n      return true;\n    } else {\n      // We're rendering content that wasn't part of the previous screen.\n      // Rather than block the transition, it's better to show a fallback as\n      // soon as possible. The appearance of any nested fallbacks will be\n      // throttled to avoid jank.\n      return false;\n    }\n  }\n\n  if (includesOnlyRetries(workInProgressRootRenderLanes) || // In this context, an OffscreenLane counts as a Retry\n  // TODO: It's become increasingly clear that Retries and Offscreen are\n  // deeply connected. They probably can be unified further.\n  includesSomeLane(workInProgressRootRenderLanes, OffscreenLane)) {\n    // During a retry, we can suspend rendering if the nearest Suspense boundary\n    // is the boundary of the \"shell\", because we're guaranteed not to block\n    // any new content from appearing.\n    //\n    // The reason we must check if this is a retry is because it guarantees\n    // that suspending the work loop won't block an actual update, because\n    // retries don't \"update\" anything; they fill in fallbacks that were left\n    // behind by a previous transition.\n    return handler === getShellBoundary();\n  } // For all other Lanes besides Transitions and Retries, we should not wait\n  // for the data to load.\n\n\n  return false;\n}\n\nfunction pushDispatcher(container) {\n  const prevDispatcher = ReactCurrentDispatcher.current;\n  ReactCurrentDispatcher.current = ContextOnlyDispatcher;\n\n  if (prevDispatcher === null) {\n    // The React isomorphic package does not include a default dispatcher.\n    // Instead the first renderer will lazily attach one, in order to give\n    // nicer error messages.\n    return ContextOnlyDispatcher;\n  } else {\n    return prevDispatcher;\n  }\n}\n\nfunction popDispatcher(prevDispatcher) {\n  ReactCurrentDispatcher.current = prevDispatcher;\n}\n\nfunction pushCacheDispatcher() {\n  {\n    const prevCacheDispatcher = ReactCurrentCache.current;\n    ReactCurrentCache.current = DefaultCacheDispatcher;\n    return prevCacheDispatcher;\n  }\n}\n\nfunction popCacheDispatcher(prevCacheDispatcher) {\n  {\n    ReactCurrentCache.current = prevCacheDispatcher;\n  }\n}\n\nfunction markCommitTimeOfFallback() {\n  globalMostRecentFallbackTime = now();\n}\nfunction markSkippedUpdateLanes(lane) {\n  workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);\n}\nfunction renderDidSuspend() {\n  if (workInProgressRootExitStatus === RootInProgress) {\n    workInProgressRootExitStatus = RootSuspended;\n  }\n}\nfunction renderDidSuspendDelayIfPossible() {\n  workInProgressRootExitStatus = RootSuspendedWithDelay; // Check if there are updates that we skipped tree that might have unblocked\n  // this render.\n\n  if ((includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes)) && workInProgressRoot !== null) {\n    // Mark the current render as suspended so that we switch to working on\n    // the updates that were skipped. Usually we only suspend at the end of\n    // the render phase.\n    // TODO: We should probably always mark the root as suspended immediately\n    // (inside this function), since by suspending at the end of the render\n    // phase introduces a potential mistake where we suspend lanes that were\n    // pinged or updated while we were rendering.\n    // TODO: Consider unwinding immediately, using the\n    // SuspendedOnHydration mechanism.\n    markRootSuspended(workInProgressRoot, workInProgressRootRenderLanes, workInProgressDeferredLane);\n  }\n}\nfunction renderDidError(error) {\n  if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {\n    workInProgressRootExitStatus = RootErrored;\n  }\n\n  if (workInProgressRootConcurrentErrors === null) {\n    workInProgressRootConcurrentErrors = [error];\n  } else {\n    workInProgressRootConcurrentErrors.push(error);\n  }\n} // Called during render to determine if anything has suspended.\n// Returns false if we're not sure.\n\nfunction renderHasNotSuspendedYet() {\n  // If something errored or completed, we can't really be sure,\n  // so those are false.\n  return workInProgressRootExitStatus === RootInProgress;\n} // TODO: Over time, this function and renderRootConcurrent have become more\n// and more similar. Not sure it makes sense to maintain forked paths. Consider\n// unifying them again.\n\nfunction renderRootSync(root, lanes) {\n  const prevExecutionContext = executionContext;\n  executionContext |= RenderContext;\n  const prevDispatcher = pushDispatcher();\n  const prevCacheDispatcher = pushCacheDispatcher(); // If the root or lanes have changed, throw out the existing stack\n  // and prepare a fresh one. Otherwise we'll continue where we left off.\n\n  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\n\n    workInProgressTransitions = getTransitionsForLanes();\n    prepareFreshStack(root, lanes);\n  }\n\n  let didSuspendInShell = false;\n\n  outer: do {\n    try {\n      if (workInProgressSuspendedReason !== NotSuspended && workInProgress !== null) {\n        // The work loop is suspended. During a synchronous render, we don't\n        // yield to the main thread. Immediately unwind the stack. This will\n        // trigger either a fallback or an error boundary.\n        // TODO: For discrete and \"default\" updates (anything that's not\n        // flushSync), we want to wait for the microtasks the flush before\n        // unwinding. Will probably implement this using renderRootConcurrent,\n        // or merge renderRootSync and renderRootConcurrent into the same\n        // function and fork the behavior some other way.\n        const unitOfWork = workInProgress;\n        const thrownValue = workInProgressThrownValue;\n\n        switch (workInProgressSuspendedReason) {\n          case SuspendedOnHydration:\n            {\n              // Selective hydration. An update flowed into a dehydrated tree.\n              // Interrupt the current render so the work loop can switch to the\n              // hydration lane.\n              resetWorkInProgressStack();\n              workInProgressRootExitStatus = RootDidNotComplete;\n              break outer;\n            }\n\n          case SuspendedOnImmediate:\n          case SuspendedOnData:\n            {\n              if (!didSuspendInShell && getSuspenseHandler() === null) {\n                didSuspendInShell = true;\n              } // Intentional fallthrough\n\n            }\n\n          default:\n            {\n              // Unwind then continue with the normal work loop.\n              workInProgressSuspendedReason = NotSuspended;\n              workInProgressThrownValue = null;\n              throwAndUnwindWorkLoop(root, unitOfWork, thrownValue);\n              break;\n            }\n        }\n      }\n\n      workLoopSync();\n      break;\n    } catch (thrownValue) {\n      handleThrow(root, thrownValue);\n    }\n  } while (true); // Check if something suspended in the shell. We use this to detect an\n  // infinite ping loop caused by an uncached promise.\n  //\n  // Only increment this counter once per synchronous render attempt across the\n  // whole tree. Even if there are many sibling components that suspend, this\n  // counter only gets incremented once.\n\n\n  if (didSuspendInShell) {\n    root.shellSuspendCounter++;\n  }\n\n  resetContextDependencies();\n  executionContext = prevExecutionContext;\n  popDispatcher(prevDispatcher);\n  popCacheDispatcher(prevCacheDispatcher);\n\n  if (workInProgress !== null) {\n    // This is a sync render, so we should have finished the whole tree.\n    throw Error(formatProdErrorMessage(261));\n  }\n\n\n  workInProgressRoot = null;\n  workInProgressRootRenderLanes = NoLanes; // It's safe to process the queue now that the render phase is complete.\n\n  finishQueueingConcurrentUpdates();\n  return workInProgressRootExitStatus;\n} // The work loop is an extremely hot path. Tell Closure not to inline it.\n\n/** @noinline */\n\n\nfunction workLoopSync() {\n  // Perform work without checking if we need to yield between fiber.\n  while (workInProgress !== null) {\n    performUnitOfWork(workInProgress);\n  }\n}\n\nfunction renderRootConcurrent(root, lanes) {\n  const prevExecutionContext = executionContext;\n  executionContext |= RenderContext;\n  const prevDispatcher = pushDispatcher();\n  const prevCacheDispatcher = pushCacheDispatcher(); // If the root or lanes have changed, throw out the existing stack\n  // and prepare a fresh one. Otherwise we'll continue where we left off.\n\n  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\n\n    workInProgressTransitions = getTransitionsForLanes();\n    resetRenderTimer();\n    prepareFreshStack(root, lanes);\n  }\n\n  outer: do {\n    try {\n      if (workInProgressSuspendedReason !== NotSuspended && workInProgress !== null) {\n        // The work loop is suspended. We need to either unwind the stack or\n        // replay the suspended component.\n        const unitOfWork = workInProgress;\n        const thrownValue = workInProgressThrownValue;\n\n        resumeOrUnwind: switch (workInProgressSuspendedReason) {\n          case SuspendedOnError:\n            {\n              // Unwind then continue with the normal work loop.\n              workInProgressSuspendedReason = NotSuspended;\n              workInProgressThrownValue = null;\n              throwAndUnwindWorkLoop(root, unitOfWork, thrownValue);\n              break;\n            }\n\n          case SuspendedOnData:\n            {\n              const thenable = thrownValue;\n\n              if (isThenableResolved(thenable)) {\n                // The data resolved. Try rendering the component again.\n                workInProgressSuspendedReason = NotSuspended;\n                workInProgressThrownValue = null;\n                replaySuspendedUnitOfWork(unitOfWork);\n                break;\n              } // The work loop is suspended on data. We should wait for it to\n              // resolve before continuing to render.\n              // TODO: Handle the case where the promise resolves synchronously.\n              // Usually this is handled when we instrument the promise to add a\n              // `status` field, but if the promise already has a status, we won't\n              // have added a listener until right here.\n\n\n              const onResolution = () => {\n                // Check if the root is still suspended on this promise.\n                if (workInProgressSuspendedReason === SuspendedOnData && workInProgressRoot === root) {\n                  // Mark the root as ready to continue rendering.\n                  workInProgressSuspendedReason = SuspendedAndReadyToContinue;\n                } // Ensure the root is scheduled. We should do this even if we're\n                // currently working on a different root, so that we resume\n                // rendering later.\n\n\n                ensureRootIsScheduled(root);\n              };\n\n              thenable.then(onResolution, onResolution);\n              break outer;\n            }\n\n          case SuspendedOnImmediate:\n            {\n              // If this fiber just suspended, it's possible the data is already\n              // cached. Yield to the main thread to give it a chance to ping. If\n              // it does, we can retry immediately without unwinding the stack.\n              workInProgressSuspendedReason = SuspendedAndReadyToContinue;\n              break outer;\n            }\n\n          case SuspendedOnInstance:\n            {\n              workInProgressSuspendedReason = SuspendedOnInstanceAndReadyToContinue;\n              break outer;\n            }\n\n          case SuspendedAndReadyToContinue:\n            {\n              const thenable = thrownValue;\n\n              if (isThenableResolved(thenable)) {\n                // The data resolved. Try rendering the component again.\n                workInProgressSuspendedReason = NotSuspended;\n                workInProgressThrownValue = null;\n                replaySuspendedUnitOfWork(unitOfWork);\n              } else {\n                // Otherwise, unwind then continue with the normal work loop.\n                workInProgressSuspendedReason = NotSuspended;\n                workInProgressThrownValue = null;\n                throwAndUnwindWorkLoop(root, unitOfWork, thrownValue);\n              }\n\n              break;\n            }\n\n          case SuspendedOnInstanceAndReadyToContinue:\n            {\n              switch (workInProgress.tag) {\n                case HostComponent:\n                case HostHoistable:\n                case HostSingleton:\n                  {\n                    // Before unwinding the stack, check one more time if the\n                    // instance is ready. It may have loaded when React yielded to\n                    // the main thread.\n                    // Assigning this to a constant so Flow knows the binding won't\n                    // be mutated by `preloadInstance`.\n                    const hostFiber = workInProgress;\n                    const type = hostFiber.type;\n                    const props = hostFiber.pendingProps;\n                    const isReady = preloadInstance(type, props);\n\n                    if (isReady) {\n                      // The data resolved. Resume the work loop as if nothing\n                      // suspended. Unlike when a user component suspends, we don't\n                      // have to replay anything because the host fiber\n                      // already completed.\n                      workInProgressSuspendedReason = NotSuspended;\n                      workInProgressThrownValue = null;\n                      const sibling = hostFiber.sibling;\n\n                      if (sibling !== null) {\n                        workInProgress = sibling;\n                      } else {\n                        const returnFiber = hostFiber.return;\n\n                        if (returnFiber !== null) {\n                          workInProgress = returnFiber;\n                          completeUnitOfWork(returnFiber);\n                        } else {\n                          workInProgress = null;\n                        }\n                      }\n\n                      break resumeOrUnwind;\n                    }\n\n                    break;\n                  }\n\n                default:\n                  {\n                    // This will fail gracefully but it's not correct, so log a\n                    // warning in dev.\n                    if (false) ;\n\n                    break;\n                  }\n              } // Otherwise, unwind then continue with the normal work loop.\n\n\n              workInProgressSuspendedReason = NotSuspended;\n              workInProgressThrownValue = null;\n              throwAndUnwindWorkLoop(root, unitOfWork, thrownValue);\n              break;\n            }\n\n          case SuspendedOnDeprecatedThrowPromise:\n            {\n              // Suspended by an old implementation that uses the `throw promise`\n              // pattern. The newer replaying behavior can cause subtle issues\n              // like infinite ping loops. So we maintain the old behavior and\n              // always unwind.\n              workInProgressSuspendedReason = NotSuspended;\n              workInProgressThrownValue = null;\n              throwAndUnwindWorkLoop(root, unitOfWork, thrownValue);\n              break;\n            }\n\n          case SuspendedOnHydration:\n            {\n              // Selective hydration. An update flowed into a dehydrated tree.\n              // Interrupt the current render so the work loop can switch to the\n              // hydration lane.\n              resetWorkInProgressStack();\n              workInProgressRootExitStatus = RootDidNotComplete;\n              break outer;\n            }\n\n          default:\n            {\n              throw Error(formatProdErrorMessage(462));\n            }\n        }\n      }\n\n      if (false && ReactCurrentActQueue.current !== null) ; else {\n        workLoopConcurrent();\n      }\n\n      break;\n    } catch (thrownValue) {\n      handleThrow(root, thrownValue);\n    }\n  } while (true);\n\n  resetContextDependencies();\n  popDispatcher(prevDispatcher);\n  popCacheDispatcher(prevCacheDispatcher);\n  executionContext = prevExecutionContext;\n\n\n  if (workInProgress !== null) {\n\n    return RootInProgress;\n  } else {\n\n\n    workInProgressRoot = null;\n    workInProgressRootRenderLanes = NoLanes; // It's safe to process the queue now that the render phase is complete.\n\n    finishQueueingConcurrentUpdates(); // Return the final exit status.\n\n    return workInProgressRootExitStatus;\n  }\n}\n/** @noinline */\n\n\nfunction workLoopConcurrent() {\n  // Perform work until Scheduler asks us to yield\n  while (workInProgress !== null && !shouldYield()) {\n    // $FlowFixMe[incompatible-call] found when upgrading Flow\n    performUnitOfWork(workInProgress);\n  }\n}\n\nfunction performUnitOfWork(unitOfWork) {\n  // The current, flushed, state of this fiber is the alternate. Ideally\n  // nothing should rely on this, but relying on it here means that we don't\n  // need an additional field on the work in progress.\n  const current = unitOfWork.alternate;\n  let next;\n\n  {\n    next = beginWork(current, unitOfWork, entangledRenderLanes);\n  }\n  unitOfWork.memoizedProps = unitOfWork.pendingProps;\n\n  if (next === null) {\n    // If this doesn't spawn new work, complete the current work.\n    completeUnitOfWork(unitOfWork);\n  } else {\n    workInProgress = next;\n  }\n\n  ReactCurrentOwner.current = null;\n}\n\nfunction replaySuspendedUnitOfWork(unitOfWork) {\n  // This is a fork of performUnitOfWork specifcally for replaying a fiber that\n  // just suspended.\n  //\n  const current = unitOfWork.alternate;\n  let next;\n\n  switch (unitOfWork.tag) {\n    case IndeterminateComponent:\n      {\n        // Because it suspended with `use`, we can assume it's a\n        // function component.\n        unitOfWork.tag = FunctionComponent; // Fallthrough to the next branch.\n      }\n\n    case SimpleMemoComponent:\n    case FunctionComponent:\n      {\n        // Resolve `defaultProps`. This logic is copied from `beginWork`.\n        // TODO: Consider moving this switch statement into that module. Also,\n        // could maybe use this as an opportunity to say `use` doesn't work with\n        // `defaultProps` :)\n        const Component = unitOfWork.type;\n        const unresolvedProps = unitOfWork.pendingProps;\n        const resolvedProps = unitOfWork.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);\n        let context;\n\n        {\n          const unmaskedContext = getUnmaskedContext(unitOfWork, Component, true);\n          context = getMaskedContext(unitOfWork, unmaskedContext);\n        }\n\n        next = replayFunctionComponent(current, unitOfWork, resolvedProps, Component, context, workInProgressRootRenderLanes);\n        break;\n      }\n\n    case ForwardRef:\n      {\n        // Resolve `defaultProps`. This logic is copied from `beginWork`.\n        // TODO: Consider moving this switch statement into that module. Also,\n        // could maybe use this as an opportunity to say `use` doesn't work with\n        // `defaultProps` :)\n        const Component = unitOfWork.type.render;\n        const unresolvedProps = unitOfWork.pendingProps;\n        const resolvedProps = unitOfWork.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);\n        next = replayFunctionComponent(current, unitOfWork, resolvedProps, Component, unitOfWork.ref, workInProgressRootRenderLanes);\n        break;\n      }\n\n    case HostComponent:\n      {\n        // Some host components are stateful (that's how we implement form\n        // actions) but we don't bother to reuse the memoized state because it's\n        // not worth the extra code. The main reason to reuse the previous hooks\n        // is to reuse uncached promises, but we happen to know that the only\n        // promises that a host component might suspend on are definitely cached\n        // because they are controlled by us. So don't bother.\n        resetHooksOnUnwind(unitOfWork); // Fallthrough to the next branch.\n      }\n\n    default:\n      {\n        // Other types besides function components are reset completely before\n        // being replayed. Currently this only happens when a Usable type is\n        // reconciled — the reconciler will suspend.\n        //\n        // We reset the fiber back to its original state; however, this isn't\n        // a full \"unwind\" because we're going to reuse the promises that were\n        // reconciled previously. So it's intentional that we don't call\n        // resetSuspendedWorkLoopOnUnwind here.\n        unwindInterruptedWork(current, unitOfWork);\n        unitOfWork = workInProgress = resetWorkInProgress(unitOfWork, entangledRenderLanes);\n        next = beginWork(current, unitOfWork, entangledRenderLanes);\n        break;\n      }\n  }\n  unitOfWork.memoizedProps = unitOfWork.pendingProps;\n\n  if (next === null) {\n    // If this doesn't spawn new work, complete the current work.\n    completeUnitOfWork(unitOfWork);\n  } else {\n    workInProgress = next;\n  }\n\n  ReactCurrentOwner.current = null;\n}\n\nfunction throwAndUnwindWorkLoop(root, unitOfWork, thrownValue) {\n  // This is a fork of performUnitOfWork specifcally for unwinding a fiber\n  // that threw an exception.\n  //\n  // Return to the normal work loop. This will unwind the stack, and potentially\n  // result in showing a fallback.\n  resetSuspendedWorkLoopOnUnwind(unitOfWork);\n  const returnFiber = unitOfWork.return;\n\n  try {\n    // Find and mark the nearest Suspense or error boundary that can handle\n    // this \"exception\".\n    const didFatal = throwException(root, returnFiber, unitOfWork, thrownValue, workInProgressRootRenderLanes);\n\n    if (didFatal) {\n      panicOnRootError(root, thrownValue);\n      return;\n    }\n  } catch (error) {\n    // We had trouble processing the error. An example of this happening is\n    // when accessing the `componentDidCatch` property of an error boundary\n    // throws an error. A weird edge case. There's a regression test for this.\n    // To prevent an infinite loop, bubble the error up to the next parent.\n    if (returnFiber !== null) {\n      workInProgress = returnFiber;\n      throw error;\n    } else {\n      panicOnRootError(root, thrownValue);\n      return;\n    }\n  }\n\n  if (unitOfWork.flags & Incomplete) {\n    // Unwind the stack until we reach the nearest boundary.\n    unwindUnitOfWork(unitOfWork);\n  } else {\n    // Although the fiber suspended, we're intentionally going to commit it in\n    // an inconsistent state. We can do this safely in cases where we know the\n    // inconsistent tree will be hidden.\n    //\n    // This currently only applies to Legacy Suspense implementation, but we may\n    // port a version of this to concurrent roots, too, when performing a\n    // synchronous render. Because that will allow us to mutate the tree as we\n    // go instead of buffering mutations until the end. Though it's unclear if\n    // this particular path is how that would be implemented.\n    completeUnitOfWork(unitOfWork);\n  }\n}\n\nfunction panicOnRootError(root, error) {\n  // There's no ancestor that can handle this exception. This should never\n  // happen because the root is supposed to capture all errors that weren't\n  // caught by an error boundary. This is a fatal error, or panic condition,\n  // because we've run out of ways to recover.\n  workInProgressRootExitStatus = RootFatalErrored;\n  logUncaughtError(root, createCapturedValueAtFiber(error, root.current)); // Set `workInProgress` to null. This represents advancing to the next\n  // sibling, or the parent if there are no siblings. But since the root\n  // has no siblings nor a parent, we set it to null. Usually this is\n  // handled by `completeUnitOfWork` or `unwindWork`, but since we're\n  // intentionally not calling those, we need set it here.\n  // TODO: Consider calling `unwindWork` to pop the contexts.\n\n  workInProgress = null;\n}\n\nfunction completeUnitOfWork(unitOfWork) {\n  // Attempt to complete the current unit of work, then move to the next\n  // sibling. If there are no more siblings, return to the parent fiber.\n  let completedWork = unitOfWork;\n\n  do {\n    // nothing should rely on this, but relying on it here means that we don't\n    // need an additional field on the work in progress.\n\n\n    const current = completedWork.alternate;\n    const returnFiber = completedWork.return;\n    let next;\n\n    {\n      next = completeWork(current, completedWork, entangledRenderLanes);\n    }\n\n    if (next !== null) {\n      // Completing this fiber spawned new work. Work on that next.\n      workInProgress = next;\n      return;\n    }\n\n    const siblingFiber = completedWork.sibling;\n\n    if (siblingFiber !== null) {\n      // If there is more work to do in this returnFiber, do that next.\n      workInProgress = siblingFiber;\n      return;\n    } // Otherwise, return to the parent\n    // $FlowFixMe[incompatible-type] we bail out when we get a null\n\n\n    completedWork = returnFiber; // Update the next thing we're working on in case something throws.\n\n    workInProgress = completedWork;\n  } while (completedWork !== null); // We've reached the root.\n\n\n  if (workInProgressRootExitStatus === RootInProgress) {\n    workInProgressRootExitStatus = RootCompleted;\n  }\n}\n\nfunction unwindUnitOfWork(unitOfWork) {\n  let incompleteWork = unitOfWork;\n\n  do {\n    // The current, flushed, state of this fiber is the alternate. Ideally\n    // nothing should rely on this, but relying on it here means that we don't\n    // need an additional field on the work in progress.\n    const current = incompleteWork.alternate; // This fiber did not complete because something threw. Pop values off\n    // the stack without entering the complete phase. If this is a boundary,\n    // capture values if possible.\n\n    const next = unwindWork(current, incompleteWork); // Because this fiber did not complete, don't reset its lanes.\n\n    if (next !== null) {\n      // Found a boundary that can handle this exception. Re-renter the\n      // begin phase. This branch will return us to the normal work loop.\n      //\n      // Since we're restarting, remove anything that is not a host effect\n      // from the effect tag.\n      next.flags &= HostEffectMask;\n      workInProgress = next;\n      return;\n    } // Keep unwinding until we reach either a boundary or the root.\n    // of the node being unwound, we should be able to reset node itself as we\n    // unwind the stack. Saves an additional null check.\n\n\n    const returnFiber = incompleteWork.return;\n\n    if (returnFiber !== null) {\n      // Mark the parent fiber as incomplete and clear its subtree flags.\n      // TODO: Once we stop prerendering siblings, we may be able to get rid of\n      // the Incomplete flag because unwinding to the nearest boundary will\n      // happen synchronously.\n      returnFiber.flags |= Incomplete;\n      returnFiber.subtreeFlags = NoFlags$1;\n      returnFiber.deletions = null;\n    } // NOTE: If we re-enable sibling prerendering in some cases, here we\n    // would switch to the normal completion path: check if a sibling\n    // exists, and if so, begin work on it.\n    // Otherwise, return to the parent\n    // $FlowFixMe[incompatible-type] we bail out when we get a null\n\n\n    incompleteWork = returnFiber; // Update the next thing we're working on in case something throws.\n\n    workInProgress = incompleteWork;\n  } while (incompleteWork !== null); // We've unwound all the way to the root.\n\n\n  workInProgressRootExitStatus = RootDidNotComplete;\n  workInProgress = null;\n}\n\nfunction commitRoot(root, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, spawnedLane) {\n  // TODO: This no longer makes any sense. We already wrap the mutation and\n  // layout phases. Should be able to remove.\n  const previousUpdateLanePriority = getCurrentUpdatePriority();\n  const prevTransition = ReactCurrentBatchConfig$1.transition;\n\n  try {\n    ReactCurrentBatchConfig$1.transition = null;\n    setCurrentUpdatePriority(DiscreteEventPriority);\n    commitRootImpl(root, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, previousUpdateLanePriority, spawnedLane);\n  } finally {\n    ReactCurrentBatchConfig$1.transition = prevTransition;\n    setCurrentUpdatePriority(previousUpdateLanePriority);\n  }\n\n  return null;\n}\n\nfunction commitRootImpl(root, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, renderPriorityLevel, spawnedLane) {\n  do {\n    // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which\n    // means `flushPassiveEffects` will sometimes result in additional\n    // passive effects. So we need to keep flushing in a loop until there are\n    // no more pending effects.\n    // TODO: Might be better if `flushPassiveEffects` did not automatically\n    // flush synchronous work at the end, to avoid factoring hazards like this.\n    flushPassiveEffects();\n  } while (rootWithPendingPassiveEffects !== null);\n\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    throw Error(formatProdErrorMessage(327));\n  }\n\n  const finishedWork = root.finishedWork;\n  const lanes = root.finishedLanes;\n\n  if (finishedWork === null) {\n\n    return null;\n  }\n\n  root.finishedWork = null;\n  root.finishedLanes = NoLanes;\n\n  if (finishedWork === root.current) {\n    throw Error(formatProdErrorMessage(177));\n  } // commitRoot never returns a continuation; it always finishes synchronously.\n  // So we can clear these now to allow a new callback to be scheduled.\n\n\n  root.callbackNode = null;\n  root.callbackPriority = NoLane;\n  root.cancelPendingCommit = null; // Check which lanes no longer have any work scheduled on them, and mark\n  // those as finished.\n\n  let remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes); // Make sure to account for lanes that were updated by a concurrent event\n  // during the render phase; don't mark them as finished.\n\n  const concurrentlyUpdatedLanes = getConcurrentlyUpdatedLanes();\n  remainingLanes = mergeLanes(remainingLanes, concurrentlyUpdatedLanes);\n  markRootFinished(root, remainingLanes, spawnedLane); // Reset this before firing side effects so we can detect recursive updates.\n\n  didIncludeCommitPhaseUpdate = false;\n\n  if (root === workInProgressRoot) {\n    // We can reset these now that they are finished.\n    workInProgressRoot = null;\n    workInProgress = null;\n    workInProgressRootRenderLanes = NoLanes;\n  } // If there are pending passive effects, schedule a callback to process them.\n  // Do this as early as possible, so it is queued before anything else that\n  // might get scheduled in the commit phase. (See #16714.)\n  // TODO: Delete all other places that schedule the passive effect callback\n  // They're redundant.\n\n\n  if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags$1 || (finishedWork.flags & PassiveMask) !== NoFlags$1) {\n    if (!rootDoesHavePassiveEffects) {\n      rootDoesHavePassiveEffects = true;\n      pendingPassiveEffectsRemainingLanes = remainingLanes; // workInProgressTransitions might be overwritten, so we want\n      // to store it in pendingPassiveTransitions until they get processed\n      // We need to pass this through as an argument to commitRoot\n      // because workInProgressTransitions might have changed between\n      // the previous render and commit if we throttle the commit\n      // with setTimeout\n\n      pendingPassiveTransitions = transitions;\n      scheduleCallback(NormalPriority$1, () => {\n        flushPassiveEffects(); // This render triggered passive effects: release the root cache pool\n        // *after* passive effects fire to avoid freeing a cache pool that may\n        // be referenced by a node in the tree (HostRoot, Cache boundary etc)\n\n        return null;\n      });\n    }\n  } // Check if there are any effects in the whole tree.\n  // TODO: This is left over from the effect list implementation, where we had\n  // to check for the existence of `firstEffect` to satisfy Flow. I think the\n  // only other reason this optimization exists is because it affects profiling.\n  // Reconsider whether this is necessary.\n\n\n  const subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags$1;\n  const rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags$1;\n\n  if (subtreeHasEffects || rootHasEffect) {\n    const prevTransition = ReactCurrentBatchConfig$1.transition;\n    ReactCurrentBatchConfig$1.transition = null;\n    const previousPriority = getCurrentUpdatePriority();\n    setCurrentUpdatePriority(DiscreteEventPriority);\n    const prevExecutionContext = executionContext;\n    executionContext |= CommitContext; // Reset this to null before calling lifecycles\n\n    ReactCurrentOwner.current = null; // The commit phase is broken into several sub-phases. We do a separate pass\n    // of the effect list for each phase: all mutation effects come before all\n    // layout effects, and so on.\n    // The first phase a \"before mutation\" phase. We use this phase to read the\n    // state of the host tree right before we mutate it. This is where\n    // getSnapshotBeforeUpdate is called.\n\n    commitBeforeMutationEffects(root, finishedWork);\n\n\n    commitMutationEffects(root, finishedWork);\n\n    resetAfterCommit(); // The work-in-progress tree is now the current tree. This must come after\n    // the mutation phase, so that the previous tree is still current during\n    // componentWillUnmount, but before the layout phase, so that the finished\n    // work is current during componentDidMount/Update.\n\n    root.current = finishedWork; // The next phase is the layout phase, where we call effects that read\n\n    commitLayoutEffects(finishedWork, root);\n    // opportunity to paint.\n\n\n    requestPaint();\n    executionContext = prevExecutionContext; // Reset the priority to the previous non-sync value.\n\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig$1.transition = prevTransition;\n  } else {\n    // No effects.\n    root.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were\n  }\n\n  if (rootDoesHavePassiveEffects) {\n    // This commit has passive effects. Stash a reference to them. But don't\n    // schedule a callback until after flushing layout work.\n    rootDoesHavePassiveEffects = false;\n    rootWithPendingPassiveEffects = root;\n    pendingPassiveEffectsLanes = lanes;\n  } else {\n    // There were no passive effects, so we can immediately release the cache\n    // pool for this render.\n    releaseRootPooledCache(root, remainingLanes);\n  } // Read this again, since an effect might have updated it\n\n\n  remainingLanes = root.pendingLanes; // Check if there's remaining work on this root\n  // TODO: This is part of the `componentDidCatch` implementation. Its purpose\n  // is to detect whether something might have called setState inside\n  // `componentDidCatch`. The mechanism is known to be flawed because `setState`\n  // inside `componentDidCatch` is itself flawed — that's why we recommend\n  // `getDerivedStateFromError` instead. However, it could be improved by\n  // checking if remainingLanes includes Sync work, instead of whether there's\n  // any work remaining at all (which would also include stuff like Suspense\n  // retries or transitions). It's been like this for a while, though, so fixing\n  // it probably isn't that urgent.\n\n  if (remainingLanes === NoLanes) {\n    // If there's no remaining work, we can clear the set of already failed\n    // error boundaries.\n    legacyErrorBoundariesThatAlreadyFailed = null;\n  }\n\n  onCommitRoot(finishedWork.stateNode, renderPriorityLevel);\n  // additional work on this root is scheduled.\n\n\n  ensureRootIsScheduled(root);\n\n  if (recoverableErrors !== null) {\n    // There were errors during this render, but recovered from them without\n    // needing to surface it to the UI. We log them here.\n    const onRecoverableError = root.onRecoverableError;\n\n    for (let i = 0; i < recoverableErrors.length; i++) {\n      const recoverableError = recoverableErrors[i];\n      const errorInfo = makeErrorInfo(recoverableError.stack);\n      onRecoverableError(recoverableError.value, errorInfo);\n    }\n  } // If the passive effects are the result of a discrete render, flush them\n  // synchronously at the end of the current task so that the result is\n  // immediately observable. Otherwise, we assume that they are not\n  // order-dependent and do not need to be observed by external systems, so we\n  // can wait until after paint.\n  // TODO: We can optimize this by not scheduling the callback earlier. Since we\n  // currently schedule the callback in multiple places, will wait until those\n  // are consolidated.\n\n\n  if (includesSyncLane(pendingPassiveEffectsLanes) && root.tag !== LegacyRoot) {\n    flushPassiveEffects();\n  } // Read this again, since a passive effect might have updated it\n\n\n  remainingLanes = root.pendingLanes; // Check if this render scheduled a cascading synchronous update. This is a\n  // heurstic to detect infinite update loops. We are intentionally excluding\n  // hydration lanes in this check, because render triggered by selective\n  // hydration is conceptually not an update.\n\n  if ( // Check if there was a recursive update spawned by this render, in either\n  // the render phase or the commit phase. We track these explicitly because\n  // we can't infer from the remaining lanes alone.\n  (didIncludeRenderPhaseUpdate || didIncludeCommitPhaseUpdate) || // Was the finished render the result of an update (not hydration)?\n  includesSomeLane(lanes, UpdateLanes) && // Did it schedule a sync update?\n  includesSomeLane(remainingLanes, SyncUpdateLanes)) {\n    // finishing. If there are too many, it indicates an infinite update loop.\n\n\n    if (root === rootWithNestedUpdates) {\n      nestedUpdateCount++;\n    } else {\n      nestedUpdateCount = 0;\n      rootWithNestedUpdates = root;\n    }\n  } else {\n    nestedUpdateCount = 0;\n  } // If layout work was scheduled, flush it now.\n\n\n  flushSyncWorkOnAllRoots();\n\n  return null;\n}\n\nfunction makeErrorInfo(componentStack) {\n  {\n    return {\n      componentStack\n    };\n  }\n}\n\nfunction releaseRootPooledCache(root, remainingLanes) {\n  {\n    const pooledCacheLanes = root.pooledCacheLanes &= remainingLanes;\n\n    if (pooledCacheLanes === NoLanes) {\n      // None of the remaining work relies on the cache pool. Clear it so\n      // subsequent requests get a new cache\n      const pooledCache = root.pooledCache;\n\n      if (pooledCache != null) {\n        root.pooledCache = null;\n        releaseCache(pooledCache);\n      }\n    }\n  }\n}\n\nfunction flushPassiveEffects() {\n  // Returns whether passive effects were flushed.\n  // TODO: Combine this check with the one in flushPassiveEFfectsImpl. We should\n  // probably just combine the two functions. I believe they were only separate\n  // in the first place because we used to wrap it with\n  // `Scheduler.runWithPriority`, which accepts a function. But now we track the\n  // priority within React itself, so we can mutate the variable directly.\n  if (rootWithPendingPassiveEffects !== null) {\n    // Cache the root since rootWithPendingPassiveEffects is cleared in\n    // flushPassiveEffectsImpl\n    const root = rootWithPendingPassiveEffects; // Cache and clear the remaining lanes flag; it must be reset since this\n    // method can be called from various places, not always from commitRoot\n    // where the remaining lanes are known\n\n    const remainingLanes = pendingPassiveEffectsRemainingLanes;\n    pendingPassiveEffectsRemainingLanes = NoLanes;\n    const renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);\n    const priority = lowerEventPriority(DefaultEventPriority, renderPriority);\n    const prevTransition = ReactCurrentBatchConfig$1.transition;\n    const previousPriority = getCurrentUpdatePriority();\n\n    try {\n      ReactCurrentBatchConfig$1.transition = null;\n      setCurrentUpdatePriority(priority);\n      return flushPassiveEffectsImpl();\n    } finally {\n      setCurrentUpdatePriority(previousPriority);\n      ReactCurrentBatchConfig$1.transition = prevTransition; // Once passive effects have run for the tree - giving components a\n      // chance to retain cache instances they use - release the pooled\n      // cache at the root (if there is one)\n\n      releaseRootPooledCache(root, remainingLanes);\n    }\n  }\n\n  return false;\n}\n\nfunction flushPassiveEffectsImpl() {\n  if (rootWithPendingPassiveEffects === null) {\n    return false;\n  } // Cache and clear the transitions flag\n\n\n  const transitions = pendingPassiveTransitions;\n  pendingPassiveTransitions = null;\n  const root = rootWithPendingPassiveEffects;\n  const lanes = pendingPassiveEffectsLanes;\n  rootWithPendingPassiveEffects = null; // TODO: This is sometimes out of sync with rootWithPendingPassiveEffects.\n  // Figure out why and fix it. It's not causing any known issues (probably\n  // because it's only used for profiling), but it's a refactor hazard.\n\n  pendingPassiveEffectsLanes = NoLanes;\n\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    throw Error(formatProdErrorMessage(331));\n  }\n\n  const prevExecutionContext = executionContext;\n  executionContext |= CommitContext;\n  commitPassiveUnmountEffects(root.current);\n  commitPassiveMountEffects(root, root.current, lanes, transitions); // TODO: Move to commitPassiveMountEffects\n\n  executionContext = prevExecutionContext;\n  flushSyncWorkOnAllRoots();\n\n\n  onPostCommitRoot(root);\n\n  return true;\n}\n\nfunction isAlreadyFailedLegacyErrorBoundary(instance) {\n  return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);\n}\nfunction markLegacyErrorBoundaryAsFailed(instance) {\n  if (legacyErrorBoundariesThatAlreadyFailed === null) {\n    legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);\n  } else {\n    legacyErrorBoundariesThatAlreadyFailed.add(instance);\n  }\n}\n\nfunction captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {\n  const errorInfo = createCapturedValueAtFiber(error, sourceFiber);\n  const update = createRootErrorUpdate(rootFiber.stateNode, errorInfo, SyncLane);\n  const root = enqueueUpdate(rootFiber, update, SyncLane);\n\n  if (root !== null) {\n    markRootUpdated(root, SyncLane);\n    ensureRootIsScheduled(root);\n  }\n}\n\nfunction captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error) {\n\n  if (sourceFiber.tag === HostRoot) {\n    // Error was thrown at the root. There is no parent, so the root\n    // itself should capture it.\n    captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);\n    return;\n  }\n\n  let fiber = nearestMountedAncestor;\n\n  while (fiber !== null) {\n    if (fiber.tag === HostRoot) {\n      captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error);\n      return;\n    } else if (fiber.tag === ClassComponent) {\n      const ctor = fiber.type;\n      const instance = fiber.stateNode;\n\n      if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {\n        const errorInfo = createCapturedValueAtFiber(error, sourceFiber);\n        const update = createClassErrorUpdate(SyncLane);\n        const root = enqueueUpdate(fiber, update, SyncLane);\n\n        if (root !== null) {\n          initializeClassErrorUpdate(update, root, fiber, errorInfo);\n          markRootUpdated(root, SyncLane);\n          ensureRootIsScheduled(root);\n        }\n\n        return;\n      }\n    }\n\n    fiber = fiber.return;\n  }\n}\nfunction attachPingListener(root, wakeable, lanes) {\n  // Attach a ping listener\n  //\n  // The data might resolve before we have a chance to commit the fallback. Or,\n  // in the case of a refresh, we'll never commit a fallback. So we need to\n  // attach a listener now. When it resolves (\"pings\"), we can decide whether to\n  // try rendering the tree again.\n  //\n  // Only attach a listener if one does not already exist for the lanes\n  // we're currently rendering (which acts like a \"thread ID\" here).\n  //\n  // We only need to do this in concurrent mode. Legacy Suspense always\n  // commits fallbacks synchronously, so there are no pings.\n  let pingCache = root.pingCache;\n  let threadIDs;\n\n  if (pingCache === null) {\n    pingCache = root.pingCache = new PossiblyWeakMap();\n    threadIDs = new Set();\n    pingCache.set(wakeable, threadIDs);\n  } else {\n    threadIDs = pingCache.get(wakeable);\n\n    if (threadIDs === undefined) {\n      threadIDs = new Set();\n      pingCache.set(wakeable, threadIDs);\n    }\n  }\n\n  if (!threadIDs.has(lanes)) {\n    workInProgressRootDidAttachPingListener = true; // Memoize using the thread ID to prevent redundant listeners.\n\n    threadIDs.add(lanes);\n    const ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);\n\n    wakeable.then(ping, ping);\n  }\n}\n\nfunction pingSuspendedRoot(root, wakeable, pingedLanes) {\n  const pingCache = root.pingCache;\n\n  if (pingCache !== null) {\n    // The wakeable resolved, so we no longer need to memoize, because it will\n    // never be thrown again.\n    pingCache.delete(wakeable);\n  }\n\n  markRootPinged(root, pingedLanes);\n\n  if (workInProgressRoot === root && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {\n    // Received a ping at the same priority level at which we're currently\n    // rendering. We might want to restart this render. This should mirror\n    // the logic of whether or not a root suspends once it completes.\n    // TODO: If we're rendering sync either due to Sync, Batched or expired,\n    // we should probably never restart.\n    // If we're suspended with delay, or if it's a retry, we'll always suspend\n    // so we can always restart.\n    if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {\n      // Force a restart from the root by unwinding the stack. Unless this is\n      // being called from the render phase, because that would cause a crash.\n      if ((executionContext & RenderContext) === NoContext) {\n        prepareFreshStack(root, NoLanes);\n      }\n    } else {\n      // Even though we can't restart right now, we might get an\n      // opportunity later. So we mark this render as having a ping.\n      workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);\n    }\n  }\n\n  ensureRootIsScheduled(root);\n}\n\nfunction retryTimedOutBoundary(boundaryFiber, retryLane) {\n  // The boundary fiber (a Suspense component or SuspenseList component)\n  // previously was rendered in its fallback state. One of the promises that\n  // suspended it has resolved, which means at least part of the tree was\n  // likely unblocked. Try rendering again, at a new lanes.\n  if (retryLane === NoLane) {\n    // TODO: Assign this to `suspenseState.retryLane`? to avoid\n    // unnecessary entanglement?\n    retryLane = requestRetryLane(boundaryFiber);\n  } // TODO: Special case idle priority?\n\n\n  const root = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);\n\n  if (root !== null) {\n    markRootUpdated(root, retryLane);\n    ensureRootIsScheduled(root);\n  }\n}\n\nfunction retryDehydratedSuspenseBoundary(boundaryFiber) {\n  const suspenseState = boundaryFiber.memoizedState;\n  let retryLane = NoLane;\n\n  if (suspenseState !== null) {\n    retryLane = suspenseState.retryLane;\n  }\n\n  retryTimedOutBoundary(boundaryFiber, retryLane);\n}\nfunction resolveRetryWakeable(boundaryFiber, wakeable) {\n  let retryLane = NoLane; // Default\n\n  let retryCache;\n\n  switch (boundaryFiber.tag) {\n    case SuspenseComponent:\n      retryCache = boundaryFiber.stateNode;\n      const suspenseState = boundaryFiber.memoizedState;\n\n      if (suspenseState !== null) {\n        retryLane = suspenseState.retryLane;\n      }\n\n      break;\n\n    case SuspenseListComponent:\n      retryCache = boundaryFiber.stateNode;\n      break;\n\n    case OffscreenComponent:\n      {\n        const instance = boundaryFiber.stateNode;\n        retryCache = instance._retryCache;\n        break;\n      }\n\n    default:\n      throw Error(formatProdErrorMessage(314));\n  }\n\n  if (retryCache !== null) {\n    // The wakeable resolved, so we no longer need to memoize, because it will\n    // never be thrown again.\n    retryCache.delete(wakeable);\n  }\n\n  retryTimedOutBoundary(boundaryFiber, retryLane);\n}\nfunction throwIfInfiniteUpdateLoopDetected() {\n  if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {\n    nestedUpdateCount = 0;\n    rootWithNestedUpdates = null;\n\n    {\n      if (executionContext & RenderContext && workInProgressRoot !== null) {\n        // We're in the render phase. Disable the concurrent error recovery\n        // mechanism to ensure that the error we're about to throw gets handled.\n        // We need it to trigger the nearest error boundary so that the infinite\n        // update loop is broken.\n        workInProgressRoot.errorRecoveryDisabledLanes = mergeLanes(workInProgressRoot.errorRecoveryDisabledLanes, workInProgressRootRenderLanes);\n      }\n    }\n\n    throw Error(formatProdErrorMessage(185));\n  }\n}\n\nfunction scheduleCallback(priorityLevel, callback) {\n  {\n    // In production, always call Scheduler. This function will be stripped out.\n    return scheduleCallback$3(priorityLevel, callback);\n  }\n}\n\nfunction FiberNode(tag, pendingProps, key, mode) {\n  // Instance\n  this.tag = tag;\n  this.key = key;\n  this.elementType = null;\n  this.type = null;\n  this.stateNode = null; // Fiber\n\n  this.return = null;\n  this.child = null;\n  this.sibling = null;\n  this.index = 0;\n  this.ref = null;\n  this.refCleanup = null;\n  this.pendingProps = pendingProps;\n  this.memoizedProps = null;\n  this.updateQueue = null;\n  this.memoizedState = null;\n  this.dependencies = null;\n  this.mode = mode; // Effects\n\n  this.flags = NoFlags$1;\n  this.subtreeFlags = NoFlags$1;\n  this.deletions = null;\n  this.lanes = NoLanes;\n  this.childLanes = NoLanes;\n  this.alternate = null;\n} // This is a constructor function, rather than a POJO constructor, still\n// please ensure we do the following:\n// 1) Nobody should add any instance methods on this. Instance methods can be\n//    more difficult to predict when they get optimized and they are almost\n//    never inlined properly in static compilers.\n// 2) Nobody should rely on `instanceof Fiber` for type testing. We should\n//    always know when it is a fiber.\n// 3) We might want to experiment with using numeric keys since they are easier\n//    to optimize in a non-JIT environment.\n// 4) We can easily go from a constructor to a createFiber object literal if that\n//    is faster.\n// 5) It should be easy to port this to a C struct and keep a C implementation\n//    compatible.\n\n\nfunction createFiber(tag, pendingProps, key, mode) {\n  // $FlowFixMe[invalid-constructor]: the shapes are exact here but Flow doesn't like constructors\n  return new FiberNode(tag, pendingProps, key, mode);\n}\n\nfunction shouldConstruct(Component) {\n  const prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nfunction isSimpleFunctionComponent(type) {\n  return typeof type === 'function' && !shouldConstruct(type) && type.defaultProps === undefined;\n}\nfunction resolveLazyComponentTag(Component) {\n  if (typeof Component === 'function') {\n    return shouldConstruct(Component) ? ClassComponent : FunctionComponent;\n  } else if (Component !== undefined && Component !== null) {\n    const $$typeof = Component.$$typeof;\n\n    if ($$typeof === REACT_FORWARD_REF_TYPE) {\n      return ForwardRef;\n    }\n\n    if ($$typeof === REACT_MEMO_TYPE) {\n      return MemoComponent;\n    }\n  }\n\n  return IndeterminateComponent;\n} // This is used to create an alternate fiber to do work on.\n\nfunction createWorkInProgress(current, pendingProps) {\n  let workInProgress = current.alternate;\n\n  if (workInProgress === null) {\n    // We use a double buffering pooling technique because we know that we'll\n    // only ever need at most two versions of a tree. We pool the \"other\" unused\n    // node that we're free to reuse. This is lazily created to avoid allocating\n    // extra objects for things that are never updated. It also allow us to\n    // reclaim the extra memory if needed.\n    workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);\n    workInProgress.elementType = current.elementType;\n    workInProgress.type = current.type;\n    workInProgress.stateNode = current.stateNode;\n\n    workInProgress.alternate = current;\n    current.alternate = workInProgress;\n  } else {\n    workInProgress.pendingProps = pendingProps; // Needed because Blocks store data on type.\n\n    workInProgress.type = current.type; // We already have an alternate.\n    // Reset the effect tag.\n\n    workInProgress.flags = NoFlags$1; // The effects are no longer valid.\n\n    workInProgress.subtreeFlags = NoFlags$1;\n    workInProgress.deletions = null;\n  } // Reset all effects except static ones.\n  // Static effects are not specific to a render.\n\n\n  workInProgress.flags = current.flags & StaticMask;\n  workInProgress.childLanes = current.childLanes;\n  workInProgress.lanes = current.lanes;\n  workInProgress.child = current.child;\n  workInProgress.memoizedProps = current.memoizedProps;\n  workInProgress.memoizedState = current.memoizedState;\n  workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so\n  // it cannot be shared with the current fiber.\n\n  const currentDependencies = current.dependencies;\n  workInProgress.dependencies = currentDependencies === null ? null : {\n    lanes: currentDependencies.lanes,\n    firstContext: currentDependencies.firstContext\n  }; // These will be overridden during the parent's reconciliation\n\n  workInProgress.sibling = current.sibling;\n  workInProgress.index = current.index;\n  workInProgress.ref = current.ref;\n  workInProgress.refCleanup = current.refCleanup;\n\n  return workInProgress;\n} // Used to reuse a Fiber for a second pass.\n\nfunction resetWorkInProgress(workInProgress, renderLanes) {\n  // This resets the Fiber to what createFiber or createWorkInProgress would\n  // have set the values to before during the first pass. Ideally this wouldn't\n  // be necessary but unfortunately many code paths reads from the workInProgress\n  // when they should be reading from current and writing to workInProgress.\n  // We assume pendingProps, index, key, ref, return are still untouched to\n  // avoid doing another reconciliation.\n  // Reset the effect flags but keep any Placement tags, since that's something\n  // that child fiber is setting, not the reconciliation.\n  workInProgress.flags &= StaticMask | Placement; // The effects are no longer valid.\n\n  const current = workInProgress.alternate;\n\n  if (current === null) {\n    // Reset to createFiber's initial values.\n    workInProgress.childLanes = NoLanes;\n    workInProgress.lanes = renderLanes;\n    workInProgress.child = null;\n    workInProgress.subtreeFlags = NoFlags$1;\n    workInProgress.memoizedProps = null;\n    workInProgress.memoizedState = null;\n    workInProgress.updateQueue = null;\n    workInProgress.dependencies = null;\n    workInProgress.stateNode = null;\n  } else {\n    // Reset to the cloned values that createWorkInProgress would've.\n    workInProgress.childLanes = current.childLanes;\n    workInProgress.lanes = current.lanes;\n    workInProgress.child = current.child;\n    workInProgress.subtreeFlags = NoFlags$1;\n    workInProgress.deletions = null;\n    workInProgress.memoizedProps = current.memoizedProps;\n    workInProgress.memoizedState = current.memoizedState;\n    workInProgress.updateQueue = current.updateQueue; // Needed because Blocks store data on type.\n\n    workInProgress.type = current.type; // Clone the dependencies object. This is mutated during the render phase, so\n    // it cannot be shared with the current fiber.\n\n    const currentDependencies = current.dependencies;\n    workInProgress.dependencies = currentDependencies === null ? null : {\n      lanes: currentDependencies.lanes,\n      firstContext: currentDependencies.firstContext\n    };\n  }\n\n  return workInProgress;\n}\nfunction createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {\n  let mode;\n\n  if (tag === ConcurrentRoot) {\n    mode = ConcurrentMode;\n\n    if (isStrictMode === true) {\n      mode |= StrictLegacyMode | StrictEffectsMode;\n    }\n  } else {\n    mode = NoMode;\n  }\n\n  return createFiber(HostRoot, null, null, mode);\n}\nfunction createFiberFromTypeAndProps(type, // React$ElementType\nkey, pendingProps, owner, mode, lanes) {\n  let fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.\n\n  let resolvedType = type;\n\n  if (typeof type === 'function') {\n    if (shouldConstruct(type)) {\n      fiberTag = ClassComponent;\n    }\n  } else if (typeof type === 'string') {\n    {\n      const hostContext = getHostContext();\n      fiberTag = isHostHoistableType(type, pendingProps, hostContext) ? HostHoistable : isHostSingletonType(type) ? HostSingleton : HostComponent;\n    }\n  } else {\n    getTag: switch (type) {\n      case REACT_FRAGMENT_TYPE:\n        return createFiberFromFragment(pendingProps.children, mode, lanes, key);\n\n      case REACT_STRICT_MODE_TYPE:\n        fiberTag = Mode;\n        mode |= StrictLegacyMode;\n\n        if ((mode & ConcurrentMode) !== NoMode) {\n          // Strict effects should never run on legacy roots\n          mode |= StrictEffectsMode;\n        }\n\n        break;\n\n      case REACT_PROFILER_TYPE:\n        return createFiberFromProfiler(pendingProps, mode, lanes, key);\n\n      case REACT_SUSPENSE_TYPE:\n        return createFiberFromSuspense(pendingProps, mode, lanes, key);\n\n      case REACT_SUSPENSE_LIST_TYPE:\n        return createFiberFromSuspenseList(pendingProps, mode, lanes, key);\n\n      case REACT_OFFSCREEN_TYPE:\n        return createFiberFromOffscreen(pendingProps, mode, lanes, key);\n\n      case REACT_LEGACY_HIDDEN_TYPE:\n\n      // Fall through\n\n      case REACT_SCOPE_TYPE:\n\n      // Fall through\n\n      case REACT_CACHE_TYPE:\n        {\n          return createFiberFromCache(pendingProps, mode, lanes, key);\n        }\n\n      // Fall through\n\n      case REACT_TRACING_MARKER_TYPE:\n\n      // Fall through\n\n      case REACT_DEBUG_TRACING_MODE_TYPE:\n\n      // Fall through\n\n      default:\n        {\n          if (typeof type === 'object' && type !== null) {\n            switch (type.$$typeof) {\n              case REACT_PROVIDER_TYPE:\n                {\n                  fiberTag = ContextProvider;\n                  break getTag;\n                }\n\n              // Fall through\n\n              case REACT_CONTEXT_TYPE:\n                {\n                  fiberTag = ContextConsumer;\n                  break getTag;\n                }\n\n              case REACT_CONSUMER_TYPE:\n\n              // Fall through\n\n              case REACT_FORWARD_REF_TYPE:\n                fiberTag = ForwardRef;\n\n                break getTag;\n\n              case REACT_MEMO_TYPE:\n                fiberTag = MemoComponent;\n                break getTag;\n\n              case REACT_LAZY_TYPE:\n                fiberTag = LazyComponent;\n                resolvedType = null;\n                break getTag;\n            }\n          }\n\n          let info = '';\n\n          throw Error(formatProdErrorMessage(130, type == null ? type : typeof type, info));\n        }\n    }\n  }\n\n  const fiber = createFiber(fiberTag, pendingProps, key, mode);\n  fiber.elementType = type;\n  fiber.type = resolvedType;\n  fiber.lanes = lanes;\n\n  return fiber;\n}\nfunction createFiberFromElement(element, mode, lanes) {\n  let owner = null;\n\n  const type = element.type;\n  const key = element.key;\n  const pendingProps = element.props;\n  const fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);\n\n  return fiber;\n}\nfunction createFiberFromFragment(elements, mode, lanes, key) {\n  const fiber = createFiber(Fragment, elements, key, mode);\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nfunction createFiberFromProfiler(pendingProps, mode, lanes, key) {\n\n  const fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);\n  fiber.elementType = REACT_PROFILER_TYPE;\n  fiber.lanes = lanes;\n\n  return fiber;\n}\n\nfunction createFiberFromSuspense(pendingProps, mode, lanes, key) {\n  const fiber = createFiber(SuspenseComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_SUSPENSE_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\nfunction createFiberFromSuspenseList(pendingProps, mode, lanes, key) {\n  const fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_SUSPENSE_LIST_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\nfunction createFiberFromOffscreen(pendingProps, mode, lanes, key) {\n  const fiber = createFiber(OffscreenComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_OFFSCREEN_TYPE;\n  fiber.lanes = lanes;\n  const primaryChildInstance = {\n    _visibility: OffscreenVisible,\n    _pendingVisibility: OffscreenVisible,\n    _pendingMarkers: null,\n    _retryCache: null,\n    _transitions: null,\n    _current: null,\n    detach: () => detachOffscreenInstance(primaryChildInstance),\n    attach: () => attachOffscreenInstance(primaryChildInstance)\n  };\n  fiber.stateNode = primaryChildInstance;\n  return fiber;\n}\nfunction createFiberFromCache(pendingProps, mode, lanes, key) {\n  const fiber = createFiber(CacheComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_CACHE_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\nfunction createFiberFromText(content, mode, lanes) {\n  const fiber = createFiber(HostText, content, null, mode);\n  fiber.lanes = lanes;\n  return fiber;\n}\nfunction createFiberFromDehydratedFragment(dehydratedNode) {\n  const fiber = createFiber(DehydratedFragment, null, null, NoMode);\n  fiber.stateNode = dehydratedNode;\n  return fiber;\n}\nfunction createFiberFromPortal(portal, mode, lanes) {\n  const pendingProps = portal.children !== null ? portal.children : [];\n  const fiber = createFiber(HostPortal, pendingProps, portal.key, mode);\n  fiber.lanes = lanes;\n  fiber.stateNode = {\n    containerInfo: portal.containerInfo,\n    pendingChildren: null,\n    // Used by persistent updates\n    implementation: portal.implementation\n  };\n  return fiber;\n}\n\nfunction FiberRootNode(containerInfo, // $FlowFixMe[missing-local-annot]\ntag, hydrate, identifierPrefix, onUncaughtError, onCaughtError, onRecoverableError, formState) {\n  this.tag = tag;\n  this.containerInfo = containerInfo;\n  this.pendingChildren = null;\n  this.current = null;\n  this.pingCache = null;\n  this.finishedWork = null;\n  this.timeoutHandle = noTimeout;\n  this.cancelPendingCommit = null;\n  this.context = null;\n  this.pendingContext = null;\n  this.next = null;\n  this.callbackNode = null;\n  this.callbackPriority = NoLane;\n  this.expirationTimes = createLaneMap(NoTimestamp);\n  this.pendingLanes = NoLanes;\n  this.suspendedLanes = NoLanes;\n  this.pingedLanes = NoLanes;\n  this.expiredLanes = NoLanes;\n  this.finishedLanes = NoLanes;\n  this.errorRecoveryDisabledLanes = NoLanes;\n  this.shellSuspendCounter = 0;\n  this.entangledLanes = NoLanes;\n  this.entanglements = createLaneMap(NoLanes);\n  this.hiddenUpdates = createLaneMap(null);\n  this.identifierPrefix = identifierPrefix;\n  this.onUncaughtError = onUncaughtError;\n  this.onCaughtError = onCaughtError;\n  this.onRecoverableError = onRecoverableError;\n\n  {\n    this.pooledCache = null;\n    this.pooledCacheLanes = NoLanes;\n  }\n\n  this.formState = formState;\n  this.incompleteTransitions = new Map();\n}\n\nfunction createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, // TODO: We have several of these arguments that are conceptually part of the\n// host config, but because they are passed in at runtime, we have to thread\n// them through the root constructor. Perhaps we should put them all into a\n// single type, like a DynamicHostConfig that is defined by the renderer.\nidentifierPrefix, onUncaughtError, onCaughtError, onRecoverableError, transitionCallbacks, formState) {\n  // $FlowFixMe[invalid-constructor] Flow no longer supports calling new on functions\n  const root = new FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onUncaughtError, onCaughtError, onRecoverableError, formState);\n  // stateNode is any.\n\n\n  const uninitializedFiber = createHostRootFiber(tag, isStrictMode);\n  root.current = uninitializedFiber;\n  uninitializedFiber.stateNode = root;\n\n  {\n    const initialCache = createCache();\n    retainCache(initialCache); // The pooledCache is a fresh cache instance that is used temporarily\n    // for newly mounted boundaries during a render. In general, the\n    // pooledCache is always cleared from the root at the end of a render:\n    // it is either released when render commits, or moved to an Offscreen\n    // component if rendering suspends. Because the lifetime of the pooled\n    // cache is distinct from the main memoizedState.cache, it must be\n    // retained separately.\n\n    root.pooledCache = initialCache;\n    retainCache(initialCache);\n    const initialState = {\n      element: initialChildren,\n      isDehydrated: hydrate,\n      cache: initialCache\n    };\n    uninitializedFiber.memoizedState = initialState;\n  }\n\n  initializeUpdateQueue(uninitializedFiber);\n  return root;\n}\n\nvar ReactVersion = '19.0.0-canary-a73c3450e-20240329';\n\nfunction createPortal$1(children, containerInfo, // TODO: figure out the API for cross-renderer implementation.\nimplementation) {\n  let key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n  return {\n    // This tag allow us to uniquely identify this as a React Portal\n    $$typeof: REACT_PORTAL_TYPE,\n    key: key == null ? null : '' + key,\n    children,\n    containerInfo,\n    implementation\n  };\n}\n\nfunction getContextForSubtree(parentComponent) {\n  if (!parentComponent) {\n    return emptyContextObject;\n  }\n\n  const fiber = get(parentComponent);\n  const parentContext = findCurrentUnmaskedContext(fiber);\n\n  if (fiber.tag === ClassComponent) {\n    const Component = fiber.type;\n\n    if (isContextProvider(Component)) {\n      return processChildContext(fiber, Component, parentContext);\n    }\n  }\n\n  return parentContext;\n}\n\nfunction findHostInstance(component) {\n  const fiber = get(component);\n\n  if (fiber === undefined) {\n    if (typeof component.render === 'function') {\n      throw Error(formatProdErrorMessage(188));\n    } else {\n      const keys = Object.keys(component).join(',');\n      throw Error(formatProdErrorMessage(268, keys));\n    }\n  }\n\n  const hostFiber = findCurrentHostFiber(fiber);\n\n  if (hostFiber === null) {\n    return null;\n  }\n\n  return getPublicInstance(hostFiber.stateNode);\n}\n\nfunction createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onUncaughtError, onCaughtError, onRecoverableError, transitionCallbacks) {\n  const hydrate = false;\n  const initialChildren = null;\n  return createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onUncaughtError, onCaughtError, onRecoverableError, transitionCallbacks, null);\n}\nfunction createHydrationContainer(initialChildren, // TODO: Remove `callback` when we delete legacy mode.\ncallback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onUncaughtError, onCaughtError, onRecoverableError, transitionCallbacks, formState) {\n  const hydrate = true;\n  const root = createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onUncaughtError, onCaughtError, onRecoverableError, transitionCallbacks, formState); // TODO: Move this to FiberRoot constructor\n\n  root.context = getContextForSubtree(null); // Schedule the initial render. In a hydration root, this is different from\n  // a regular update because the initial render must match was was rendered\n  // on the server.\n  // NOTE: This update intentionally doesn't have a payload. We're only using\n  // the update to schedule work on the root fiber (and, for legacy roots, to\n  // enqueue the callback if one is provided).\n\n  const current = root.current;\n  const lane = requestUpdateLane(current);\n  const update = createUpdate(lane);\n  update.callback = callback !== undefined && callback !== null ? callback : null;\n  enqueueUpdate(current, update, lane);\n  scheduleInitialHydrationOnRoot(root, lane);\n  return root;\n}\nfunction updateContainer(element, container, parentComponent, callback) {\n\n  const current = container.current;\n  const lane = requestUpdateLane(current);\n\n  const context = getContextForSubtree(parentComponent);\n\n  if (container.context === null) {\n    container.context = context;\n  } else {\n    container.pendingContext = context;\n  }\n\n  const update = createUpdate(lane); // Caution: React DevTools currently depends on this property\n  // being called \"element\".\n\n  update.payload = {\n    element\n  };\n  callback = callback === undefined ? null : callback;\n\n  if (callback !== null) {\n\n    update.callback = callback;\n  }\n\n  const root = enqueueUpdate(current, update, lane);\n\n  if (root !== null) {\n    scheduleUpdateOnFiber(root, current, lane);\n    entangleTransitions(root, current, lane);\n  }\n\n  return lane;\n}\nfunction getPublicRootInstance(container) {\n  const containerFiber = container.current;\n\n  if (!containerFiber.child) {\n    return null;\n  }\n\n  switch (containerFiber.child.tag) {\n    case HostSingleton:\n    case HostComponent:\n      return getPublicInstance(containerFiber.child.stateNode);\n\n    default:\n      return containerFiber.child.stateNode;\n  }\n}\nfunction attemptSynchronousHydration(fiber) {\n  switch (fiber.tag) {\n    case HostRoot:\n      {\n        const root = fiber.stateNode;\n\n        if (isRootDehydrated(root)) {\n          // Flush the first scheduled \"update\".\n          const lanes = getHighestPriorityPendingLanes(root);\n          flushRoot(root, lanes);\n        }\n\n        break;\n      }\n\n    case SuspenseComponent:\n      {\n        flushSync$1(() => {\n          const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n          if (root !== null) {\n            scheduleUpdateOnFiber(root, fiber, SyncLane);\n          }\n        }); // If we're still blocked after this, we need to increase\n        // the priority of any promises resolving within this\n        // boundary so that they next attempt also has higher pri.\n\n        const retryLane = SyncLane;\n        markRetryLaneIfNotHydrated(fiber, retryLane);\n        break;\n      }\n  }\n}\n\nfunction markRetryLaneImpl(fiber, retryLane) {\n  const suspenseState = fiber.memoizedState;\n\n  if (suspenseState !== null && suspenseState.dehydrated !== null) {\n    suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);\n  }\n} // Increases the priority of thenables when they resolve within this boundary.\n\n\nfunction markRetryLaneIfNotHydrated(fiber, retryLane) {\n  markRetryLaneImpl(fiber, retryLane);\n  const alternate = fiber.alternate;\n\n  if (alternate) {\n    markRetryLaneImpl(alternate, retryLane);\n  }\n}\n\nfunction attemptContinuousHydration(fiber) {\n  if (fiber.tag !== SuspenseComponent) {\n    // We ignore HostRoots here because we can't increase\n    // their priority and they should not suspend on I/O,\n    // since you have to wrap anything that might suspend in\n    // Suspense.\n    return;\n  }\n\n  const lane = SelectiveHydrationLane;\n  const root = enqueueConcurrentRenderForLane(fiber, lane);\n\n  if (root !== null) {\n    scheduleUpdateOnFiber(root, fiber, lane);\n  }\n\n  markRetryLaneIfNotHydrated(fiber, lane);\n}\nfunction attemptHydrationAtCurrentPriority(fiber) {\n  if (fiber.tag !== SuspenseComponent) {\n    // We ignore HostRoots here because we can't increase\n    // their priority other than synchronously flush it.\n    return;\n  }\n\n  const lane = requestUpdateLane(fiber);\n  const root = enqueueConcurrentRenderForLane(fiber, lane);\n\n  if (root !== null) {\n    scheduleUpdateOnFiber(root, fiber, lane);\n  }\n\n  markRetryLaneIfNotHydrated(fiber, lane);\n}\nlet overrideHookState = null;\nlet overrideHookStateDeletePath = null;\nlet overrideHookStateRenamePath = null;\nlet overrideProps = null;\nlet overridePropsDeletePath = null;\nlet overridePropsRenamePath = null;\nlet scheduleUpdate = null;\nlet setErrorHandler = null;\nlet setSuspenseHandler = null;\n\nfunction findHostInstanceByFiber(fiber) {\n  const hostFiber = findCurrentHostFiber(fiber);\n\n  if (hostFiber === null) {\n    return null;\n  }\n\n  return hostFiber.stateNode;\n}\n\nfunction emptyFindFiberByHostInstance(instance) {\n  return null;\n}\n\nfunction injectIntoDevTools(devToolsConfig) {\n  const findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;\n  const ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\n  return injectInternals({\n    bundleType: devToolsConfig.bundleType,\n    version: devToolsConfig.version,\n    rendererPackageName: devToolsConfig.rendererPackageName,\n    rendererConfig: devToolsConfig.rendererConfig,\n    overrideHookState,\n    overrideHookStateDeletePath,\n    overrideHookStateRenamePath,\n    overrideProps,\n    overridePropsDeletePath,\n    overridePropsRenamePath,\n    setErrorHandler,\n    setSuspenseHandler,\n    scheduleUpdate,\n    currentDispatcherRef: ReactCurrentDispatcher,\n    findHostInstanceByFiber,\n    findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,\n    // React Refresh\n    findHostInstancesForRefresh: null,\n    scheduleRefresh: null,\n    scheduleRoot: null,\n    setRefreshHandler: null,\n    // Enables DevTools to append owner stacks to error messages in DEV mode.\n    getCurrentFiber: null,\n    // Enables DevTools to detect reconciler version rather than renderer version\n    // which may not match for third party renderers.\n    reconcilerVersion: ReactVersion\n  });\n}\n\n// the renderer. Such as when we're dispatching events or if third party\n// libraries need to call batchedUpdates. Eventually, this API will go away when\n// everything is batched by default. We'll then have a similar API to opt-out of\n// scheduled work and instead do synchronous work.\n\nlet isInsideEventHandler = false;\n\nfunction finishEventHandler() {\n  // Here we wait until all updates have propagated, which is important\n  // when using controlled components within layers:\n  // https://github.com/facebook/react/issues/1698\n  // Then we restore state of any controlled component.\n  const controlledComponentsHavePendingUpdates = needsStateRestore();\n\n  if (controlledComponentsHavePendingUpdates) {\n    // If a controlled event was fired, we may need to restore the state of\n    // the DOM node back to the controlled value. This is necessary when React\n    // bails out of the update without touching the DOM.\n    // TODO: Restore state in the microtask, after the discrete updates flush,\n    // instead of early flushing them here.\n    flushSync$1();\n    restoreStateIfNeeded();\n  }\n}\n\nfunction batchedUpdates(fn, a, b) {\n  if (isInsideEventHandler) {\n    // If we are currently inside another batch, we need to wait until it\n    // fully completes before restoring state.\n    return fn(a, b);\n  }\n\n  isInsideEventHandler = true;\n\n  try {\n    return batchedUpdates$1(fn, a, b);\n  } finally {\n    isInsideEventHandler = false;\n    finishEventHandler();\n  }\n} // TODO: Replace with flushSync\n\nfunction isInteractive(tag) {\n  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';\n}\n\nfunction shouldPreventMouseEvent(name, type, props) {\n  switch (name) {\n    case 'onClick':\n    case 'onClickCapture':\n    case 'onDoubleClick':\n    case 'onDoubleClickCapture':\n    case 'onMouseDown':\n    case 'onMouseDownCapture':\n    case 'onMouseMove':\n    case 'onMouseMoveCapture':\n    case 'onMouseUp':\n    case 'onMouseUpCapture':\n    case 'onMouseEnter':\n      return !!(props.disabled && isInteractive(type));\n\n    default:\n      return false;\n  }\n}\n/**\n * @param {object} inst The instance, which is the source of events.\n * @param {string} registrationName Name of listener (e.g. `onClick`).\n * @return {?function} The stored callback.\n */\n\n\nfunction getListener(inst, registrationName) {\n  const stateNode = inst.stateNode;\n\n  if (stateNode === null) {\n    // Work in progress (ex: onload events in incremental mode).\n    return null;\n  }\n\n  const props = getFiberCurrentPropsFromNode(stateNode);\n\n  if (props === null) {\n    // Work in progress.\n    return null;\n  }\n\n  const listener = props[registrationName];\n\n  if (shouldPreventMouseEvent(registrationName, inst.type, props)) {\n    return null;\n  }\n\n  if (listener && typeof listener !== 'function') {\n    throw Error(formatProdErrorMessage(231, registrationName, typeof listener));\n  }\n\n  return listener;\n}\n\nlet passiveBrowserEventsSupported = false; // Check if browser support events with passive listeners\n// https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support\n\nif (canUseDOM) {\n  try {\n    const options = {};\n    Object.defineProperty(options, 'passive', {\n      get: function () {\n        passiveBrowserEventsSupported = true;\n      }\n    });\n    window.addEventListener('test', options, options);\n    window.removeEventListener('test', options, options);\n  } catch (e) {\n    passiveBrowserEventsSupported = false;\n  }\n}\n\n/**\n * `charCode` represents the actual \"character code\" and is safe to use with\n * `String.fromCharCode`. As such, only keys that correspond to printable\n * characters produce a valid `charCode`, the only exception to this is Enter.\n * The Tab-key is considered non-printable and does not have a `charCode`,\n * presumably because it does not produce a tab-character in browsers.\n *\n * @param {object} nativeEvent Native browser event.\n * @return {number} Normalized `charCode` property.\n */\nfunction getEventCharCode(nativeEvent) {\n  let charCode;\n  const keyCode = nativeEvent.keyCode;\n\n  if ('charCode' in nativeEvent) {\n    charCode = nativeEvent.charCode; // FF does not set `charCode` for the Enter-key, check against `keyCode`.\n\n    if (charCode === 0 && keyCode === 13) {\n      charCode = 13;\n    }\n  } else {\n    // IE8 does not implement `charCode`, but `keyCode` has the correct value.\n    charCode = keyCode;\n  } // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)\n  // report Enter as charCode 10 when ctrl is pressed.\n\n\n  if (charCode === 10) {\n    charCode = 13;\n  } // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.\n  // Must not discard the (non-)printable Enter-key.\n\n\n  if (charCode >= 32 || charCode === 13) {\n    return charCode;\n  }\n\n  return 0;\n}\n\nfunction functionThatReturnsTrue() {\n  return true;\n}\n\nfunction functionThatReturnsFalse() {\n  return false;\n} // This is intentionally a factory so that we have different returned constructors.\n// If we had a single constructor, it would be megamorphic and engines would deopt.\n\n\nfunction createSyntheticEvent(Interface) {\n  /**\n   * Synthetic events are dispatched by event plugins, typically in response to a\n   * top-level event delegation handler.\n   *\n   * These systems should generally use pooling to reduce the frequency of garbage\n   * collection. The system should check `isPersistent` to determine whether the\n   * event should be released into the pool after being dispatched. Users that\n   * need a persisted event should invoke `persist`.\n   *\n   * Synthetic events (and subclasses) implement the DOM Level 3 Events API by\n   * normalizing browser quirks. Subclasses do not necessarily have to implement a\n   * DOM interface; custom application-specific events can also subclass this.\n   */\n  // $FlowFixMe[missing-this-annot]\n  function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {\n    this._reactName = reactName;\n    this._targetInst = targetInst;\n    this.type = reactEventType;\n    this.nativeEvent = nativeEvent;\n    this.target = nativeEventTarget;\n    this.currentTarget = null;\n\n    for (const propName in Interface) {\n      if (!Interface.hasOwnProperty(propName)) {\n        continue;\n      }\n\n      const normalize = Interface[propName];\n\n      if (normalize) {\n        this[propName] = normalize(nativeEvent);\n      } else {\n        this[propName] = nativeEvent[propName];\n      }\n    }\n\n    const defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;\n\n    if (defaultPrevented) {\n      this.isDefaultPrevented = functionThatReturnsTrue;\n    } else {\n      this.isDefaultPrevented = functionThatReturnsFalse;\n    }\n\n    this.isPropagationStopped = functionThatReturnsFalse;\n    return this;\n  } // $FlowFixMe[prop-missing] found when upgrading Flow\n\n\n  assign(SyntheticBaseEvent.prototype, {\n    // $FlowFixMe[missing-this-annot]\n    preventDefault: function () {\n      this.defaultPrevented = true;\n      const event = this.nativeEvent;\n\n      if (!event) {\n        return;\n      }\n\n      if (event.preventDefault) {\n        event.preventDefault(); // $FlowFixMe[illegal-typeof] - flow is not aware of `unknown` in IE\n      } else if (typeof event.returnValue !== 'unknown') {\n        event.returnValue = false;\n      }\n\n      this.isDefaultPrevented = functionThatReturnsTrue;\n    },\n    // $FlowFixMe[missing-this-annot]\n    stopPropagation: function () {\n      const event = this.nativeEvent;\n\n      if (!event) {\n        return;\n      }\n\n      if (event.stopPropagation) {\n        event.stopPropagation(); // $FlowFixMe[illegal-typeof] - flow is not aware of `unknown` in IE\n      } else if (typeof event.cancelBubble !== 'unknown') {\n        // The ChangeEventPlugin registers a \"propertychange\" event for\n        // IE. This event does not support bubbling or cancelling, and\n        // any references to cancelBubble throw \"Member not found\".  A\n        // typeof check of \"unknown\" circumvents this issue (and is also\n        // IE specific).\n        event.cancelBubble = true;\n      }\n\n      this.isPropagationStopped = functionThatReturnsTrue;\n    },\n\n    /**\n     * We release all dispatched `SyntheticEvent`s after each event loop, adding\n     * them back into the pool. This allows a way to hold onto a reference that\n     * won't be added back into the pool.\n     */\n    persist: function () {// Modern event system doesn't use pooling.\n    },\n\n    /**\n     * Checks if this event should be released back into the pool.\n     *\n     * @return {boolean} True if this should not be released, false otherwise.\n     */\n    isPersistent: functionThatReturnsTrue\n  });\n  return SyntheticBaseEvent;\n}\n/**\n * @interface Event\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\n\n\nconst EventInterface = {\n  eventPhase: 0,\n  bubbles: 0,\n  cancelable: 0,\n  timeStamp: function (event) {\n    return event.timeStamp || Date.now();\n  },\n  defaultPrevented: 0,\n  isTrusted: 0\n};\nconst SyntheticEvent = createSyntheticEvent(EventInterface);\n\nconst UIEventInterface = assign({}, EventInterface, {\n  view: 0,\n  detail: 0\n});\n\nconst SyntheticUIEvent = createSyntheticEvent(UIEventInterface);\nlet lastMovementX;\nlet lastMovementY;\nlet lastMouseEvent;\n\nfunction updateMouseMovementPolyfillState(event) {\n  if (event !== lastMouseEvent) {\n    if (lastMouseEvent && event.type === 'mousemove') {\n      // $FlowFixMe[unsafe-arithmetic] assuming this is a number\n      lastMovementX = event.screenX - lastMouseEvent.screenX; // $FlowFixMe[unsafe-arithmetic] assuming this is a number\n\n      lastMovementY = event.screenY - lastMouseEvent.screenY;\n    } else {\n      lastMovementX = 0;\n      lastMovementY = 0;\n    }\n\n    lastMouseEvent = event;\n  }\n}\n/**\n * @interface MouseEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\n\n\nconst MouseEventInterface = assign({}, UIEventInterface, {\n  screenX: 0,\n  screenY: 0,\n  clientX: 0,\n  clientY: 0,\n  pageX: 0,\n  pageY: 0,\n  ctrlKey: 0,\n  shiftKey: 0,\n  altKey: 0,\n  metaKey: 0,\n  getModifierState: getEventModifierState,\n  button: 0,\n  buttons: 0,\n  relatedTarget: function (event) {\n    if (event.relatedTarget === undefined) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;\n    return event.relatedTarget;\n  },\n  movementX: function (event) {\n    if ('movementX' in event) {\n      return event.movementX;\n    }\n\n    updateMouseMovementPolyfillState(event);\n    return lastMovementX;\n  },\n  movementY: function (event) {\n    if ('movementY' in event) {\n      return event.movementY;\n    } // Don't need to call updateMouseMovementPolyfillState() here\n    // because it's guaranteed to have already run when movementX\n    // was copied.\n\n\n    return lastMovementY;\n  }\n});\n\nconst SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);\n/**\n * @interface DragEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\n\nconst DragEventInterface = assign({}, MouseEventInterface, {\n  dataTransfer: 0\n});\n\nconst SyntheticDragEvent = createSyntheticEvent(DragEventInterface);\n/**\n * @interface FocusEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\n\nconst FocusEventInterface = assign({}, UIEventInterface, {\n  relatedTarget: 0\n});\n\nconst SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);\n/**\n * @interface Event\n * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface\n * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent\n */\n\nconst AnimationEventInterface = assign({}, EventInterface, {\n  animationName: 0,\n  elapsedTime: 0,\n  pseudoElement: 0\n});\n\nconst SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);\n/**\n * @interface Event\n * @see http://www.w3.org/TR/clipboard-apis/\n */\n\nconst ClipboardEventInterface = assign({}, EventInterface, {\n  clipboardData: function (event) {\n    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;\n  }\n});\n\nconst SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);\n/**\n * @interface Event\n * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents\n */\n\nconst CompositionEventInterface = assign({}, EventInterface, {\n  data: 0\n});\n\nconst SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);\n/**\n * @interface Event\n * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105\n *      /#events-inputevents\n */\n// Happens to share the same list for now.\n\nconst SyntheticInputEvent = SyntheticCompositionEvent;\n/**\n * Normalization of deprecated HTML5 `key` values\n * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names\n */\n\nconst normalizeKey = {\n  Esc: 'Escape',\n  Spacebar: ' ',\n  Left: 'ArrowLeft',\n  Up: 'ArrowUp',\n  Right: 'ArrowRight',\n  Down: 'ArrowDown',\n  Del: 'Delete',\n  Win: 'OS',\n  Menu: 'ContextMenu',\n  Apps: 'ContextMenu',\n  Scroll: 'ScrollLock',\n  MozPrintableKey: 'Unidentified'\n};\n/**\n * Translation from legacy `keyCode` to HTML5 `key`\n * Only special keys supported, all others depend on keyboard layout or browser\n * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names\n */\n\nconst translateToKey = {\n  '8': 'Backspace',\n  '9': 'Tab',\n  '12': 'Clear',\n  '13': 'Enter',\n  '16': 'Shift',\n  '17': 'Control',\n  '18': 'Alt',\n  '19': 'Pause',\n  '20': 'CapsLock',\n  '27': 'Escape',\n  '32': ' ',\n  '33': 'PageUp',\n  '34': 'PageDown',\n  '35': 'End',\n  '36': 'Home',\n  '37': 'ArrowLeft',\n  '38': 'ArrowUp',\n  '39': 'ArrowRight',\n  '40': 'ArrowDown',\n  '45': 'Insert',\n  '46': 'Delete',\n  '112': 'F1',\n  '113': 'F2',\n  '114': 'F3',\n  '115': 'F4',\n  '116': 'F5',\n  '117': 'F6',\n  '118': 'F7',\n  '119': 'F8',\n  '120': 'F9',\n  '121': 'F10',\n  '122': 'F11',\n  '123': 'F12',\n  '144': 'NumLock',\n  '145': 'ScrollLock',\n  '224': 'Meta'\n};\n/**\n * @param {object} nativeEvent Native browser event.\n * @return {string} Normalized `key` property.\n */\n\nfunction getEventKey(nativeEvent) {\n  if (nativeEvent.key) {\n    // Normalize inconsistent values reported by browsers due to\n    // implementations of a working draft specification.\n    // FireFox implements `key` but returns `MozPrintableKey` for all\n    // printable characters (normalized to `Unidentified`), ignore it.\n    const key = // $FlowFixMe[invalid-computed-prop] unable to index with a `mixed` value\n    normalizeKey[nativeEvent.key] || nativeEvent.key;\n\n    if (key !== 'Unidentified') {\n      return key;\n    }\n  } // Browser does not implement `key`, polyfill as much of it as we can.\n\n\n  if (nativeEvent.type === 'keypress') {\n    const charCode = getEventCharCode( // $FlowFixMe[incompatible-call] unable to narrow to `KeyboardEvent`\n    nativeEvent); // The enter-key is technically both printable and non-printable and can\n    // thus be captured by `keypress`, no other non-printable key should.\n\n    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);\n  }\n\n  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {\n    // While user keyboard layout determines the actual meaning of each\n    // `keyCode` value, almost all function keys have a universal value.\n    // $FlowFixMe[invalid-computed-prop] unable to index with a `mixed` value\n    return translateToKey[nativeEvent.keyCode] || 'Unidentified';\n  }\n\n  return '';\n}\n/**\n * Translation from modifier key to the associated property in the event.\n * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers\n */\n\n\nconst modifierKeyToProp = {\n  Alt: 'altKey',\n  Control: 'ctrlKey',\n  Meta: 'metaKey',\n  Shift: 'shiftKey'\n}; // Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support\n// getModifierState. If getModifierState is not supported, we map it to a set of\n// modifier keys exposed by the event. In this case, Lock-keys are not supported.\n// $FlowFixMe[missing-local-annot]\n// $FlowFixMe[missing-this-annot]\n\nfunction modifierStateGetter(keyArg) {\n  const syntheticEvent = this;\n  const nativeEvent = syntheticEvent.nativeEvent;\n\n  if (nativeEvent.getModifierState) {\n    return nativeEvent.getModifierState(keyArg);\n  }\n\n  const keyProp = modifierKeyToProp[keyArg];\n  return keyProp ? !!nativeEvent[keyProp] : false;\n}\n\nfunction getEventModifierState(nativeEvent) {\n  return modifierStateGetter;\n}\n/**\n * @interface KeyboardEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\n\n\nconst KeyboardEventInterface = assign({}, UIEventInterface, {\n  key: getEventKey,\n  code: 0,\n  location: 0,\n  ctrlKey: 0,\n  shiftKey: 0,\n  altKey: 0,\n  metaKey: 0,\n  repeat: 0,\n  locale: 0,\n  getModifierState: getEventModifierState,\n  // Legacy Interface\n  charCode: function (event) {\n    // `charCode` is the result of a KeyPress event and represents the value of\n    // the actual printable character.\n    // KeyPress is deprecated, but its replacement is not yet final and not\n    // implemented in any major browser. Only KeyPress has charCode.\n    if (event.type === 'keypress') {\n      return getEventCharCode( // $FlowFixMe[incompatible-call] unable to narrow to `KeyboardEvent`\n      event);\n    }\n\n    return 0;\n  },\n  keyCode: function (event) {\n    // `keyCode` is the result of a KeyDown/Up event and represents the value of\n    // physical keyboard key.\n    // The actual meaning of the value depends on the users' keyboard layout\n    // which cannot be detected. Assuming that it is a US keyboard layout\n    // provides a surprisingly accurate mapping for US and European users.\n    // Due to this, it is left to the user to implement at this time.\n    if (event.type === 'keydown' || event.type === 'keyup') {\n      return event.keyCode;\n    }\n\n    return 0;\n  },\n  which: function (event) {\n    // `which` is an alias for either `keyCode` or `charCode` depending on the\n    // type of the event.\n    if (event.type === 'keypress') {\n      return getEventCharCode( // $FlowFixMe[incompatible-call] unable to narrow to `KeyboardEvent`\n      event);\n    }\n\n    if (event.type === 'keydown' || event.type === 'keyup') {\n      return event.keyCode;\n    }\n\n    return 0;\n  }\n});\n\nconst SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);\n/**\n * @interface PointerEvent\n * @see http://www.w3.org/TR/pointerevents/\n */\n\nconst PointerEventInterface = assign({}, MouseEventInterface, {\n  pointerId: 0,\n  width: 0,\n  height: 0,\n  pressure: 0,\n  tangentialPressure: 0,\n  tiltX: 0,\n  tiltY: 0,\n  twist: 0,\n  pointerType: 0,\n  isPrimary: 0\n});\n\nconst SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);\n/**\n * @interface TouchEvent\n * @see http://www.w3.org/TR/touch-events/\n */\n\nconst TouchEventInterface = assign({}, UIEventInterface, {\n  touches: 0,\n  targetTouches: 0,\n  changedTouches: 0,\n  altKey: 0,\n  metaKey: 0,\n  ctrlKey: 0,\n  shiftKey: 0,\n  getModifierState: getEventModifierState\n});\n\nconst SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);\n/**\n * @interface Event\n * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-\n * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent\n */\n\nconst TransitionEventInterface = assign({}, EventInterface, {\n  propertyName: 0,\n  elapsedTime: 0,\n  pseudoElement: 0\n});\n\nconst SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);\n/**\n * @interface WheelEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\n\nconst WheelEventInterface = assign({}, MouseEventInterface, {\n  deltaX(event) {\n    return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).\n    'wheelDeltaX' in event ? // $FlowFixMe[unsafe-arithmetic] assuming this is a number\n    -event.wheelDeltaX : 0;\n  },\n\n  deltaY(event) {\n    return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).\n    'wheelDeltaY' in event ? // $FlowFixMe[unsafe-arithmetic] assuming this is a number\n    -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).\n    'wheelDelta' in event ? // $FlowFixMe[unsafe-arithmetic] assuming this is a number\n    -event.wheelDelta : 0;\n  },\n\n  deltaZ: 0,\n  // Browsers without \"deltaMode\" is reporting in raw wheel delta where one\n  // notch on the scroll is always +/- 120, roughly equivalent to pixels.\n  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or\n  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.\n  deltaMode: 0\n});\n\nconst SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);\n\n/**\n * This plugin invokes action functions on forms, inputs and buttons if\n * the form doesn't prevent default.\n */\n\nfunction extractEvents$6(dispatchQueue, domEventName, maybeTargetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {\n  if (domEventName !== 'submit') {\n    return;\n  }\n\n  if (!maybeTargetInst || maybeTargetInst.stateNode !== nativeEventTarget) {\n    // If we're inside a parent root that itself is a parent of this root, then\n    // its deepest target won't be the actual form that's being submitted.\n    return;\n  }\n\n  const formInst = maybeTargetInst;\n  const form = nativeEventTarget;\n  let action = getFiberCurrentPropsFromNode(form).action;\n  let submitter = nativeEvent.submitter;\n  let submitterAction;\n\n  if (submitter) {\n    const submitterProps = getFiberCurrentPropsFromNode(submitter);\n    submitterAction = submitterProps ? submitterProps.formAction : submitter.getAttribute('formAction');\n\n    if (submitterAction != null) {\n      // The submitter overrides the form action.\n      action = submitterAction; // If the action is a function, we don't want to pass its name\n      // value to the FormData since it's controlled by the server.\n\n      submitter = null;\n    }\n  }\n\n  if (typeof action !== 'function') {\n    return;\n  }\n\n  const event = new SyntheticEvent('action', 'action', null, nativeEvent, nativeEventTarget);\n\n  function submitForm() {\n    if (nativeEvent.defaultPrevented) {\n      // We let earlier events to prevent the action from submitting.\n      return;\n    } // Prevent native navigation.\n\n\n    event.preventDefault();\n    let formData;\n\n    if (submitter) {\n      // The submitter's value should be included in the FormData.\n      // It should be in the document order in the form.\n      // Since the FormData constructor invokes the formdata event it also\n      // needs to be available before that happens so after construction it's too\n      // late. We use a temporary fake node for the duration of this event.\n      // TODO: FormData takes a second argument that it's the submitter but this\n      // is fairly new so not all browsers support it yet. Switch to that technique\n      // when available.\n      const temp = submitter.ownerDocument.createElement('input');\n      temp.name = submitter.name;\n      temp.value = submitter.value;\n      submitter.parentNode.insertBefore(temp, submitter);\n      formData = new FormData(form);\n      temp.parentNode.removeChild(temp);\n    } else {\n      formData = new FormData(form);\n    }\n\n    const pendingState = {\n      pending: true,\n      data: formData,\n      method: form.method,\n      action: action\n    };\n\n    startHostTransition(formInst, pendingState, action, formData);\n  }\n\n  dispatchQueue.push({\n    event,\n    listeners: [{\n      instance: null,\n      listener: submitForm,\n      currentTarget: form\n    }]\n  });\n}\nfunction dispatchReplayedFormAction(formInst, form, action, formData) {\n  const pendingState = {\n    pending: true,\n    data: formData,\n    method: form.method,\n    action: action\n  };\n\n  startHostTransition(formInst, pendingState, action, formData);\n}\n\n// has this definition built-in.\n\nlet hasScheduledReplayAttempt = false; // The last of each continuous event type. We only need to replay the last one\n// if the last target was dehydrated.\n\nlet queuedFocus = null;\nlet queuedDrag = null;\nlet queuedMouse = null; // For pointer events there can be one latest event per pointerId.\n\nconst queuedPointers = new Map();\nconst queuedPointerCaptures = new Map(); // We could consider replaying selectionchange and touchmoves too.\n\nconst queuedExplicitHydrationTargets = [];\nconst discreteReplayableEvents = ['mousedown', 'mouseup', 'touchcancel', 'touchend', 'touchstart', 'auxclick', 'dblclick', 'pointercancel', 'pointerdown', 'pointerup', 'dragend', 'dragstart', 'drop', 'compositionend', 'compositionstart', 'keydown', 'keypress', 'keyup', 'input', 'textInput', // Intentionally camelCase\n'copy', 'cut', 'paste', 'click', 'change', 'contextmenu', 'reset' // 'submit', // stopPropagation blocks the replay mechanism\n];\nfunction isDiscreteEventThatRequiresHydration(eventType) {\n  return discreteReplayableEvents.indexOf(eventType) > -1;\n}\n\nfunction createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {\n  return {\n    blockedOn,\n    domEventName,\n    eventSystemFlags,\n    nativeEvent,\n    targetContainers: [targetContainer]\n  };\n} // Resets the replaying for this type of continuous event to no event.\n\n\nfunction clearIfContinuousEvent(domEventName, nativeEvent) {\n  switch (domEventName) {\n    case 'focusin':\n    case 'focusout':\n      queuedFocus = null;\n      break;\n\n    case 'dragenter':\n    case 'dragleave':\n      queuedDrag = null;\n      break;\n\n    case 'mouseover':\n    case 'mouseout':\n      queuedMouse = null;\n      break;\n\n    case 'pointerover':\n    case 'pointerout':\n      {\n        const pointerId = nativeEvent.pointerId;\n        queuedPointers.delete(pointerId);\n        break;\n      }\n\n    case 'gotpointercapture':\n    case 'lostpointercapture':\n      {\n        const pointerId = nativeEvent.pointerId;\n        queuedPointerCaptures.delete(pointerId);\n        break;\n      }\n  }\n}\n\nfunction accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {\n  if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {\n    const queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);\n\n    if (blockedOn !== null) {\n      const fiber = getInstanceFromNode(blockedOn);\n\n      if (fiber !== null) {\n        // Attempt to increase the priority of this target.\n        attemptContinuousHydration(fiber);\n      }\n    }\n\n    return queuedEvent;\n  } // If we have already queued this exact event, then it's because\n  // the different event systems have different DOM event listeners.\n  // We can accumulate the flags, and the targetContainers, and\n  // store a single event to be replayed.\n\n\n  existingQueuedEvent.eventSystemFlags |= eventSystemFlags;\n  const targetContainers = existingQueuedEvent.targetContainers;\n\n  if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {\n    targetContainers.push(targetContainer);\n  }\n\n  return existingQueuedEvent;\n}\n\nfunction queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {\n  // These set relatedTarget to null because the replayed event will be treated as if we\n  // moved from outside the window (no target) onto the target once it hydrates.\n  // Instead of mutating we could clone the event.\n  switch (domEventName) {\n    case 'focusin':\n      {\n        const focusEvent = nativeEvent;\n        queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);\n        return true;\n      }\n\n    case 'dragenter':\n      {\n        const dragEvent = nativeEvent;\n        queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);\n        return true;\n      }\n\n    case 'mouseover':\n      {\n        const mouseEvent = nativeEvent;\n        queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);\n        return true;\n      }\n\n    case 'pointerover':\n      {\n        const pointerEvent = nativeEvent;\n        const pointerId = pointerEvent.pointerId;\n        queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));\n        return true;\n      }\n\n    case 'gotpointercapture':\n      {\n        const pointerEvent = nativeEvent;\n        const pointerId = pointerEvent.pointerId;\n        queuedPointerCaptures.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));\n        return true;\n      }\n  }\n\n  return false;\n} // Check if this target is unblocked. Returns true if it's unblocked.\n\nfunction attemptExplicitHydrationTarget(queuedTarget) {\n  // TODO: This function shares a lot of logic with findInstanceBlockingEvent.\n  // Try to unify them. It's a bit tricky since it would require two return\n  // values.\n  const targetInst = getClosestInstanceFromNode(queuedTarget.target);\n\n  if (targetInst !== null) {\n    const nearestMounted = getNearestMountedFiber(targetInst);\n\n    if (nearestMounted !== null) {\n      const tag = nearestMounted.tag;\n\n      if (tag === SuspenseComponent) {\n        const instance = getSuspenseInstanceFromFiber(nearestMounted);\n\n        if (instance !== null) {\n          // We're blocked on hydrating this boundary.\n          // Increase its priority.\n          queuedTarget.blockedOn = instance;\n          runWithPriority(queuedTarget.priority, () => {\n            attemptHydrationAtCurrentPriority(nearestMounted);\n          });\n          return;\n        }\n      } else if (tag === HostRoot) {\n        const root = nearestMounted.stateNode;\n\n        if (isRootDehydrated(root)) {\n          queuedTarget.blockedOn = getContainerFromFiber(nearestMounted); // We don't currently have a way to increase the priority of\n          // a root other than sync.\n\n          return;\n        }\n      }\n    }\n  }\n\n  queuedTarget.blockedOn = null;\n}\n\nfunction queueExplicitHydrationTarget(target) {\n  // TODO: This will read the priority if it's dispatched by the React\n  // event system but not native events. Should read window.event.type, like\n  // we do for updates (getCurrentEventPriority).\n  const updatePriority = getCurrentUpdatePriority();\n  const queuedTarget = {\n    blockedOn: null,\n    target: target,\n    priority: updatePriority\n  };\n  let i = 0;\n\n  for (; i < queuedExplicitHydrationTargets.length; i++) {\n    // Stop once we hit the first target with lower priority than\n    if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority)) {\n      break;\n    }\n  }\n\n  queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);\n\n  if (i === 0) {\n    attemptExplicitHydrationTarget(queuedTarget);\n  }\n}\n\nfunction attemptReplayContinuousQueuedEvent(queuedEvent) {\n  if (queuedEvent.blockedOn !== null) {\n    return false;\n  }\n\n  const targetContainers = queuedEvent.targetContainers;\n\n  while (targetContainers.length > 0) {\n    const nextBlockedOn = findInstanceBlockingEvent(queuedEvent.nativeEvent);\n\n    if (nextBlockedOn === null) {\n      const nativeEvent = queuedEvent.nativeEvent;\n      const nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);\n      setReplayingEvent(nativeEventClone);\n      nativeEvent.target.dispatchEvent(nativeEventClone);\n      resetReplayingEvent();\n    } else {\n      // We're still blocked. Try again later.\n      const fiber = getInstanceFromNode(nextBlockedOn);\n\n      if (fiber !== null) {\n        attemptContinuousHydration(fiber);\n      }\n\n      queuedEvent.blockedOn = nextBlockedOn;\n      return false;\n    } // This target container was successfully dispatched. Try the next.\n\n\n    targetContainers.shift();\n  }\n\n  return true;\n}\n\nfunction attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {\n  if (attemptReplayContinuousQueuedEvent(queuedEvent)) {\n    map.delete(key);\n  }\n}\n\nfunction replayUnblockedEvents() {\n  hasScheduledReplayAttempt = false; // Replay any continuous events.\n\n  if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {\n    queuedFocus = null;\n  }\n\n  if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {\n    queuedDrag = null;\n  }\n\n  if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {\n    queuedMouse = null;\n  }\n\n  queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);\n  queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);\n}\n\nfunction scheduleCallbackIfUnblocked(queuedEvent, unblocked) {\n  if (queuedEvent.blockedOn === unblocked) {\n    queuedEvent.blockedOn = null;\n\n    if (!hasScheduledReplayAttempt) {\n      hasScheduledReplayAttempt = true; // Schedule a callback to attempt replaying as many events as are\n      // now unblocked. This first might not actually be unblocked yet.\n      // We could check it early to avoid scheduling an unnecessary callback.\n\n      Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);\n    }\n  }\n} // [form, submitter or action, formData...]\n\n\nlet lastScheduledReplayQueue = null;\n\nfunction replayUnblockedFormActions(formReplayingQueue) {\n  if (lastScheduledReplayQueue === formReplayingQueue) {\n    lastScheduledReplayQueue = null;\n  }\n\n  for (let i = 0; i < formReplayingQueue.length; i += 3) {\n    const form = formReplayingQueue[i];\n    const submitterOrAction = formReplayingQueue[i + 1];\n    const formData = formReplayingQueue[i + 2];\n\n    if (typeof submitterOrAction !== 'function') {\n      // This action is not hydrated yet. This might be because it's blocked on\n      // a different React instance or higher up our tree.\n      const blockedOn = findInstanceBlockingTarget(submitterOrAction || form);\n\n      if (blockedOn === null) {\n        // We're not blocked but we don't have an action. This must mean that\n        // this is in another React instance. We'll just skip past it.\n        continue;\n      } else {\n        // We're blocked on something in this React instance. We'll retry later.\n        break;\n      }\n    }\n\n    const formInst = getInstanceFromNode(form);\n\n    if (formInst !== null) {\n      // This is part of our instance.\n      // We're ready to replay this. Let's delete it from the queue.\n      formReplayingQueue.splice(i, 3);\n      i -= 3;\n      dispatchReplayedFormAction(formInst, form, submitterOrAction, formData); // Continue without incrementing the index.\n\n      continue;\n    } // This form must've been part of a different React instance.\n    // If we want to preserve ordering between React instances on the same root\n    // we'd need some way for the other instance to ping us when it's done.\n    // We'll just skip this and let the other instance execute it.\n\n  }\n}\n\nfunction scheduleReplayQueueIfNeeded(formReplayingQueue) {\n  // Schedule a callback to execute any unblocked form actions in.\n  // We only keep track of the last queue which means that if multiple React oscillate\n  // commits, we could schedule more callbacks than necessary but it's not a big deal\n  // and we only really except one instance.\n  if (lastScheduledReplayQueue !== formReplayingQueue) {\n    lastScheduledReplayQueue = formReplayingQueue;\n    Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, () => replayUnblockedFormActions(formReplayingQueue));\n  }\n}\n\nfunction retryIfBlockedOn(unblocked) {\n  if (queuedFocus !== null) {\n    scheduleCallbackIfUnblocked(queuedFocus, unblocked);\n  }\n\n  if (queuedDrag !== null) {\n    scheduleCallbackIfUnblocked(queuedDrag, unblocked);\n  }\n\n  if (queuedMouse !== null) {\n    scheduleCallbackIfUnblocked(queuedMouse, unblocked);\n  }\n\n  const unblock = queuedEvent => scheduleCallbackIfUnblocked(queuedEvent, unblocked);\n\n  queuedPointers.forEach(unblock);\n  queuedPointerCaptures.forEach(unblock);\n\n  for (let i = 0; i < queuedExplicitHydrationTargets.length; i++) {\n    const queuedTarget = queuedExplicitHydrationTargets[i];\n\n    if (queuedTarget.blockedOn === unblocked) {\n      queuedTarget.blockedOn = null;\n    }\n  }\n\n  while (queuedExplicitHydrationTargets.length > 0) {\n    const nextExplicitTarget = queuedExplicitHydrationTargets[0];\n\n    if (nextExplicitTarget.blockedOn !== null) {\n      // We're still blocked.\n      break;\n    } else {\n      attemptExplicitHydrationTarget(nextExplicitTarget);\n\n      if (nextExplicitTarget.blockedOn === null) {\n        // We're unblocked.\n        queuedExplicitHydrationTargets.shift();\n      }\n    }\n  } // Check the document if there are any queued form actions.\n  // If there's no ownerDocument, then this is the document.\n\n\n  const root = unblocked.ownerDocument || unblocked;\n  const formReplayingQueue = root.$$reactFormReplay;\n\n  if (formReplayingQueue != null) {\n    for (let i = 0; i < formReplayingQueue.length; i += 3) {\n      const form = formReplayingQueue[i];\n      const submitterOrAction = formReplayingQueue[i + 1];\n      const formProps = getFiberCurrentPropsFromNode(form);\n\n      if (typeof submitterOrAction === 'function') {\n        // This action has already resolved. We're just waiting to dispatch it.\n        if (!formProps) {\n          // This was not part of this React instance. It might have been recently\n          // unblocking us from dispatching our events. So let's make sure we schedule\n          // a retry.\n          scheduleReplayQueueIfNeeded(formReplayingQueue);\n        }\n\n        continue;\n      }\n\n      let target = form;\n\n      if (formProps) {\n        // This form belongs to this React instance but the submitter might\n        // not be done yet.\n        let action = null;\n        const submitter = submitterOrAction;\n\n        if (submitter && submitter.hasAttribute('formAction')) {\n          // The submitter is the one that is responsible for the action.\n          target = submitter;\n          const submitterProps = getFiberCurrentPropsFromNode(submitter);\n\n          if (submitterProps) {\n            // The submitter is part of this instance.\n            action = submitterProps.formAction;\n          } else {\n            const blockedOn = findInstanceBlockingTarget(target);\n\n            if (blockedOn !== null) {\n              // The submitter is not hydrated yet. We'll wait for it.\n              continue;\n            } // The submitter must have been a part of a different React instance.\n            // Except the form isn't. We don't dispatch actions in this scenario.\n\n          }\n        } else {\n          action = formProps.action;\n        }\n\n        if (typeof action === 'function') {\n          formReplayingQueue[i + 1] = action;\n        } else {\n          // Something went wrong so let's just delete this action.\n          formReplayingQueue.splice(i, 3);\n          i -= 3;\n        } // Schedule a replay in case this unblocked something.\n\n\n        scheduleReplayQueueIfNeeded(formReplayingQueue);\n        continue;\n      } // Something above this target is still blocked so we can't continue yet.\n      // We're not sure if this target is actually part of this React instance\n      // yet. It could be a different React as a child but at least some parent is.\n      // We must continue for any further queued actions.\n\n    }\n  }\n}\n\nconst ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig; // TODO: can we stop exporting these?\n\nlet _enabled = true; // This is exported in FB builds for use by legacy FB layer infra.\n// We'd like to remove this but it's not clear if this is safe.\n\nfunction setEnabled(enabled) {\n  _enabled = !!enabled;\n}\nfunction isEnabled() {\n  return _enabled;\n}\nfunction createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {\n  const eventPriority = getEventPriority(domEventName);\n  let listenerWrapper;\n\n  switch (eventPriority) {\n    case DiscreteEventPriority:\n      listenerWrapper = dispatchDiscreteEvent;\n      break;\n\n    case ContinuousEventPriority:\n      listenerWrapper = dispatchContinuousEvent;\n      break;\n\n    case DefaultEventPriority:\n    default:\n      listenerWrapper = dispatchEvent;\n      break;\n  }\n\n  return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);\n}\n\nfunction dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {\n  const previousPriority = getCurrentUpdatePriority();\n  const prevTransition = ReactCurrentBatchConfig.transition;\n  ReactCurrentBatchConfig.transition = null;\n\n  try {\n    setCurrentUpdatePriority(DiscreteEventPriority);\n    dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig.transition = prevTransition;\n  }\n}\n\nfunction dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {\n  const previousPriority = getCurrentUpdatePriority();\n  const prevTransition = ReactCurrentBatchConfig.transition;\n  ReactCurrentBatchConfig.transition = null;\n\n  try {\n    setCurrentUpdatePriority(ContinuousEventPriority);\n    dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig.transition = prevTransition;\n  }\n}\n\nfunction dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {\n  if (!_enabled) {\n    return;\n  }\n\n  let blockedOn = findInstanceBlockingEvent(nativeEvent);\n\n  if (blockedOn === null) {\n    dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);\n    clearIfContinuousEvent(domEventName, nativeEvent);\n    return;\n  }\n\n  if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {\n    nativeEvent.stopPropagation();\n    return;\n  } // We need to clear only if we didn't queue because\n  // queueing is accumulative.\n\n\n  clearIfContinuousEvent(domEventName, nativeEvent);\n\n  if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {\n    while (blockedOn !== null) {\n      const fiber = getInstanceFromNode(blockedOn);\n\n      if (fiber !== null) {\n        attemptSynchronousHydration(fiber);\n      }\n\n      const nextBlockedOn = findInstanceBlockingEvent(nativeEvent);\n\n      if (nextBlockedOn === null) {\n        dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);\n      }\n\n      if (nextBlockedOn === blockedOn) {\n        break;\n      }\n\n      blockedOn = nextBlockedOn;\n    }\n\n    if (blockedOn !== null) {\n      nativeEvent.stopPropagation();\n    }\n\n    return;\n  } // This is not replayable so we'll invoke it but without a target,\n  // in case the event system needs to trace it.\n\n\n  dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);\n}\nfunction findInstanceBlockingEvent(nativeEvent) {\n  const nativeEventTarget = getEventTarget(nativeEvent);\n  return findInstanceBlockingTarget(nativeEventTarget);\n}\nlet return_targetInst = null; // Returns a SuspenseInstance or Container if it's blocked.\n// The return_targetInst field above is conceptually part of the return value.\n\nfunction findInstanceBlockingTarget(targetNode) {\n  // TODO: Warn if _enabled is false.\n  return_targetInst = null;\n  let targetInst = getClosestInstanceFromNode(targetNode);\n\n  if (targetInst !== null) {\n    const nearestMounted = getNearestMountedFiber(targetInst);\n\n    if (nearestMounted === null) {\n      // This tree has been unmounted already. Dispatch without a target.\n      targetInst = null;\n    } else {\n      const tag = nearestMounted.tag;\n\n      if (tag === SuspenseComponent) {\n        const instance = getSuspenseInstanceFromFiber(nearestMounted);\n\n        if (instance !== null) {\n          // Queue the event to be replayed later. Abort dispatching since we\n          // don't want this event dispatched twice through the event system.\n          // TODO: If this is the first discrete event in the queue. Schedule an increased\n          // priority for this boundary.\n          return instance;\n        } // This shouldn't happen, something went wrong but to avoid blocking\n        // the whole system, dispatch the event without a target.\n        // TODO: Warn.\n\n\n        targetInst = null;\n      } else if (tag === HostRoot) {\n        const root = nearestMounted.stateNode;\n\n        if (isRootDehydrated(root)) {\n          // If this happens during a replay something went wrong and it might block\n          // the whole system.\n          return getContainerFromFiber(nearestMounted);\n        }\n\n        targetInst = null;\n      } else if (nearestMounted !== targetInst) {\n        // If we get an event (ex: img onload) before committing that\n        // component's mount, ignore it for now (that is, treat it as if it was an\n        // event on a non-React tree). We might also consider queueing events and\n        // dispatching them after the mount.\n        targetInst = null;\n      }\n    }\n  }\n\n  return_targetInst = targetInst; // We're not blocked on anything.\n\n  return null;\n}\nfunction getEventPriority(domEventName) {\n  switch (domEventName) {\n    // Used by SimpleEventPlugin:\n    case 'cancel':\n    case 'click':\n    case 'close':\n    case 'contextmenu':\n    case 'copy':\n    case 'cut':\n    case 'auxclick':\n    case 'dblclick':\n    case 'dragend':\n    case 'dragstart':\n    case 'drop':\n    case 'focusin':\n    case 'focusout':\n    case 'input':\n    case 'invalid':\n    case 'keydown':\n    case 'keypress':\n    case 'keyup':\n    case 'mousedown':\n    case 'mouseup':\n    case 'paste':\n    case 'pause':\n    case 'play':\n    case 'pointercancel':\n    case 'pointerdown':\n    case 'pointerup':\n    case 'ratechange':\n    case 'reset':\n    case 'resize':\n    case 'seeked':\n    case 'submit':\n    case 'touchcancel':\n    case 'touchend':\n    case 'touchstart':\n    case 'volumechange': // Used by polyfills: (fall through)\n\n    case 'change':\n    case 'selectionchange':\n    case 'textInput':\n    case 'compositionstart':\n    case 'compositionend':\n    case 'compositionupdate': // Only enableCreateEventHandleAPI: (fall through)\n\n    case 'beforeblur':\n    case 'afterblur': // Not used by React but could be by user code: (fall through)\n\n    case 'beforeinput':\n    case 'blur':\n    case 'fullscreenchange':\n    case 'focus':\n    case 'hashchange':\n    case 'popstate':\n    case 'select':\n    case 'selectstart':\n      return DiscreteEventPriority;\n\n    case 'drag':\n    case 'dragenter':\n    case 'dragexit':\n    case 'dragleave':\n    case 'dragover':\n    case 'mousemove':\n    case 'mouseout':\n    case 'mouseover':\n    case 'pointermove':\n    case 'pointerout':\n    case 'pointerover':\n    case 'scroll':\n    case 'toggle':\n    case 'touchmove':\n    case 'wheel': // Not used by React but could be by user code: (fall through)\n\n    case 'mouseenter':\n    case 'mouseleave':\n    case 'pointerenter':\n    case 'pointerleave':\n      return ContinuousEventPriority;\n\n    case 'message':\n      {\n        // We might be in the Scheduler callback.\n        // Eventually this mechanism will be replaced by a check\n        // of the current priority on the native scheduler.\n        const schedulerPriority = getCurrentPriorityLevel();\n\n        switch (schedulerPriority) {\n          case ImmediatePriority:\n            return DiscreteEventPriority;\n\n          case UserBlockingPriority:\n            return ContinuousEventPriority;\n\n          case NormalPriority$1:\n          case LowPriority:\n            // TODO: Handle LowSchedulerPriority, somehow. Maybe the same lane as hydration.\n            return DefaultEventPriority;\n\n          case IdlePriority:\n            return IdleEventPriority;\n\n          default:\n            return DefaultEventPriority;\n        }\n      }\n\n    default:\n      return DefaultEventPriority;\n  }\n}\n\nfunction addEventBubbleListener(target, eventType, listener) {\n  target.addEventListener(eventType, listener, false);\n  return listener;\n}\nfunction addEventCaptureListener(target, eventType, listener) {\n  target.addEventListener(eventType, listener, true);\n  return listener;\n}\nfunction addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {\n  target.addEventListener(eventType, listener, {\n    capture: true,\n    passive\n  });\n  return listener;\n}\nfunction addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {\n  target.addEventListener(eventType, listener, {\n    passive\n  });\n  return listener;\n}\n\n/**\n * These variables store information about text content of a target node,\n * allowing comparison of content before and after a given event.\n *\n * Identify the node where selection currently begins, then observe\n * both its text content and its current position in the DOM. Since the\n * browser may natively replace the target node during composition, we can\n * use its position to find its replacement.\n *\n *\n */\nlet root = null;\nlet startText = null;\nlet fallbackText = null;\nfunction initialize(nativeEventTarget) {\n  root = nativeEventTarget;\n  startText = getText();\n  return true;\n}\nfunction reset() {\n  root = null;\n  startText = null;\n  fallbackText = null;\n}\nfunction getData() {\n  if (fallbackText) {\n    return fallbackText;\n  }\n\n  let start;\n  const startValue = startText;\n  const startLength = startValue.length;\n  let end;\n  const endValue = getText();\n  const endLength = endValue.length;\n\n  for (start = 0; start < startLength; start++) {\n    if (startValue[start] !== endValue[start]) {\n      break;\n    }\n  }\n\n  const minEnd = startLength - start;\n\n  for (end = 1; end <= minEnd; end++) {\n    if (startValue[startLength - end] !== endValue[endLength - end]) {\n      break;\n    }\n  }\n\n  const sliceTail = end > 1 ? 1 - end : undefined;\n  fallbackText = endValue.slice(start, sliceTail);\n  return fallbackText;\n}\nfunction getText() {\n  if ('value' in root) {\n    return root.value;\n  }\n\n  return root.textContent;\n}\n\nconst END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n\nconst START_KEYCODE = 229;\nconst canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;\nlet documentMode = null;\n\nif (canUseDOM && 'documentMode' in document) {\n  documentMode = document.documentMode;\n} // Webkit offers a very useful `textInput` event that can be used to\n// directly represent `beforeInput`. The IE `textinput` event is not as\n// useful, so we don't use it.\n\n\nconst canUseTextInputEvent = canUseDOM && 'TextEvent' in window && !documentMode; // In IE9+, we have access to composition events, but the data supplied\n// by the native compositionend event may be incorrect. Japanese ideographic\n// spaces, for instance (\\u3000) are not recorded correctly.\n\nconst useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);\nconst SPACEBAR_CODE = 32;\nconst SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n\nfunction registerEvents$3() {\n  registerTwoPhaseEvent('onBeforeInput', ['compositionend', 'keypress', 'textInput', 'paste']);\n  registerTwoPhaseEvent('onCompositionEnd', ['compositionend', 'focusout', 'keydown', 'keypress', 'keyup', 'mousedown']);\n  registerTwoPhaseEvent('onCompositionStart', ['compositionstart', 'focusout', 'keydown', 'keypress', 'keyup', 'mousedown']);\n  registerTwoPhaseEvent('onCompositionUpdate', ['compositionupdate', 'focusout', 'keydown', 'keypress', 'keyup', 'mousedown']);\n} // Track whether we've ever handled a keypress on the space key.\n\n\nlet hasSpaceKeypress = false;\n/**\n * Return whether a native keypress event is assumed to be a command.\n * This is required because Firefox fires `keypress` events for key commands\n * (cut, copy, select-all, etc.) even though no character is inserted.\n */\n\nfunction isKeypressCommand(nativeEvent) {\n  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.\n  !(nativeEvent.ctrlKey && nativeEvent.altKey);\n}\n/**\n * Translate native top level events into event types.\n */\n\n\nfunction getCompositionEventType(domEventName) {\n  switch (domEventName) {\n    case 'compositionstart':\n      return 'onCompositionStart';\n\n    case 'compositionend':\n      return 'onCompositionEnd';\n\n    case 'compositionupdate':\n      return 'onCompositionUpdate';\n  }\n}\n/**\n * Does our fallback best-guess model think this event signifies that\n * composition has begun?\n */\n\n\nfunction isFallbackCompositionStart(domEventName, nativeEvent) {\n  return domEventName === 'keydown' && nativeEvent.keyCode === START_KEYCODE;\n}\n/**\n * Does our fallback mode think that this event is the end of composition?\n */\n\n\nfunction isFallbackCompositionEnd(domEventName, nativeEvent) {\n  switch (domEventName) {\n    case 'keyup':\n      // Command keys insert or clear IME input.\n      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;\n\n    case 'keydown':\n      // Expect IME keyCode on each keydown. If we get any other\n      // code we must have exited earlier.\n      return nativeEvent.keyCode !== START_KEYCODE;\n\n    case 'keypress':\n    case 'mousedown':\n    case 'focusout':\n      // Events are not possible without cancelling IME.\n      return true;\n\n    default:\n      return false;\n  }\n}\n/**\n * Google Input Tools provides composition data via a CustomEvent,\n * with the `data` property populated in the `detail` object. If this\n * is available on the event object, use it. If not, this is a plain\n * composition event and we have nothing special to extract.\n *\n * @param {object} nativeEvent\n * @return {?string}\n */\n\n\nfunction getDataFromCustomEvent(nativeEvent) {\n  const detail = nativeEvent.detail;\n\n  if (typeof detail === 'object' && 'data' in detail) {\n    return detail.data;\n  }\n\n  return null;\n}\n/**\n * Check if a composition event was triggered by Korean IME.\n * Our fallback mode does not work well with IE's Korean IME,\n * so just use native composition events when Korean IME is used.\n * Although CompositionEvent.locale property is deprecated,\n * it is available in IE, where our fallback mode is enabled.\n *\n * @param {object} nativeEvent\n * @return {boolean}\n */\n\n\nfunction isUsingKoreanIME(nativeEvent) {\n  return nativeEvent.locale === 'ko';\n} // Track the current IME composition status, if any.\n\n\nlet isComposing = false;\n/**\n * @return {?object} A SyntheticCompositionEvent.\n */\n\nfunction extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {\n  let eventType;\n  let fallbackData;\n\n  if (canUseCompositionEvent) {\n    eventType = getCompositionEventType(domEventName);\n  } else if (!isComposing) {\n    if (isFallbackCompositionStart(domEventName, nativeEvent)) {\n      eventType = 'onCompositionStart';\n    }\n  } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {\n    eventType = 'onCompositionEnd';\n  }\n\n  if (!eventType) {\n    return null;\n  }\n\n  if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {\n    // The current composition is stored statically and must not be\n    // overwritten while composition continues.\n    if (!isComposing && eventType === 'onCompositionStart') {\n      isComposing = initialize(nativeEventTarget);\n    } else if (eventType === 'onCompositionEnd') {\n      if (isComposing) {\n        fallbackData = getData();\n      }\n    }\n  }\n\n  const listeners = accumulateTwoPhaseListeners(targetInst, eventType);\n\n  if (listeners.length > 0) {\n    const event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);\n    dispatchQueue.push({\n      event,\n      listeners\n    });\n\n    if (fallbackData) {\n      // Inject data generated from fallback path into the synthetic event.\n      // This matches the property of native CompositionEventInterface.\n      // $FlowFixMe[incompatible-use]\n      event.data = fallbackData;\n    } else {\n      const customData = getDataFromCustomEvent(nativeEvent);\n\n      if (customData !== null) {\n        // $FlowFixMe[incompatible-use]\n        event.data = customData;\n      }\n    }\n  }\n}\n\nfunction getNativeBeforeInputChars(domEventName, nativeEvent) {\n  switch (domEventName) {\n    case 'compositionend':\n      return getDataFromCustomEvent(nativeEvent);\n\n    case 'keypress':\n      /**\n       * If native `textInput` events are available, our goal is to make\n       * use of them. However, there is a special case: the spacebar key.\n       * In Webkit, preventing default on a spacebar `textInput` event\n       * cancels character insertion, but it *also* causes the browser\n       * to fall back to its default spacebar behavior of scrolling the\n       * page.\n       *\n       * Tracking at:\n       * https://code.google.com/p/chromium/issues/detail?id=355103\n       *\n       * To avoid this issue, use the keypress event as if no `textInput`\n       * event is available.\n       */\n      const which = nativeEvent.which;\n\n      if (which !== SPACEBAR_CODE) {\n        return null;\n      }\n\n      hasSpaceKeypress = true;\n      return SPACEBAR_CHAR;\n\n    case 'textInput':\n      // Record the characters to be added to the DOM.\n      const chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled\n      // it at the keypress level and bail immediately. Android Chrome\n      // doesn't give us keycodes, so we need to ignore it.\n\n      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {\n        return null;\n      }\n\n      return chars;\n\n    default:\n      // For other native event types, do nothing.\n      return null;\n  }\n}\n/**\n * For browsers that do not provide the `textInput` event, extract the\n * appropriate string to use for SyntheticInputEvent.\n */\n\n\nfunction getFallbackBeforeInputChars(domEventName, nativeEvent) {\n  // If we are currently composing (IME) and using a fallback to do so,\n  // try to extract the composed characters from the fallback object.\n  // If composition event is available, we extract a string only at\n  // compositionevent, otherwise extract it at fallback events.\n  if (isComposing) {\n    if (domEventName === 'compositionend' || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {\n      const chars = getData();\n      reset();\n      isComposing = false;\n      return chars;\n    }\n\n    return null;\n  }\n\n  switch (domEventName) {\n    case 'paste':\n      // If a paste event occurs after a keypress, throw out the input\n      // chars. Paste events should not lead to BeforeInput events.\n      return null;\n\n    case 'keypress':\n      /**\n       * As of v27, Firefox may fire keypress events even when no character\n       * will be inserted. A few possibilities:\n       *\n       * - `which` is `0`. Arrow keys, Esc key, etc.\n       *\n       * - `which` is the pressed key code, but no char is available.\n       *   Ex: 'AltGr + d` in Polish. There is no modified character for\n       *   this key combination and no character is inserted into the\n       *   document, but FF fires the keypress for char code `100` anyway.\n       *   No `input` event will occur.\n       *\n       * - `which` is the pressed key code, but a command combination is\n       *   being used. Ex: `Cmd+C`. No character is inserted, and no\n       *   `input` event will occur.\n       */\n      if (!isKeypressCommand(nativeEvent)) {\n        // IE fires the `keypress` event when a user types an emoji via\n        // Touch keyboard of Windows.  In such a case, the `char` property\n        // holds an emoji character like `\\uD83D\\uDE0A`.  Because its length\n        // is 2, the property `which` does not represent an emoji correctly.\n        // In such a case, we directly return the `char` property instead of\n        // using `which`.\n        if (nativeEvent.char && nativeEvent.char.length > 1) {\n          return nativeEvent.char;\n        } else if (nativeEvent.which) {\n          return String.fromCharCode(nativeEvent.which);\n        }\n      }\n\n      return null;\n\n    case 'compositionend':\n      return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;\n\n    default:\n      return null;\n  }\n}\n/**\n * Extract a SyntheticInputEvent for `beforeInput`, based on either native\n * `textInput` or fallback behavior.\n *\n * @return {?object} A SyntheticInputEvent.\n */\n\n\nfunction extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {\n  let chars;\n\n  if (canUseTextInputEvent) {\n    chars = getNativeBeforeInputChars(domEventName, nativeEvent);\n  } else {\n    chars = getFallbackBeforeInputChars(domEventName, nativeEvent);\n  } // If no characters are being inserted, no BeforeInput event should\n  // be fired.\n\n\n  if (!chars) {\n    return null;\n  }\n\n  const listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');\n\n  if (listeners.length > 0) {\n    const event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);\n    dispatchQueue.push({\n      event,\n      listeners\n    }); // $FlowFixMe[incompatible-use]\n\n    event.data = chars;\n  }\n}\n/**\n * Create an `onBeforeInput` event to match\n * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.\n *\n * This event plugin is based on the native `textInput` event\n * available in Chrome, Safari, Opera, and IE. This event fires after\n * `onKeyPress` and `onCompositionEnd`, but before `onInput`.\n *\n * `beforeInput` is spec'd but not implemented in any browsers, and\n * the `input` event does not provide any useful information about what has\n * actually been added, contrary to the spec. Thus, `textInput` is the best\n * available event to identify the characters that have actually been inserted\n * into the target node.\n *\n * This plugin is also responsible for emitting `composition` events, thus\n * allowing us to share composition fallback code for both `beforeInput` and\n * `composition` event types.\n */\n\n\nfunction extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {\n  extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);\n  extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);\n}\n\n/**\n * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary\n */\nconst supportedInputTypes = {\n  color: true,\n  date: true,\n  datetime: true,\n  'datetime-local': true,\n  email: true,\n  month: true,\n  number: true,\n  password: true,\n  range: true,\n  search: true,\n  tel: true,\n  text: true,\n  time: true,\n  url: true,\n  week: true\n};\n\nfunction isTextInputElement(elem) {\n  const nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();\n\n  if (nodeName === 'input') {\n    return !!supportedInputTypes[elem.type];\n  }\n\n  if (nodeName === 'textarea') {\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * Checks if an event is supported in the current execution environment.\n *\n * NOTE: This will not work correctly for non-generic events such as `change`,\n * `reset`, `load`, `error`, and `select`.\n *\n * Borrows from Modernizr.\n *\n * @param {string} eventNameSuffix Event name, e.g. \"click\".\n * @return {boolean} True if the event is supported.\n * @internal\n * @license Modernizr 3.0.0pre (Custom Build) | MIT\n */\n\nfunction isEventSupported(eventNameSuffix) {\n  if (!canUseDOM) {\n    return false;\n  }\n\n  const eventName = 'on' + eventNameSuffix;\n  let isSupported = (eventName in document);\n\n  if (!isSupported) {\n    const element = document.createElement('div');\n    element.setAttribute(eventName, 'return;');\n    isSupported = typeof element[eventName] === 'function';\n  }\n\n  return isSupported;\n}\n\nfunction registerEvents$2() {\n  registerTwoPhaseEvent('onChange', ['change', 'click', 'focusin', 'focusout', 'input', 'keydown', 'keyup', 'selectionchange']);\n}\n\nfunction createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {\n  // Flag this event loop as needing state restore.\n  enqueueStateRestore(target);\n  const listeners = accumulateTwoPhaseListeners(inst, 'onChange');\n\n  if (listeners.length > 0) {\n    const event = new SyntheticEvent('onChange', 'change', null, nativeEvent, target);\n    dispatchQueue.push({\n      event,\n      listeners\n    });\n  }\n}\n/**\n * For IE shims\n */\n\n\nlet activeElement$1 = null;\nlet activeElementInst$1 = null;\n/**\n * SECTION: handle `change` event\n */\n\nfunction shouldUseChangeEvent(elem) {\n  const nodeName = elem.nodeName && elem.nodeName.toLowerCase();\n  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';\n}\n\nfunction manualDispatchChangeEvent(nativeEvent) {\n  const dispatchQueue = [];\n  createAndAccumulateChangeEvent(dispatchQueue, activeElementInst$1, nativeEvent, getEventTarget(nativeEvent)); // If change and propertychange bubbled, we'd just bind to it like all the\n  // other events and have it go through ReactBrowserEventEmitter. Since it\n  // doesn't, we manually listen for the events and so we have to enqueue and\n  // process the abstract event manually.\n  //\n  // Batching is necessary here in order to ensure that all event handlers run\n  // before the next rerender (including event handlers attached to ancestor\n  // elements instead of directly on the input). Without this, controlled\n  // components don't work properly in conjunction with event bubbling because\n  // the component is rerendered and the value reverted before all the event\n  // handlers can run. See https://github.com/facebook/react/issues/708.\n\n  batchedUpdates(runEventInBatch, dispatchQueue);\n}\n\nfunction runEventInBatch(dispatchQueue) {\n  processDispatchQueue(dispatchQueue, 0);\n}\n\nfunction getInstIfValueChanged(targetInst) {\n  const targetNode = getNodeFromInstance(targetInst);\n\n  if (updateValueIfChanged(targetNode)) {\n    return targetInst;\n  }\n}\n\nfunction getTargetInstForChangeEvent(domEventName, targetInst) {\n  if (domEventName === 'change') {\n    return targetInst;\n  }\n}\n/**\n * SECTION: handle `input` event\n */\n\n\nlet isInputEventSupported = false;\n\nif (canUseDOM) {\n  // IE9 claims to support the input event but fails to trigger it when\n  // deleting text, so we ignore its input events.\n  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);\n}\n/**\n * (For IE <=9) Starts tracking propertychange events on the passed-in element\n * and override the value property so that we can distinguish user events from\n * value changes in JS.\n */\n\n\nfunction startWatchingForValueChange(target, targetInst) {\n  activeElement$1 = target;\n  activeElementInst$1 = targetInst;\n  activeElement$1.attachEvent('onpropertychange', handlePropertyChange);\n}\n/**\n * (For IE <=9) Removes the event listeners from the currently-tracked element,\n * if any exists.\n */\n\n\nfunction stopWatchingForValueChange() {\n  if (!activeElement$1) {\n    return;\n  }\n\n  activeElement$1.detachEvent('onpropertychange', handlePropertyChange);\n  activeElement$1 = null;\n  activeElementInst$1 = null;\n}\n/**\n * (For IE <=9) Handles a propertychange event, sending a `change` event if\n * the value of the active element has changed.\n */\n// $FlowFixMe[missing-local-annot]\n\n\nfunction handlePropertyChange(nativeEvent) {\n  if (nativeEvent.propertyName !== 'value') {\n    return;\n  }\n\n  if (getInstIfValueChanged(activeElementInst$1)) {\n    manualDispatchChangeEvent(nativeEvent);\n  }\n}\n\nfunction handleEventsForInputEventPolyfill(domEventName, target, targetInst) {\n  if (domEventName === 'focusin') {\n    // In IE9, propertychange fires for most input events but is buggy and\n    // doesn't fire when text is deleted, but conveniently, selectionchange\n    // appears to fire in all of the remaining cases so we catch those and\n    // forward the event if the value has changed\n    // In either case, we don't want to call the event handler if the value\n    // is changed from JS so we redefine a setter for `.value` that updates\n    // our activeElementValue variable, allowing us to ignore those changes\n    //\n    // stopWatching() should be a noop here but we call it just in case we\n    // missed a blur event somehow.\n    stopWatchingForValueChange();\n    startWatchingForValueChange(target, targetInst);\n  } else if (domEventName === 'focusout') {\n    stopWatchingForValueChange();\n  }\n} // For IE8 and IE9.\n\n\nfunction getTargetInstForInputEventPolyfill(domEventName, targetInst) {\n  if (domEventName === 'selectionchange' || domEventName === 'keyup' || domEventName === 'keydown') {\n    // On the selectionchange event, the target is just document which isn't\n    // helpful for us so just check activeElement instead.\n    //\n    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire\n    // propertychange on the first input event after setting `value` from a\n    // script and fires only keydown, keypress, keyup. Catching keyup usually\n    // gets it and catching keydown lets us fire an event for the first\n    // keystroke if user does a key repeat (it'll be a little delayed: right\n    // before the second keystroke). Other input methods (e.g., paste) seem to\n    // fire selectionchange normally.\n    return getInstIfValueChanged(activeElementInst$1);\n  }\n}\n/**\n * SECTION: handle `click` event\n */\n\n\nfunction shouldUseClickEvent(elem) {\n  // Use the `click` event to detect changes to checkbox and radio inputs.\n  // This approach works across all browsers, whereas `change` does not fire\n  // until `blur` in IE8.\n  const nodeName = elem.nodeName;\n  return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');\n}\n\nfunction getTargetInstForClickEvent(domEventName, targetInst) {\n  if (domEventName === 'click') {\n    return getInstIfValueChanged(targetInst);\n  }\n}\n\nfunction getTargetInstForInputOrChangeEvent(domEventName, targetInst) {\n  if (domEventName === 'input' || domEventName === 'change') {\n    return getInstIfValueChanged(targetInst);\n  }\n}\n\nfunction handleControlledInputBlur(node, props) {\n  if (node.type !== 'number') {\n    return;\n  }\n\n  {\n    const isControlled = props.value != null;\n\n    if (isControlled) {\n      // If controlled, assign the value attribute to the current value on blur\n      setDefaultValue(node, 'number', node.value);\n    }\n  }\n}\n/**\n * This plugin creates an `onChange` event that normalizes change events\n * across form elements. This event fires at a time when it's possible to\n * change the element's value without seeing a flicker.\n *\n * Supported elements are:\n * - input (see `isTextInputElement`)\n * - textarea\n * - select\n */\n\n\nfunction extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {\n  const targetNode = targetInst ? getNodeFromInstance(targetInst) : window;\n  let getTargetInstFunc, handleEventFunc;\n\n  if (shouldUseChangeEvent(targetNode)) {\n    getTargetInstFunc = getTargetInstForChangeEvent;\n  } else if (isTextInputElement(targetNode)) {\n    if (isInputEventSupported) {\n      getTargetInstFunc = getTargetInstForInputOrChangeEvent;\n    } else {\n      getTargetInstFunc = getTargetInstForInputEventPolyfill;\n      handleEventFunc = handleEventsForInputEventPolyfill;\n    }\n  } else if (shouldUseClickEvent(targetNode)) {\n    getTargetInstFunc = getTargetInstForClickEvent;\n  } else ;\n\n  if (getTargetInstFunc) {\n    const inst = getTargetInstFunc(domEventName, targetInst);\n\n    if (inst) {\n      createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);\n      return;\n    }\n  }\n\n  if (handleEventFunc) {\n    handleEventFunc(domEventName, targetNode, targetInst);\n  } // When blurring, set the value attribute for number inputs\n\n\n  if (domEventName === 'focusout' && targetInst) {\n    // These props aren't necessarily the most current but we warn for changing\n    // between controlled and uncontrolled, so it doesn't matter and the previous\n    // code was also broken for changes.\n    const props = targetInst.memoizedProps;\n    handleControlledInputBlur(targetNode, props);\n  }\n}\n\nfunction registerEvents$1() {\n  registerDirectEvent('onMouseEnter', ['mouseout', 'mouseover']);\n  registerDirectEvent('onMouseLeave', ['mouseout', 'mouseover']);\n  registerDirectEvent('onPointerEnter', ['pointerout', 'pointerover']);\n  registerDirectEvent('onPointerLeave', ['pointerout', 'pointerover']);\n}\n/**\n * For almost every interaction we care about, there will be both a top-level\n * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that\n * we do not extract duplicate events. However, moving the mouse into the\n * browser from outside will not fire a `mouseout` event. In this case, we use\n * the `mouseover` top-level event.\n */\n\n\nfunction extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {\n  const isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';\n  const isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';\n\n  if (isOverEvent && !isReplayingEvent(nativeEvent)) {\n    // If this is an over event with a target, we might have already dispatched\n    // the event in the out event of the other target. If this is replayed,\n    // then it's because we couldn't dispatch against this target previously\n    // so we have to do it now instead.\n    const related = nativeEvent.relatedTarget || nativeEvent.fromElement;\n\n    if (related) {\n      // If the related node is managed by React, we can assume that we have\n      // already dispatched the corresponding events during its mouseout.\n      if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {\n        return;\n      }\n    }\n  }\n\n  if (!isOutEvent && !isOverEvent) {\n    // Must not be a mouse or pointer in or out - ignoring.\n    return;\n  }\n\n  let win; // TODO: why is this nullable in the types but we read from it?\n\n  if (nativeEventTarget.window === nativeEventTarget) {\n    // `nativeEventTarget` is probably a window object.\n    win = nativeEventTarget;\n  } else {\n    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.\n    const doc = nativeEventTarget.ownerDocument;\n\n    if (doc) {\n      win = doc.defaultView || doc.parentWindow;\n    } else {\n      win = window;\n    }\n  }\n\n  let from;\n  let to;\n\n  if (isOutEvent) {\n    const related = nativeEvent.relatedTarget || nativeEvent.toElement;\n    from = targetInst;\n    to = related ? getClosestInstanceFromNode(related) : null;\n\n    if (to !== null) {\n      const nearestMounted = getNearestMountedFiber(to);\n      const tag = to.tag;\n\n      if (to !== nearestMounted || tag !== HostComponent && tag !== HostSingleton && tag !== HostText) {\n        to = null;\n      }\n    }\n  } else {\n    // Moving to a node from outside the window.\n    from = null;\n    to = targetInst;\n  }\n\n  if (from === to) {\n    // Nothing pertains to our managed components.\n    return;\n  }\n\n  let SyntheticEventCtor = SyntheticMouseEvent;\n  let leaveEventType = 'onMouseLeave';\n  let enterEventType = 'onMouseEnter';\n  let eventTypePrefix = 'mouse';\n\n  if (domEventName === 'pointerout' || domEventName === 'pointerover') {\n    SyntheticEventCtor = SyntheticPointerEvent;\n    leaveEventType = 'onPointerLeave';\n    enterEventType = 'onPointerEnter';\n    eventTypePrefix = 'pointer';\n  }\n\n  const fromNode = from == null ? win : getNodeFromInstance(from);\n  const toNode = to == null ? win : getNodeFromInstance(to);\n  const leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);\n  leave.target = fromNode;\n  leave.relatedTarget = toNode;\n  let enter = null; // We should only process this nativeEvent if we are processing\n  // the first ancestor. Next time, we will ignore the event.\n\n  const nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);\n\n  if (nativeTargetInst === targetInst) {\n    const enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);\n    enterEvent.target = toNode;\n    enterEvent.relatedTarget = fromNode;\n    enter = enterEvent;\n  }\n\n  accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);\n}\n\n/**\n * Given any node return the first leaf node without children.\n *\n * @param {DOMElement|DOMTextNode} node\n * @return {DOMElement|DOMTextNode}\n */\n\nfunction getLeafNode(node) {\n  while (node && node.firstChild) {\n    node = node.firstChild;\n  }\n\n  return node;\n}\n/**\n * Get the next sibling within a container. This will walk up the\n * DOM if a node's siblings have been exhausted.\n *\n * @param {DOMElement|DOMTextNode} node\n * @return {?DOMElement|DOMTextNode}\n */\n\n\nfunction getSiblingNode(node) {\n  while (node) {\n    if (node.nextSibling) {\n      return node.nextSibling;\n    }\n\n    node = node.parentNode;\n  }\n}\n/**\n * Get object describing the nodes which contain characters at offset.\n *\n * @param {DOMElement|DOMTextNode} root\n * @param {number} offset\n * @return {?object}\n */\n\n\nfunction getNodeForCharacterOffset(root, offset) {\n  let node = getLeafNode(root);\n  let nodeStart = 0;\n  let nodeEnd = 0;\n\n  while (node) {\n    if (node.nodeType === TEXT_NODE) {\n      nodeEnd = nodeStart + node.textContent.length;\n\n      if (nodeStart <= offset && nodeEnd >= offset) {\n        return {\n          node: node,\n          offset: offset - nodeStart\n        };\n      }\n\n      nodeStart = nodeEnd;\n    }\n\n    node = getLeafNode(getSiblingNode(node));\n  }\n}\n\n/**\n * @param {DOMElement} outerNode\n * @return {?object}\n */\n\nfunction getOffsets(outerNode) {\n  const ownerDocument = outerNode.ownerDocument;\n  const win = ownerDocument && ownerDocument.defaultView || window;\n  const selection = win.getSelection && win.getSelection();\n\n  if (!selection || selection.rangeCount === 0) {\n    return null;\n  }\n\n  const anchorNode = selection.anchorNode,\n        anchorOffset = selection.anchorOffset,\n        focusNode = selection.focusNode,\n        focusOffset = selection.focusOffset; // In Firefox, anchorNode and focusNode can be \"anonymous divs\", e.g. the\n  // up/down buttons on an <input type=\"number\">. Anonymous divs do not seem to\n  // expose properties, triggering a \"Permission denied error\" if any of its\n  // properties are accessed. The only seemingly possible way to avoid erroring\n  // is to access a property that typically works for non-anonymous divs and\n  // catch any error that may otherwise arise. See\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427\n\n  try {\n    /* eslint-disable ft-flow/no-unused-expressions */\n    anchorNode.nodeType;\n    focusNode.nodeType;\n    /* eslint-enable ft-flow/no-unused-expressions */\n  } catch (e) {\n    return null;\n  }\n\n  return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);\n}\n/**\n * Returns {start, end} where `start` is the character/codepoint index of\n * (anchorNode, anchorOffset) within the textContent of `outerNode`, and\n * `end` is the index of (focusNode, focusOffset).\n *\n * Returns null if you pass in garbage input but we should probably just crash.\n *\n * Exported only for testing.\n */\n\nfunction getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {\n  let length = 0;\n  let start = -1;\n  let end = -1;\n  let indexWithinAnchor = 0;\n  let indexWithinFocus = 0;\n  let node = outerNode;\n  let parentNode = null;\n\n  outer: while (true) {\n    let next = null;\n\n    while (true) {\n      if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {\n        start = length + anchorOffset;\n      }\n\n      if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {\n        end = length + focusOffset;\n      }\n\n      if (node.nodeType === TEXT_NODE) {\n        length += node.nodeValue.length;\n      }\n\n      if ((next = node.firstChild) === null) {\n        break;\n      } // Moving from `node` to its first child `next`.\n\n\n      parentNode = node;\n      node = next;\n    }\n\n    while (true) {\n      if (node === outerNode) {\n        // If `outerNode` has children, this is always the second time visiting\n        // it. If it has no children, this is still the first loop, and the only\n        // valid selection is anchorNode and focusNode both equal to this node\n        // and both offsets 0, in which case we will have handled above.\n        break outer;\n      }\n\n      if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {\n        start = length;\n      }\n\n      if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {\n        end = length;\n      }\n\n      if ((next = node.nextSibling) !== null) {\n        break;\n      }\n\n      node = parentNode;\n      parentNode = node.parentNode;\n    } // Moving from `node` to its next sibling `next`.\n\n\n    node = next;\n  }\n\n  if (start === -1 || end === -1) {\n    // This should never happen. (Would happen if the anchor/focus nodes aren't\n    // actually inside the passed-in node.)\n    return null;\n  }\n\n  return {\n    start: start,\n    end: end\n  };\n}\n/**\n * In modern non-IE browsers, we can support both forward and backward\n * selections.\n *\n * Note: IE10+ supports the Selection object, but it does not support\n * the `extend` method, which means that even in modern IE, it's not possible\n * to programmatically create a backward selection. Thus, for all IE\n * versions, we use the old IE API to create our selections.\n *\n * @param {DOMElement|DOMTextNode} node\n * @param {object} offsets\n */\n\nfunction setOffsets(node, offsets) {\n  const doc = node.ownerDocument || document;\n  const win = doc && doc.defaultView || window; // Edge fails with \"Object expected\" in some scenarios.\n  // (For instance: TinyMCE editor used in a list component that supports pasting to add more,\n  // fails when pasting 100+ items)\n\n  if (!win.getSelection) {\n    return;\n  }\n\n  const selection = win.getSelection();\n  const length = node.textContent.length;\n  let start = Math.min(offsets.start, length);\n  let end = offsets.end === undefined ? start : Math.min(offsets.end, length); // IE 11 uses modern selection, but doesn't support the extend method.\n  // Flip backward selections, so we can set with a single range.\n\n  if (!selection.extend && start > end) {\n    const temp = end;\n    end = start;\n    start = temp;\n  }\n\n  const startMarker = getNodeForCharacterOffset(node, start);\n  const endMarker = getNodeForCharacterOffset(node, end);\n\n  if (startMarker && endMarker) {\n    if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {\n      return;\n    }\n\n    const range = doc.createRange();\n    range.setStart(startMarker.node, startMarker.offset);\n    selection.removeAllRanges();\n\n    if (start > end) {\n      selection.addRange(range);\n      selection.extend(endMarker.node, endMarker.offset);\n    } else {\n      range.setEnd(endMarker.node, endMarker.offset);\n      selection.addRange(range);\n    }\n  }\n}\n\nfunction isTextNode(node) {\n  return node && node.nodeType === TEXT_NODE;\n}\n\nfunction containsNode(outerNode, innerNode) {\n  if (!outerNode || !innerNode) {\n    return false;\n  } else if (outerNode === innerNode) {\n    return true;\n  } else if (isTextNode(outerNode)) {\n    return false;\n  } else if (isTextNode(innerNode)) {\n    return containsNode(outerNode, innerNode.parentNode);\n  } else if ('contains' in outerNode) {\n    return outerNode.contains(innerNode);\n  } else if (outerNode.compareDocumentPosition) {\n    return !!(outerNode.compareDocumentPosition(innerNode) & 16);\n  } else {\n    return false;\n  }\n}\n\nfunction isInDocument(node) {\n  return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);\n}\n\nfunction isSameOriginFrame(iframe) {\n  try {\n    // Accessing the contentDocument of a HTMLIframeElement can cause the browser\n    // to throw, e.g. if it has a cross-origin src attribute.\n    // Safari will show an error in the console when the access results in \"Blocked a frame with origin\". e.g:\n    // iframe.contentDocument.defaultView;\n    // A safety way is to access one of the cross origin properties: Window or Location\n    // Which might result in \"SecurityError\" DOM Exception and it is compatible to Safari.\n    // https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl\n    return typeof iframe.contentWindow.location.href === 'string';\n  } catch (err) {\n    return false;\n  }\n}\n\nfunction getActiveElementDeep() {\n  let win = window;\n  let element = getActiveElement();\n\n  while (element instanceof win.HTMLIFrameElement) {\n    if (isSameOriginFrame(element)) {\n      win = element.contentWindow;\n    } else {\n      return element;\n    }\n\n    element = getActiveElement(win.document);\n  }\n\n  return element;\n}\n/**\n * @ReactInputSelection: React input selection module. Based on Selection.js,\n * but modified to be suitable for react and has a couple of bug fixes (doesn't\n * assume buttons have range selections allowed).\n * Input selection module for React.\n */\n\n/**\n * @hasSelectionCapabilities: we get the element types that support selection\n * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`\n * and `selectionEnd` rows.\n */\n\n\nfunction hasSelectionCapabilities(elem) {\n  const nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();\n  return nodeName && (nodeName === 'input' && (elem.type === 'text' || elem.type === 'search' || elem.type === 'tel' || elem.type === 'url' || elem.type === 'password') || nodeName === 'textarea' || elem.contentEditable === 'true');\n}\nfunction getSelectionInformation() {\n  const focusedElem = getActiveElementDeep();\n  return {\n    focusedElem: focusedElem,\n    selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection$1(focusedElem) : null\n  };\n}\n/**\n * @restoreSelection: If any selection information was potentially lost,\n * restore it. This is useful when performing operations that could remove dom\n * nodes and place them back in, resulting in focus being lost.\n */\n\nfunction restoreSelection(priorSelectionInformation) {\n  const curFocusedElem = getActiveElementDeep();\n  const priorFocusedElem = priorSelectionInformation.focusedElem;\n  const priorSelectionRange = priorSelectionInformation.selectionRange;\n\n  if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {\n    if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {\n      setSelection(priorFocusedElem, priorSelectionRange);\n    } // Focusing a node can change the scroll position, which is undesirable\n\n\n    const ancestors = [];\n    let ancestor = priorFocusedElem;\n\n    while (ancestor = ancestor.parentNode) {\n      if (ancestor.nodeType === ELEMENT_NODE) {\n        ancestors.push({\n          element: ancestor,\n          left: ancestor.scrollLeft,\n          top: ancestor.scrollTop\n        });\n      }\n    }\n\n    if (typeof priorFocusedElem.focus === 'function') {\n      priorFocusedElem.focus();\n    }\n\n    for (let i = 0; i < ancestors.length; i++) {\n      const info = ancestors[i];\n      info.element.scrollLeft = info.left;\n      info.element.scrollTop = info.top;\n    }\n  }\n}\n/**\n * @getSelection: Gets the selection bounds of a focused textarea, input or\n * contentEditable node.\n * -@input: Look up selection bounds of this input\n * -@return {start: selectionStart, end: selectionEnd}\n */\n\nfunction getSelection$1(input) {\n  let selection;\n\n  if ('selectionStart' in input) {\n    // Modern browser with input or textarea.\n    selection = {\n      start: input.selectionStart,\n      end: input.selectionEnd\n    };\n  } else {\n    // Content editable or old IE textarea.\n    selection = getOffsets(input);\n  }\n\n  return selection || {\n    start: 0,\n    end: 0\n  };\n}\n/**\n * @setSelection: Sets the selection bounds of a textarea or input and focuses\n * the input.\n * -@input     Set selection bounds of this input or textarea\n * -@offsets   Object of same form that is returned from get*\n */\n\nfunction setSelection(input, offsets) {\n  const start = offsets.start;\n  let end = offsets.end;\n\n  if (end === undefined) {\n    end = start;\n  }\n\n  if ('selectionStart' in input) {\n    input.selectionStart = start;\n    input.selectionEnd = Math.min(end, input.value.length);\n  } else {\n    setOffsets(input, offsets);\n  }\n}\n\nconst skipSelectionChangeEvent = canUseDOM && 'documentMode' in document && document.documentMode <= 11;\n\nfunction registerEvents() {\n  registerTwoPhaseEvent('onSelect', ['focusout', 'contextmenu', 'dragend', 'focusin', 'keydown', 'keyup', 'mousedown', 'mouseup', 'selectionchange']);\n}\n\nlet activeElement = null;\nlet activeElementInst = null;\nlet lastSelection = null;\nlet mouseDown = false;\n/**\n * Get an object which is a unique representation of the current selection.\n *\n * The return value will not be consistent across nodes or browsers, but\n * two identical selections on the same node will return identical objects.\n */\n\nfunction getSelection(node) {\n  if ('selectionStart' in node && hasSelectionCapabilities(node)) {\n    return {\n      start: node.selectionStart,\n      end: node.selectionEnd\n    };\n  } else {\n    const win = node.ownerDocument && node.ownerDocument.defaultView || window;\n    const selection = win.getSelection();\n    return {\n      anchorNode: selection.anchorNode,\n      anchorOffset: selection.anchorOffset,\n      focusNode: selection.focusNode,\n      focusOffset: selection.focusOffset\n    };\n  }\n}\n/**\n * Get document associated with the event target.\n */\n\n\nfunction getEventTargetDocument(eventTarget) {\n  return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;\n}\n/**\n * Poll selection to see whether it's changed.\n *\n * @param {object} nativeEvent\n * @param {object} nativeEventTarget\n * @return {?SyntheticEvent}\n */\n\n\nfunction constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {\n  // Ensure we have the right element, and that the user is not dragging a\n  // selection (this matches native `select` event behavior). In HTML5, select\n  // fires only on input and textarea thus if there's no focused element we\n  // won't dispatch.\n  const doc = getEventTargetDocument(nativeEventTarget);\n\n  if (mouseDown || activeElement == null || activeElement !== getActiveElement(doc)) {\n    return;\n  } // Only fire when selection has actually changed.\n\n\n  const currentSelection = getSelection(activeElement);\n\n  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {\n    lastSelection = currentSelection;\n    const listeners = accumulateTwoPhaseListeners(activeElementInst, 'onSelect');\n\n    if (listeners.length > 0) {\n      const event = new SyntheticEvent('onSelect', 'select', null, nativeEvent, nativeEventTarget);\n      dispatchQueue.push({\n        event,\n        listeners\n      });\n      event.target = activeElement;\n    }\n  }\n}\n/**\n * This plugin creates an `onSelect` event that normalizes select events\n * across form elements.\n *\n * Supported elements are:\n * - input (see `isTextInputElement`)\n * - textarea\n * - contentEditable\n *\n * This differs from native browser implementations in the following ways:\n * - Fires on contentEditable fields as well as inputs.\n * - Fires for collapsed selection.\n * - Fires after user input.\n */\n\n\nfunction extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {\n  const targetNode = targetInst ? getNodeFromInstance(targetInst) : window;\n\n  switch (domEventName) {\n    // Track the input node that has focus.\n    case 'focusin':\n      if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {\n        activeElement = targetNode;\n        activeElementInst = targetInst;\n        lastSelection = null;\n      }\n\n      break;\n\n    case 'focusout':\n      activeElement = null;\n      activeElementInst = null;\n      lastSelection = null;\n      break;\n    // Don't fire the event while the user is dragging. This matches the\n    // semantics of the native select event.\n\n    case 'mousedown':\n      mouseDown = true;\n      break;\n\n    case 'contextmenu':\n    case 'mouseup':\n    case 'dragend':\n      mouseDown = false;\n      constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);\n      break;\n    // Chrome and IE fire non-standard event when selection is changed (and\n    // sometimes when it hasn't). IE's event fires out of order with respect\n    // to key and input events on deletion, so we discard it.\n    //\n    // Firefox doesn't support selectionchange, so check selection status\n    // after each key entry. The selection changes after keydown and before\n    // keyup, but we check on keydown as well in the case of holding down a\n    // key, when multiple keydown events are fired but only one keyup is.\n    // This is also our approach for IE handling, for the reason above.\n\n    case 'selectionchange':\n      if (skipSelectionChangeEvent) {\n        break;\n      }\n\n    // falls through\n\n    case 'keydown':\n    case 'keyup':\n      constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);\n  }\n}\n\n/**\n * Generate a mapping of standard vendor prefixes using the defined style property and event name.\n *\n * @param {string} styleProp\n * @param {string} eventName\n * @returns {object}\n */\n\nfunction makePrefixMap(styleProp, eventName) {\n  const prefixes = {};\n  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();\n  prefixes['Webkit' + styleProp] = 'webkit' + eventName;\n  prefixes['Moz' + styleProp] = 'moz' + eventName;\n  return prefixes;\n}\n/**\n * A list of event names to a configurable list of vendor prefixes.\n */\n\n\nconst vendorPrefixes = {\n  animationend: makePrefixMap('Animation', 'AnimationEnd'),\n  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),\n  animationstart: makePrefixMap('Animation', 'AnimationStart'),\n  transitionend: makePrefixMap('Transition', 'TransitionEnd')\n};\n/**\n * Event names that have already been detected and prefixed (if applicable).\n */\n\nconst prefixedEventNames = {};\n/**\n * Element to check for prefixes on.\n */\n\nlet style = {};\n/**\n * Bootstrap if a DOM exists.\n */\n\nif (canUseDOM) {\n  style = document.createElement('div').style; // On some platforms, in particular some releases of Android 4.x,\n  // the un-prefixed \"animation\" and \"transition\" properties are defined on the\n  // style object but the events that fire will still be prefixed, so we need\n  // to check if the un-prefixed events are usable, and if not remove them from the map.\n\n  if (!('AnimationEvent' in window)) {\n    delete vendorPrefixes.animationend.animation;\n    delete vendorPrefixes.animationiteration.animation;\n    delete vendorPrefixes.animationstart.animation;\n  } // Same as above\n\n\n  if (!('TransitionEvent' in window)) {\n    delete vendorPrefixes.transitionend.transition;\n  }\n}\n/**\n * Attempts to determine the correct vendor prefixed event name.\n *\n * @param {string} eventName\n * @returns {string}\n */\n\n\nfunction getVendorPrefixedEventName(eventName) {\n  if (prefixedEventNames[eventName]) {\n    return prefixedEventNames[eventName];\n  } else if (!vendorPrefixes[eventName]) {\n    return eventName;\n  }\n\n  const prefixMap = vendorPrefixes[eventName];\n\n  for (const styleProp in prefixMap) {\n    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {\n      return prefixedEventNames[eventName] = prefixMap[styleProp];\n    }\n  }\n\n  return eventName;\n}\n\nconst ANIMATION_END = getVendorPrefixedEventName('animationend');\nconst ANIMATION_ITERATION = getVendorPrefixedEventName('animationiteration');\nconst ANIMATION_START = getVendorPrefixedEventName('animationstart');\nconst TRANSITION_END = getVendorPrefixedEventName('transitionend');\n\nconst topLevelEventsToReactNames = new Map(); // NOTE: Capitalization is important in this list!\n//\n// E.g. it needs \"pointerDown\", not \"pointerdown\".\n// This is because we derive both React name (\"onPointerDown\")\n// and DOM name (\"pointerdown\") from the same list.\n//\n// Exceptions that don't match this convention are listed separately.\n//\n// prettier-ignore\n\nconst simpleEventPluginEvents = ['abort', 'auxClick', 'cancel', 'canPlay', 'canPlayThrough', 'click', 'close', 'contextMenu', 'copy', 'cut', 'drag', 'dragEnd', 'dragEnter', 'dragExit', 'dragLeave', 'dragOver', 'dragStart', 'drop', 'durationChange', 'emptied', 'encrypted', 'ended', 'error', 'gotPointerCapture', 'input', 'invalid', 'keyDown', 'keyPress', 'keyUp', 'load', 'loadedData', 'loadedMetadata', 'loadStart', 'lostPointerCapture', 'mouseDown', 'mouseMove', 'mouseOut', 'mouseOver', 'mouseUp', 'paste', 'pause', 'play', 'playing', 'pointerCancel', 'pointerDown', 'pointerMove', 'pointerOut', 'pointerOver', 'pointerUp', 'progress', 'rateChange', 'reset', 'resize', 'seeked', 'seeking', 'stalled', 'submit', 'suspend', 'timeUpdate', 'touchCancel', 'touchEnd', 'touchStart', 'volumeChange', 'scroll', 'scrollEnd', 'toggle', 'touchMove', 'waiting', 'wheel'];\n\nfunction registerSimpleEvent(domEventName, reactName) {\n  topLevelEventsToReactNames.set(domEventName, reactName);\n  registerTwoPhaseEvent(reactName, [domEventName]);\n}\n\nfunction registerSimpleEvents() {\n  for (let i = 0; i < simpleEventPluginEvents.length; i++) {\n    const eventName = simpleEventPluginEvents[i];\n    const domEventName = eventName.toLowerCase();\n    const capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);\n    registerSimpleEvent(domEventName, 'on' + capitalizedEvent);\n  } // Special cases where event names don't match.\n\n\n  registerSimpleEvent(ANIMATION_END, 'onAnimationEnd');\n  registerSimpleEvent(ANIMATION_ITERATION, 'onAnimationIteration');\n  registerSimpleEvent(ANIMATION_START, 'onAnimationStart');\n  registerSimpleEvent('dblclick', 'onDoubleClick');\n  registerSimpleEvent('focusin', 'onFocus');\n  registerSimpleEvent('focusout', 'onBlur');\n  registerSimpleEvent(TRANSITION_END, 'onTransitionEnd');\n}\n\nfunction extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {\n  const reactName = topLevelEventsToReactNames.get(domEventName);\n\n  if (reactName === undefined) {\n    return;\n  }\n\n  let SyntheticEventCtor = SyntheticEvent;\n  let reactEventType = domEventName;\n\n  switch (domEventName) {\n    case 'keypress':\n      // Firefox creates a keypress event for function keys too. This removes\n      // the unwanted keypress events. Enter is however both printable and\n      // non-printable. One would expect Tab to be as well (but it isn't).\n      // TODO: Fixed in https://bugzilla.mozilla.org/show_bug.cgi?id=968056. Can\n      // probably remove.\n      if (getEventCharCode(nativeEvent) === 0) {\n        return;\n      }\n\n    /* falls through */\n\n    case 'keydown':\n    case 'keyup':\n      SyntheticEventCtor = SyntheticKeyboardEvent;\n      break;\n\n    case 'focusin':\n      reactEventType = 'focus';\n      SyntheticEventCtor = SyntheticFocusEvent;\n      break;\n\n    case 'focusout':\n      reactEventType = 'blur';\n      SyntheticEventCtor = SyntheticFocusEvent;\n      break;\n\n    case 'beforeblur':\n    case 'afterblur':\n      SyntheticEventCtor = SyntheticFocusEvent;\n      break;\n\n    case 'click':\n      // Firefox creates a click event on right mouse clicks. This removes the\n      // unwanted click events.\n      // TODO: Fixed in https://phabricator.services.mozilla.com/D26793. Can\n      // probably remove.\n      if (nativeEvent.button === 2) {\n        return;\n      }\n\n    /* falls through */\n\n    case 'auxclick':\n    case 'dblclick':\n    case 'mousedown':\n    case 'mousemove':\n    case 'mouseup': // TODO: Disabled elements should not respond to mouse events\n\n    /* falls through */\n\n    case 'mouseout':\n    case 'mouseover':\n    case 'contextmenu':\n      SyntheticEventCtor = SyntheticMouseEvent;\n      break;\n\n    case 'drag':\n    case 'dragend':\n    case 'dragenter':\n    case 'dragexit':\n    case 'dragleave':\n    case 'dragover':\n    case 'dragstart':\n    case 'drop':\n      SyntheticEventCtor = SyntheticDragEvent;\n      break;\n\n    case 'touchcancel':\n    case 'touchend':\n    case 'touchmove':\n    case 'touchstart':\n      SyntheticEventCtor = SyntheticTouchEvent;\n      break;\n\n    case ANIMATION_END:\n    case ANIMATION_ITERATION:\n    case ANIMATION_START:\n      SyntheticEventCtor = SyntheticAnimationEvent;\n      break;\n\n    case TRANSITION_END:\n      SyntheticEventCtor = SyntheticTransitionEvent;\n      break;\n\n    case 'scroll':\n    case 'scrollend':\n      SyntheticEventCtor = SyntheticUIEvent;\n      break;\n\n    case 'wheel':\n      SyntheticEventCtor = SyntheticWheelEvent;\n      break;\n\n    case 'copy':\n    case 'cut':\n    case 'paste':\n      SyntheticEventCtor = SyntheticClipboardEvent;\n      break;\n\n    case 'gotpointercapture':\n    case 'lostpointercapture':\n    case 'pointercancel':\n    case 'pointerdown':\n    case 'pointermove':\n    case 'pointerout':\n    case 'pointerover':\n    case 'pointerup':\n      SyntheticEventCtor = SyntheticPointerEvent;\n      break;\n  }\n\n  const inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;\n\n  {\n    // Some events don't bubble in the browser.\n    // In the past, React has always bubbled them, but this can be surprising.\n    // We're going to try aligning closer to the browser behavior by not bubbling\n    // them in React either. We'll start by not bubbling onScroll, and then expand.\n    const accumulateTargetOnly = !inCapturePhase && ( // TODO: ideally, we'd eventually add all events from\n    // nonDelegatedEvents list in DOMPluginEventSystem.\n    // Then we can remove this special list.\n    // This is a breaking change that can wait until React 18.\n    domEventName === 'scroll' || domEventName === 'scrollend');\n    const listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);\n\n    if (listeners.length > 0) {\n      // Intentionally create event lazily.\n      const event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);\n      dispatchQueue.push({\n        event,\n        listeners\n      });\n    }\n  }\n}\n\nregisterSimpleEvents();\nregisterEvents$1();\nregisterEvents$2();\nregisterEvents();\nregisterEvents$3();\n\nfunction extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {\n  // TODO: we should remove the concept of a \"SimpleEventPlugin\".\n  // This is the basic functionality of the event system. All\n  // the other plugins are essentially polyfills. So the plugin\n  // should probably be inlined somewhere and have its logic\n  // be core the to event system. This would potentially allow\n  // us to ship builds of React without the polyfilled plugins below.\n  extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);\n  const shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0; // We don't process these events unless we are in the\n  // event's native \"bubble\" phase, which means that we're\n  // not in the capture phase. That's because we emulate\n  // the capture phase here still. This is a trade-off,\n  // because in an ideal world we would not emulate and use\n  // the phases properly, like we do with the SimpleEvent\n  // plugin. However, the plugins below either expect\n  // emulation (EnterLeave) or use state localized to that\n  // plugin (BeforeInput, Change, Select). The state in\n  // these modules complicates things, as you'll essentially\n  // get the case where the capture phase event might change\n  // state, only for the following bubble event to come in\n  // later and not trigger anything as the state now\n  // invalidates the heuristics of the event plugin. We\n  // could alter all these plugins to work in such ways, but\n  // that might cause other unknown side-effects that we\n  // can't foresee right now.\n\n  if (shouldProcessPolyfillPlugins) {\n    extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);\n    extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);\n    extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);\n    extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);\n    extractEvents$6(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);\n  }\n} // List of events that need to be individually attached to media elements.\n\n\nconst mediaEventTypes = ['abort', 'canplay', 'canplaythrough', 'durationchange', 'emptied', 'encrypted', 'ended', 'error', 'loadeddata', 'loadedmetadata', 'loadstart', 'pause', 'play', 'playing', 'progress', 'ratechange', 'resize', 'seeked', 'seeking', 'stalled', 'suspend', 'timeupdate', 'volumechange', 'waiting']; // We should not delegate these events to the container, but rather\n// set them on the actual target element itself. This is primarily\n// because these events do not consistently bubble in the DOM.\n\nconst nonDelegatedEvents = new Set(['cancel', 'close', 'invalid', 'load', 'scroll', 'scrollend', 'toggle'].concat(mediaEventTypes));\n\nfunction executeDispatch(event, listener, currentTarget) {\n  event.currentTarget = currentTarget;\n\n  try {\n    listener(event);\n  } catch (error) {\n    reportGlobalError(error);\n  }\n\n  event.currentTarget = null;\n}\n\nfunction processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {\n  let previousInstance;\n\n  if (inCapturePhase) {\n    for (let i = dispatchListeners.length - 1; i >= 0; i--) {\n      const _dispatchListeners$i = dispatchListeners[i],\n            instance = _dispatchListeners$i.instance,\n            currentTarget = _dispatchListeners$i.currentTarget,\n            listener = _dispatchListeners$i.listener;\n\n      if (instance !== previousInstance && event.isPropagationStopped()) {\n        return;\n      }\n\n      executeDispatch(event, listener, currentTarget);\n      previousInstance = instance;\n    }\n  } else {\n    for (let i = 0; i < dispatchListeners.length; i++) {\n      const _dispatchListeners$i2 = dispatchListeners[i],\n            instance = _dispatchListeners$i2.instance,\n            currentTarget = _dispatchListeners$i2.currentTarget,\n            listener = _dispatchListeners$i2.listener;\n\n      if (instance !== previousInstance && event.isPropagationStopped()) {\n        return;\n      }\n\n      executeDispatch(event, listener, currentTarget);\n      previousInstance = instance;\n    }\n  }\n}\n\nfunction processDispatchQueue(dispatchQueue, eventSystemFlags) {\n  const inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;\n\n  for (let i = 0; i < dispatchQueue.length; i++) {\n    const _dispatchQueue$i = dispatchQueue[i],\n          event = _dispatchQueue$i.event,\n          listeners = _dispatchQueue$i.listeners;\n    processDispatchQueueItemsInOrder(event, listeners, inCapturePhase); //  event system doesn't use pooling.\n  }\n}\n\nfunction dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {\n  const nativeEventTarget = getEventTarget(nativeEvent);\n  const dispatchQueue = [];\n  extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);\n  processDispatchQueue(dispatchQueue, eventSystemFlags);\n}\n\nfunction listenToNonDelegatedEvent(domEventName, targetElement) {\n\n  const isCapturePhaseListener = false;\n  const listenerSet = getEventListenerSet(targetElement);\n  const listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);\n\n  if (!listenerSet.has(listenerSetKey)) {\n    addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);\n    listenerSet.add(listenerSetKey);\n  }\n}\nfunction listenToNativeEvent(domEventName, isCapturePhaseListener, target) {\n\n  let eventSystemFlags = 0;\n\n  if (isCapturePhaseListener) {\n    eventSystemFlags |= IS_CAPTURE_PHASE;\n  }\n\n  addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);\n} // This is only used by createEventHandle when the\nconst listeningMarker = '_reactListening' + Math.random().toString(36).slice(2);\nfunction listenToAllSupportedEvents(rootContainerElement) {\n  if (!rootContainerElement[listeningMarker]) {\n    rootContainerElement[listeningMarker] = true;\n    allNativeEvents.forEach(domEventName => {\n      // We handle selectionchange separately because it\n      // doesn't bubble and needs to be on the document.\n      if (domEventName !== 'selectionchange') {\n        if (!nonDelegatedEvents.has(domEventName)) {\n          listenToNativeEvent(domEventName, false, rootContainerElement);\n        }\n\n        listenToNativeEvent(domEventName, true, rootContainerElement);\n      }\n    });\n    const ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;\n\n    if (ownerDocument !== null) {\n      // The selectionchange event also needs deduplication\n      // but it is attached to the document.\n      if (!ownerDocument[listeningMarker]) {\n        ownerDocument[listeningMarker] = true;\n        listenToNativeEvent('selectionchange', false, ownerDocument);\n      }\n    }\n  }\n}\n\nfunction addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {\n  let listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags); // If passive option is not supported, then the event will be\n  // active and not passive.\n\n  let isPassiveListener = undefined;\n\n  if (passiveBrowserEventsSupported) {\n    // Browsers introduced an intervention, making these events\n    // passive by default on document. React doesn't bind them\n    // to document anymore, but changing this now would undo\n    // the performance wins from the change. So we emulate\n    // the existing behavior manually on the roots now.\n    // https://github.com/facebook/react/issues/19651\n    if (domEventName === 'touchstart' || domEventName === 'touchmove' || domEventName === 'wheel') {\n      isPassiveListener = true;\n    }\n  }\n\n  targetContainer = targetContainer;\n\n\n  if (isCapturePhaseListener) {\n    if (isPassiveListener !== undefined) {\n      addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);\n    } else {\n      addEventCaptureListener(targetContainer, domEventName, listener);\n    }\n  } else {\n    if (isPassiveListener !== undefined) {\n      addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);\n    } else {\n      addEventBubbleListener(targetContainer, domEventName, listener);\n    }\n  }\n}\n\nfunction isMatchingRootContainer(grandContainer, targetContainer) {\n  return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;\n}\n\nfunction dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {\n  let ancestorInst = targetInst;\n\n  if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {\n    const targetContainerNode = targetContainer; // If we are using the legacy FB support flag, we\n\n    if (targetInst !== null) {\n      // The below logic attempts to work out if we need to change\n      // the target fiber to a different ancestor. We had similar logic\n      // in the legacy event system, except the big difference between\n      // systems is that the modern event system now has an event listener\n      // attached to each React Root and React Portal Root. Together,\n      // the DOM nodes representing these roots are the \"rootContainer\".\n      // To figure out which ancestor instance we should use, we traverse\n      // up the fiber tree from the target instance and attempt to find\n      // root boundaries that match that of our current \"rootContainer\".\n      // If we find that \"rootContainer\", we find the parent fiber\n      // sub-tree for that root and make that our ancestor instance.\n      let node = targetInst;\n\n      mainLoop: while (true) {\n        if (node === null) {\n          return;\n        }\n\n        const nodeTag = node.tag;\n\n        if (nodeTag === HostRoot || nodeTag === HostPortal) {\n          let container = node.stateNode.containerInfo;\n\n          if (isMatchingRootContainer(container, targetContainerNode)) {\n            break;\n          }\n\n          if (nodeTag === HostPortal) {\n            // The target is a portal, but it's not the rootContainer we're looking for.\n            // Normally portals handle their own events all the way down to the root.\n            // So we should be able to stop now. However, we don't know if this portal\n            // was part of *our* root.\n            let grandNode = node.return;\n\n            while (grandNode !== null) {\n              const grandTag = grandNode.tag;\n\n              if (grandTag === HostRoot || grandTag === HostPortal) {\n                const grandContainer = grandNode.stateNode.containerInfo;\n\n                if (isMatchingRootContainer(grandContainer, targetContainerNode)) {\n                  // This is the rootContainer we're looking for and we found it as\n                  // a parent of the Portal. That means we can ignore it because the\n                  // Portal will bubble through to us.\n                  return;\n                }\n              }\n\n              grandNode = grandNode.return;\n            }\n          } // Now we need to find it's corresponding host fiber in the other\n          // tree. To do this we can use getClosestInstanceFromNode, but we\n          // need to validate that the fiber is a host instance, otherwise\n          // we need to traverse up through the DOM till we find the correct\n          // node that is from the other tree.\n\n\n          while (container !== null) {\n            const parentNode = getClosestInstanceFromNode(container);\n\n            if (parentNode === null) {\n              return;\n            }\n\n            const parentTag = parentNode.tag;\n\n            if (parentTag === HostComponent || parentTag === HostText || parentTag === HostHoistable || parentTag === HostSingleton) {\n              node = ancestorInst = parentNode;\n              continue mainLoop;\n            }\n\n            container = container.parentNode;\n          }\n        }\n\n        node = node.return;\n      }\n    }\n  }\n\n  batchedUpdates(() => dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst));\n}\n\nfunction createDispatchListener(instance, listener, currentTarget) {\n  return {\n    instance,\n    listener,\n    currentTarget\n  };\n}\n\nfunction accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {\n  const captureName = reactName !== null ? reactName + 'Capture' : null;\n  const reactEventName = inCapturePhase ? captureName : reactName;\n  let listeners = [];\n  let instance = targetFiber;\n  let lastHostComponent = null; // Accumulate all instances and listeners via the target -> root path.\n\n  while (instance !== null) {\n    const _instance = instance,\n          stateNode = _instance.stateNode,\n          tag = _instance.tag; // Handle listeners that are on HostComponents (i.e. <div>)\n\n    if ((tag === HostComponent || tag === HostHoistable || tag === HostSingleton) && stateNode !== null) {\n      lastHostComponent = stateNode; // createEventHandle listeners\n\n\n      if (reactEventName !== null) {\n        const listener = getListener(instance, reactEventName);\n\n        if (listener != null) {\n          listeners.push(createDispatchListener(instance, listener, lastHostComponent));\n        }\n      }\n    } // If we are only accumulating events for the target, then we don't\n    // continue to propagate through the React fiber tree to find other\n    // listeners.\n\n\n    if (accumulateTargetOnly) {\n      break;\n    } // If we are processing the onBeforeBlur event, then we need to take\n\n    instance = instance.return;\n  }\n\n  return listeners;\n} // We should only use this function for:\n// - BeforeInputEventPlugin\n// - ChangeEventPlugin\n// - SelectEventPlugin\n// This is because we only process these plugins\n// in the bubble phase, so we need to accumulate two\n// phase event listeners (via emulation).\n\nfunction accumulateTwoPhaseListeners(targetFiber, reactName) {\n  const captureName = reactName + 'Capture';\n  const listeners = [];\n  let instance = targetFiber; // Accumulate all instances and listeners via the target -> root path.\n\n  while (instance !== null) {\n    const _instance2 = instance,\n          stateNode = _instance2.stateNode,\n          tag = _instance2.tag; // Handle listeners that are on HostComponents (i.e. <div>)\n\n    if ((tag === HostComponent || tag === HostHoistable || tag === HostSingleton) && stateNode !== null) {\n      const currentTarget = stateNode;\n      const captureListener = getListener(instance, captureName);\n\n      if (captureListener != null) {\n        listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));\n      }\n\n      const bubbleListener = getListener(instance, reactName);\n\n      if (bubbleListener != null) {\n        listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));\n      }\n    }\n\n    instance = instance.return;\n  }\n\n  return listeners;\n}\n\nfunction getParent(inst) {\n  if (inst === null) {\n    return null;\n  }\n\n  do {\n    // $FlowFixMe[incompatible-use] found when upgrading Flow\n    inst = inst.return; // TODO: If this is a HostRoot we might want to bail out.\n    // That is depending on if we want nested subtrees (layers) to bubble\n    // events to their parent. We could also go through parentNode on the\n    // host node but that wouldn't work for React Native and doesn't let us\n    // do the portal feature.\n  } while (inst && inst.tag !== HostComponent && inst.tag !== HostSingleton);\n\n  if (inst) {\n    return inst;\n  }\n\n  return null;\n}\n/**\n * Return the lowest common ancestor of A and B, or null if they are in\n * different trees.\n */\n\n\nfunction getLowestCommonAncestor(instA, instB) {\n  let nodeA = instA;\n  let nodeB = instB;\n  let depthA = 0;\n\n  for (let tempA = nodeA; tempA; tempA = getParent(tempA)) {\n    depthA++;\n  }\n\n  let depthB = 0;\n\n  for (let tempB = nodeB; tempB; tempB = getParent(tempB)) {\n    depthB++;\n  } // If A is deeper, crawl up.\n\n\n  while (depthA - depthB > 0) {\n    nodeA = getParent(nodeA);\n    depthA--;\n  } // If B is deeper, crawl up.\n\n\n  while (depthB - depthA > 0) {\n    nodeB = getParent(nodeB);\n    depthB--;\n  } // Walk in lockstep until we find a match.\n\n\n  let depth = depthA;\n\n  while (depth--) {\n    if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {\n      return nodeA;\n    }\n\n    nodeA = getParent(nodeA);\n    nodeB = getParent(nodeB);\n  }\n\n  return null;\n}\n\nfunction accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {\n  const registrationName = event._reactName;\n  const listeners = [];\n  let instance = target;\n\n  while (instance !== null) {\n    if (instance === common) {\n      break;\n    }\n\n    const _instance3 = instance,\n          alternate = _instance3.alternate,\n          stateNode = _instance3.stateNode,\n          tag = _instance3.tag;\n\n    if (alternate !== null && alternate === common) {\n      break;\n    }\n\n    if ((tag === HostComponent || tag === HostHoistable || tag === HostSingleton) && stateNode !== null) {\n      const currentTarget = stateNode;\n\n      if (inCapturePhase) {\n        const captureListener = getListener(instance, registrationName);\n\n        if (captureListener != null) {\n          listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));\n        }\n      } else if (!inCapturePhase) {\n        const bubbleListener = getListener(instance, registrationName);\n\n        if (bubbleListener != null) {\n          listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));\n        }\n      }\n    }\n\n    instance = instance.return;\n  }\n\n  if (listeners.length !== 0) {\n    dispatchQueue.push({\n      event,\n      listeners\n    });\n  }\n} // We should only use this function for:\n// - EnterLeaveEventPlugin\n// This is because we only process this plugin\n// in the bubble phase, so we need to accumulate two\n// phase event listeners.\n\n\nfunction accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {\n  const common = from && to ? getLowestCommonAncestor(from, to) : null;\n\n  if (from !== null) {\n    accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);\n  }\n\n  if (to !== null && enterEvent !== null) {\n    accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);\n  }\n}\nfunction getListenerSetKey(domEventName, capture) {\n  return domEventName + \"__\" + (capture ? 'capture' : 'bubble');\n}\n\n// It also can turn \\u0000 into \\uFFFD inside attributes.\n// https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream\n// If we have a mismatch, it might be caused by that.\n// We will still patch up in this case but not fire the warning.\n\n\nconst NORMALIZE_NEWLINES_REGEX = /\\r\\n?/g;\nconst NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\\u0000|\\uFFFD/g;\n\nfunction normalizeMarkupForTextOrAttribute(markup) {\n\n  const markupString = typeof markup === 'string' ? markup : '' + markup;\n  return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');\n}\n\nfunction checkForUnmatchedText(serverText, clientText) {\n  const normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);\n  const normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);\n\n  if (normalizedServerText === normalizedClientText) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction noop$1() {}\n\nfunction trapClickOnNonInteractiveElement(node) {\n  // Mobile Safari does not fire properly bubble click events on\n  // non-interactive elements, which means delegated click listeners do not\n  // fire. The workaround for this bug involves attaching an empty click\n  // listener on the target node.\n  // https://www.quirksmode.org/blog/archives/2010/09/click_event_del.html\n  // Just set it using the onclick property so that we don't have to manage any\n  // bookkeeping for it. Not sure if we need to clear it when the listener is\n  // removed.\n  // TODO: Only do this for the relevant Safaris maybe?\n  node.onclick = noop$1;\n}\nconst xlinkNamespace = 'http://www.w3.org/1999/xlink';\nconst xmlNamespace = 'http://www.w3.org/XML/1998/namespace';\n\nfunction setProp(domElement, tag, key, value, props, prevValue) {\n  switch (key) {\n    case 'children':\n      {\n        if (typeof value === 'string') {\n          // textContent on a <textarea> will cause the placeholder to not\n          // show within the <textarea> until it has been focused and blurred again.\n          // https://github.com/facebook/react/issues/6731#issuecomment-254874553\n\n\n          const canSetTextContent = tag !== 'body' && (tag !== 'textarea' || value !== '');\n\n          if (canSetTextContent) {\n            setTextContent(domElement, value);\n          }\n        } else if (typeof value === 'number' || enableBigIntSupport ) {\n\n          const canSetTextContent = tag !== 'body';\n\n          if (canSetTextContent) {\n            // $FlowFixMe[unsafe-addition] Flow doesn't want us to use `+` operator with string and bigint\n            setTextContent(domElement, '' + value);\n          }\n        }\n\n        break;\n      }\n    // These are very common props and therefore are in the beginning of the switch.\n    // TODO: aria-label is a very common prop but allows booleans so is not like the others\n    // but should ideally go in this list too.\n\n    case 'className':\n      setValueForKnownAttribute(domElement, 'class', value);\n      break;\n\n    case 'tabIndex':\n      // This has to be case sensitive in SVG.\n      setValueForKnownAttribute(domElement, 'tabindex', value);\n      break;\n\n    case 'dir':\n    case 'role':\n    case 'viewBox':\n    case 'width':\n    case 'height':\n      {\n        setValueForKnownAttribute(domElement, key, value);\n        break;\n      }\n\n    case 'style':\n      {\n        setValueForStyles(domElement, value, prevValue);\n        break;\n      }\n    // These attributes accept URLs. These must not allow javascript: URLS.\n\n    case 'src':\n    case 'href':\n      {\n\n        if (value == null || typeof value === 'function' || typeof value === 'symbol' || typeof value === 'boolean') {\n          domElement.removeAttribute(key);\n          break;\n        } // `setAttribute` with objects becomes only `[object]` in IE8/9,\n\n        const sanitizedValue = sanitizeURL('' + value);\n        domElement.setAttribute(key, sanitizedValue);\n        break;\n      }\n\n    case 'action':\n    case 'formAction':\n      {\n\n        if (typeof value === 'function') {\n          // Set a javascript URL that doesn't do anything. We don't expect this to be invoked\n          // because we'll preventDefault, but it can happen if a form is manually submitted or\n          // if someone calls stopPropagation before React gets the event.\n          // If CSP is used to block javascript: URLs that's fine too. It just won't show this\n          // error message but the URL will be logged.\n          domElement.setAttribute(key, // eslint-disable-next-line no-script-url\n          \"javascript:throw new Error('\" + 'A React form was unexpectedly submitted. If you called form.submit() manually, ' + \"consider using form.requestSubmit() instead. If you\\\\'re trying to use \" + 'event.stopPropagation() in a submit event handler, consider also calling ' + 'event.preventDefault().' + \"')\");\n          break;\n        } else if (typeof prevValue === 'function') {\n          // When we're switching off a Server Action that was originally hydrated.\n          // The server control these fields during SSR that are now trailing.\n          // The regular diffing doesn't apply since we compare against the previous props.\n          // Instead, we need to force them to be set to whatever they should be now.\n          // This would be a lot cleaner if we did this whole fork in the per-tag approach.\n          if (key === 'formAction') {\n            if (tag !== 'input') {\n              // Setting the name here isn't completely safe for inputs if this is switching\n              // to become a radio button. In that case we let the tag based override take\n              // control.\n              setProp(domElement, tag, 'name', props.name, props, null);\n            }\n\n            setProp(domElement, tag, 'formEncType', props.formEncType, props, null);\n            setProp(domElement, tag, 'formMethod', props.formMethod, props, null);\n            setProp(domElement, tag, 'formTarget', props.formTarget, props, null);\n          } else {\n            setProp(domElement, tag, 'encType', props.encType, props, null);\n            setProp(domElement, tag, 'method', props.method, props, null);\n            setProp(domElement, tag, 'target', props.target, props, null);\n          }\n        }\n\n        if (value == null || typeof value === 'symbol' || typeof value === 'boolean') {\n          domElement.removeAttribute(key);\n          break;\n        } // `setAttribute` with objects becomes only `[object]` in IE8/9,\n\n        const sanitizedValue = sanitizeURL('' + value);\n        domElement.setAttribute(key, sanitizedValue);\n        break;\n      }\n\n    case 'onClick':\n      {\n        // TODO: This cast may not be sound for SVG, MathML or custom elements.\n        if (value != null) {\n\n          trapClickOnNonInteractiveElement(domElement);\n        }\n\n        break;\n      }\n\n    case 'onScroll':\n      {\n        if (value != null) {\n\n          listenToNonDelegatedEvent('scroll', domElement);\n        }\n\n        break;\n      }\n\n    case 'onScrollEnd':\n      {\n        if (value != null) {\n\n          listenToNonDelegatedEvent('scrollend', domElement);\n        }\n\n        break;\n      }\n\n    case 'dangerouslySetInnerHTML':\n      {\n        if (value != null) {\n          if (typeof value !== 'object' || !('__html' in value)) {\n            throw Error(formatProdErrorMessage(61));\n          }\n\n          const nextHtml = value.__html;\n\n          if (nextHtml != null) {\n            if (props.children != null) {\n              throw Error(formatProdErrorMessage(60));\n            }\n\n            {\n              setInnerHTML$1(domElement, nextHtml);\n            }\n          }\n        }\n\n        break;\n      }\n    // Note: `option.selected` is not updated if `select.multiple` is\n    // disabled with `removeAttribute`. We have special logic for handling this.\n\n    case 'multiple':\n      {\n        domElement.multiple = value && typeof value !== 'function' && typeof value !== 'symbol';\n        break;\n      }\n\n    case 'muted':\n      {\n        domElement.muted = value && typeof value !== 'function' && typeof value !== 'symbol';\n        break;\n      }\n\n    case 'suppressContentEditableWarning':\n    case 'suppressHydrationWarning':\n    case 'defaultValue': // Reserved\n\n    case 'defaultChecked':\n    case 'innerHTML':\n    case 'ref':\n      {\n        // TODO: `ref` is pretty common, should we move it up?\n        // Noop\n        break;\n      }\n\n    case 'autoFocus':\n      {\n        // We polyfill it separately on the client during commit.\n        // We could have excluded it in the property list instead of\n        // adding a special case here, but then it wouldn't be emitted\n        // on server rendering (but we *do* want to emit it in SSR).\n        break;\n      }\n\n    case 'xlinkHref':\n      {\n        if (value == null || typeof value === 'function' || typeof value === 'boolean' || typeof value === 'symbol') {\n          domElement.removeAttribute('xlink:href');\n          break;\n        } // `setAttribute` with objects becomes only `[object]` in IE8/9,\n\n        const sanitizedValue = sanitizeURL('' + value);\n        domElement.setAttributeNS(xlinkNamespace, 'xlink:href', sanitizedValue);\n        break;\n      }\n\n    case 'contentEditable':\n    case 'spellCheck':\n    case 'draggable':\n    case 'value':\n    case 'autoReverse':\n    case 'externalResourcesRequired':\n    case 'focusable':\n    case 'preserveAlpha':\n      {\n        // Booleanish String\n        // These are \"enumerated\" attributes that accept \"true\" and \"false\".\n        // In React, we let users pass `true` and `false` even though technically\n        // these aren't boolean attributes (they are coerced to strings).\n        // The SVG attributes are case-sensitive. Since the HTML attributes are\n        // insensitive they also work even though we canonically use lower case.\n        if (value != null && typeof value !== 'function' && typeof value !== 'symbol') {\n\n          domElement.setAttribute(key, '' + value);\n        } else {\n          domElement.removeAttribute(key);\n        }\n\n        break;\n      }\n    // Boolean\n\n    case 'inert':\n      {\n        setValueForAttribute(domElement, key, value);\n        break;\n      }\n\n    // fallthrough for new boolean props without the flag on\n\n    case 'allowFullScreen':\n    case 'async':\n    case 'autoPlay':\n    case 'controls':\n    case 'default':\n    case 'defer':\n    case 'disabled':\n    case 'disablePictureInPicture':\n    case 'disableRemotePlayback':\n    case 'formNoValidate':\n    case 'hidden':\n    case 'loop':\n    case 'noModule':\n    case 'noValidate':\n    case 'open':\n    case 'playsInline':\n    case 'readOnly':\n    case 'required':\n    case 'reversed':\n    case 'scoped':\n    case 'seamless':\n    case 'itemScope':\n      {\n        if (value && typeof value !== 'function' && typeof value !== 'symbol') {\n          domElement.setAttribute(key, '');\n        } else {\n          domElement.removeAttribute(key);\n        }\n\n        break;\n      }\n    // Overloaded Boolean\n\n    case 'capture':\n    case 'download':\n      {\n        // An attribute that can be used as a flag as well as with a value.\n        // When true, it should be present (set either to an empty string or its name).\n        // When false, it should be omitted.\n        // For any other value, should be present with that value.\n        if (value === true) {\n          domElement.setAttribute(key, '');\n        } else if (value !== false && value != null && typeof value !== 'function' && typeof value !== 'symbol') {\n\n          domElement.setAttribute(key, value);\n        } else {\n          domElement.removeAttribute(key);\n        }\n\n        break;\n      }\n\n    case 'cols':\n    case 'rows':\n    case 'size':\n    case 'span':\n      {\n        // These are HTML attributes that must be positive numbers.\n        if (value != null && typeof value !== 'function' && typeof value !== 'symbol' && !isNaN(value) && value >= 1) {\n\n          domElement.setAttribute(key, value);\n        } else {\n          domElement.removeAttribute(key);\n        }\n\n        break;\n      }\n\n    case 'rowSpan':\n    case 'start':\n      {\n        // These are HTML attributes that must be numbers.\n        if (value != null && typeof value !== 'function' && typeof value !== 'symbol' && !isNaN(value)) {\n\n          domElement.setAttribute(key, value);\n        } else {\n          domElement.removeAttribute(key);\n        }\n\n        break;\n      }\n\n    case 'xlinkActuate':\n      setValueForNamespacedAttribute(domElement, xlinkNamespace, 'xlink:actuate', value);\n      break;\n\n    case 'xlinkArcrole':\n      setValueForNamespacedAttribute(domElement, xlinkNamespace, 'xlink:arcrole', value);\n      break;\n\n    case 'xlinkRole':\n      setValueForNamespacedAttribute(domElement, xlinkNamespace, 'xlink:role', value);\n      break;\n\n    case 'xlinkShow':\n      setValueForNamespacedAttribute(domElement, xlinkNamespace, 'xlink:show', value);\n      break;\n\n    case 'xlinkTitle':\n      setValueForNamespacedAttribute(domElement, xlinkNamespace, 'xlink:title', value);\n      break;\n\n    case 'xlinkType':\n      setValueForNamespacedAttribute(domElement, xlinkNamespace, 'xlink:type', value);\n      break;\n\n    case 'xmlBase':\n      setValueForNamespacedAttribute(domElement, xmlNamespace, 'xml:base', value);\n      break;\n\n    case 'xmlLang':\n      setValueForNamespacedAttribute(domElement, xmlNamespace, 'xml:lang', value);\n      break;\n\n    case 'xmlSpace':\n      setValueForNamespacedAttribute(domElement, xmlNamespace, 'xml:space', value);\n      break;\n    // Properties that should not be allowed on custom elements.\n\n    case 'is':\n      {\n        // passed it to createElement. We don't also need the attribute.\n        // However, our tests currently query for it so it's plausible someone\n        // else does too so it's break.\n\n\n        setValueForAttribute(domElement, 'is', value);\n        break;\n      }\n\n    case 'innerText':\n    case 'textContent':\n\n    // Fall through\n\n    default:\n      {\n        if (key.length > 2 && (key[0] === 'o' || key[0] === 'O') && (key[1] === 'n' || key[1] === 'N')) ; else {\n          const attributeName = getAttributeAlias(key);\n          setValueForAttribute(domElement, attributeName, value);\n        }\n      }\n  }\n}\n\nfunction setPropOnCustomElement(domElement, tag, key, value, props, prevValue) {\n  switch (key) {\n    case 'style':\n      {\n        setValueForStyles(domElement, value, prevValue);\n        break;\n      }\n\n    case 'dangerouslySetInnerHTML':\n      {\n        if (value != null) {\n          if (typeof value !== 'object' || !('__html' in value)) {\n            throw Error(formatProdErrorMessage(61));\n          }\n\n          const nextHtml = value.__html;\n\n          if (nextHtml != null) {\n            if (props.children != null) {\n              throw Error(formatProdErrorMessage(60));\n            }\n\n            {\n              setInnerHTML$1(domElement, nextHtml);\n            }\n          }\n        }\n\n        break;\n      }\n\n    case 'children':\n      {\n        if (typeof value === 'string') {\n          setTextContent(domElement, value);\n        } else if (typeof value === 'number' || enableBigIntSupport ) {\n          // $FlowFixMe[unsafe-addition] Flow doesn't want us to use `+` operator with string and bigint\n          setTextContent(domElement, '' + value);\n        }\n\n        break;\n      }\n\n    case 'onScroll':\n      {\n        if (value != null) {\n\n          listenToNonDelegatedEvent('scroll', domElement);\n        }\n\n        break;\n      }\n\n    case 'onScrollEnd':\n      {\n        if (value != null) {\n\n          listenToNonDelegatedEvent('scrollend', domElement);\n        }\n\n        break;\n      }\n\n    case 'onClick':\n      {\n        // TODO: This cast may not be sound for SVG, MathML or custom elements.\n        if (value != null) {\n\n          trapClickOnNonInteractiveElement(domElement);\n        }\n\n        break;\n      }\n\n    case 'suppressContentEditableWarning':\n    case 'suppressHydrationWarning':\n    case 'innerHTML':\n    case 'ref':\n      {\n        // Noop\n        break;\n      }\n\n    case 'innerText': // Properties\n\n    case 'textContent':\n\n    // Fall through\n\n    default:\n      {\n        if (registrationNameDependencies.hasOwnProperty(key)) ; else {\n          {\n            if (typeof value === 'boolean') {\n              // Special case before the new flag is on\n              value = '' + value;\n            }\n\n            setValueForAttribute(domElement, key, value);\n          }\n        }\n      }\n  }\n}\n\nfunction setInitialProperties(domElement, tag, props) {\n\n\n  switch (tag) {\n    case 'div':\n    case 'span':\n    case 'svg':\n    case 'path':\n    case 'a':\n    case 'g':\n    case 'p':\n    case 'li':\n      {\n        // Fast track the most common tag types\n        break;\n      }\n\n    case 'input':\n      {\n        // listeners still fire for the invalid event.\n\n\n        listenToNonDelegatedEvent('invalid', domElement);\n        let name = null;\n        let type = null;\n        let value = null;\n        let defaultValue = null;\n        let checked = null;\n        let defaultChecked = null;\n\n        for (const propKey in props) {\n          if (!props.hasOwnProperty(propKey)) {\n            continue;\n          }\n\n          const propValue = props[propKey];\n\n          if (propValue == null) {\n            continue;\n          }\n\n          switch (propKey) {\n            case 'name':\n              {\n                name = propValue;\n                break;\n              }\n\n            case 'type':\n              {\n                type = propValue;\n                break;\n              }\n\n            case 'checked':\n              {\n                checked = propValue;\n                break;\n              }\n\n            case 'defaultChecked':\n              {\n                defaultChecked = propValue;\n                break;\n              }\n\n            case 'value':\n              {\n                value = propValue;\n                break;\n              }\n\n            case 'defaultValue':\n              {\n                defaultValue = propValue;\n                break;\n              }\n\n            case 'children':\n            case 'dangerouslySetInnerHTML':\n              {\n                if (propValue != null) {\n                  throw Error(formatProdErrorMessage(137, tag));\n                }\n\n                break;\n              }\n\n            default:\n              {\n                setProp(domElement, tag, propKey, propValue, props, null);\n              }\n          }\n        } // TODO: Make sure we check if this is still unmounted or do any clean\n        initInput(domElement, value, defaultValue, checked, defaultChecked, type, name, false);\n        track(domElement);\n        return;\n      }\n\n    case 'select':\n      {\n        // listeners still fire for the invalid event.\n\n\n        listenToNonDelegatedEvent('invalid', domElement);\n        let value = null;\n        let defaultValue = null;\n        let multiple = null;\n\n        for (const propKey in props) {\n          if (!props.hasOwnProperty(propKey)) {\n            continue;\n          }\n\n          const propValue = props[propKey];\n\n          if (propValue == null) {\n            continue;\n          }\n\n          switch (propKey) {\n            case 'value':\n              {\n                value = propValue; // This is handled by initSelect below.\n\n                break;\n              }\n\n            case 'defaultValue':\n              {\n                defaultValue = propValue; // This is handled by initSelect below.\n\n                break;\n              }\n\n            case 'multiple':\n              {\n                multiple = propValue; // TODO: We don't actually have to fall through here because we set it\n                // in initSelect anyway. We can remove the special case in setProp.\n              }\n            // Fallthrough\n\n            default:\n              {\n                setProp(domElement, tag, propKey, propValue, props, null);\n              }\n          }\n        }\n        initSelect(domElement, value, defaultValue, multiple);\n        return;\n      }\n\n    case 'textarea':\n      {\n        // listeners still fire for the invalid event.\n\n\n        listenToNonDelegatedEvent('invalid', domElement);\n        let value = null;\n        let defaultValue = null;\n        let children = null;\n\n        for (const propKey in props) {\n          if (!props.hasOwnProperty(propKey)) {\n            continue;\n          }\n\n          const propValue = props[propKey];\n\n          if (propValue == null) {\n            continue;\n          }\n\n          switch (propKey) {\n            case 'value':\n              {\n                value = propValue; // This is handled by initTextarea below.\n\n                break;\n              }\n\n            case 'defaultValue':\n              {\n                defaultValue = propValue;\n                break;\n              }\n\n            case 'children':\n              {\n                children = propValue; // Handled by initTextarea above.\n\n                break;\n              }\n\n            case 'dangerouslySetInnerHTML':\n              {\n                if (propValue != null) {\n                  // TODO: Do we really need a special error message for this. It's also pretty blunt.\n                  throw Error(formatProdErrorMessage(91));\n                }\n\n                break;\n              }\n\n            default:\n              {\n                setProp(domElement, tag, propKey, propValue, props, null);\n              }\n          }\n        } // TODO: Make sure we check if this is still unmounted or do any clean\n        initTextarea(domElement, value, defaultValue, children);\n        track(domElement);\n        return;\n      }\n\n    case 'option':\n      {\n\n        for (const propKey in props) {\n          if (!props.hasOwnProperty(propKey)) {\n            continue;\n          }\n\n          const propValue = props[propKey];\n\n          if (propValue == null) {\n            continue;\n          }\n\n          switch (propKey) {\n            case 'selected':\n              {\n                // TODO: Remove support for selected on option.\n                domElement.selected = propValue && typeof propValue !== 'function' && typeof propValue !== 'symbol';\n                break;\n              }\n\n            default:\n              {\n                setProp(domElement, tag, propKey, propValue, props, null);\n              }\n          }\n        }\n\n        return;\n      }\n\n    case 'dialog':\n      {\n        listenToNonDelegatedEvent('cancel', domElement);\n        listenToNonDelegatedEvent('close', domElement);\n        break;\n      }\n\n    case 'iframe':\n    case 'object':\n      {\n        // We listen to this event in case to ensure emulated bubble\n        // listeners still fire for the load event.\n        listenToNonDelegatedEvent('load', domElement);\n        break;\n      }\n\n    case 'video':\n    case 'audio':\n      {\n        // We listen to these events in case to ensure emulated bubble\n        // listeners still fire for all the media events.\n        for (let i = 0; i < mediaEventTypes.length; i++) {\n          listenToNonDelegatedEvent(mediaEventTypes[i], domElement);\n        }\n\n        break;\n      }\n\n    case 'image':\n      {\n        // We listen to these events in case to ensure emulated bubble\n        // listeners still fire for error and load events.\n        listenToNonDelegatedEvent('error', domElement);\n        listenToNonDelegatedEvent('load', domElement);\n        break;\n      }\n\n    case 'details':\n      {\n        // We listen to this event in case to ensure emulated bubble\n        // listeners still fire for the toggle event.\n        listenToNonDelegatedEvent('toggle', domElement);\n        break;\n      }\n\n    case 'embed':\n    case 'source':\n    case 'img':\n    case 'link':\n      {\n        // These are void elements that also need delegated events.\n        listenToNonDelegatedEvent('error', domElement);\n        listenToNonDelegatedEvent('load', domElement); // We fallthrough to the return of the void elements\n      }\n\n    case 'area':\n    case 'base':\n    case 'br':\n    case 'col':\n    case 'hr':\n    case 'keygen':\n    case 'meta':\n    case 'param':\n    case 'track':\n    case 'wbr':\n    case 'menuitem':\n      {\n        // Void elements\n        for (const propKey in props) {\n          if (!props.hasOwnProperty(propKey)) {\n            continue;\n          }\n\n          const propValue = props[propKey];\n\n          if (propValue == null) {\n            continue;\n          }\n\n          switch (propKey) {\n            case 'children':\n            case 'dangerouslySetInnerHTML':\n              {\n                // TODO: Can we make this a DEV warning to avoid this deny list?\n                throw Error(formatProdErrorMessage(137, tag));\n              }\n            // defaultChecked and defaultValue are ignored by setProp\n\n            default:\n              {\n                setProp(domElement, tag, propKey, propValue, props, null);\n              }\n          }\n        }\n\n        return;\n      }\n\n    default:\n      {\n        if (isCustomElement(tag)) {\n          for (const propKey in props) {\n            if (!props.hasOwnProperty(propKey)) {\n              continue;\n            }\n\n            const propValue = props[propKey];\n\n            if (propValue == null) {\n              continue;\n            }\n\n            setPropOnCustomElement(domElement, tag, propKey, propValue, props, null);\n          }\n\n          return;\n        }\n      }\n  }\n\n  for (const propKey in props) {\n    if (!props.hasOwnProperty(propKey)) {\n      continue;\n    }\n\n    const propValue = props[propKey];\n\n    if (propValue == null) {\n      continue;\n    }\n\n    setProp(domElement, tag, propKey, propValue, props, null);\n  }\n}\nfunction updateProperties(domElement, tag, lastProps, nextProps) {\n\n  switch (tag) {\n    case 'div':\n    case 'span':\n    case 'svg':\n    case 'path':\n    case 'a':\n    case 'g':\n    case 'p':\n    case 'li':\n      {\n        // Fast track the most common tag types\n        break;\n      }\n\n    case 'input':\n      {\n        let name = null;\n        let type = null;\n        let value = null;\n        let defaultValue = null;\n        let lastDefaultValue = null;\n        let checked = null;\n        let defaultChecked = null;\n\n        for (const propKey in lastProps) {\n          const lastProp = lastProps[propKey];\n\n          if (lastProps.hasOwnProperty(propKey) && lastProp != null) {\n            switch (propKey) {\n              case 'checked':\n                {\n                  break;\n                }\n\n              case 'value':\n                {\n                  // This is handled by updateWrapper below.\n                  break;\n                }\n\n              case 'defaultValue':\n                {\n                  lastDefaultValue = lastProp;\n                }\n              // defaultChecked and defaultValue are ignored by setProp\n              // Fallthrough\n\n              default:\n                {\n                  if (!nextProps.hasOwnProperty(propKey)) setProp(domElement, tag, propKey, null, nextProps, lastProp);\n                }\n            }\n          }\n        }\n\n        for (const propKey in nextProps) {\n          const nextProp = nextProps[propKey];\n          const lastProp = lastProps[propKey];\n\n          if (nextProps.hasOwnProperty(propKey) && (nextProp != null || lastProp != null)) {\n            switch (propKey) {\n              case 'type':\n                {\n                  type = nextProp;\n                  break;\n                }\n\n              case 'name':\n                {\n                  name = nextProp;\n                  break;\n                }\n\n              case 'checked':\n                {\n                  checked = nextProp;\n                  break;\n                }\n\n              case 'defaultChecked':\n                {\n                  defaultChecked = nextProp;\n                  break;\n                }\n\n              case 'value':\n                {\n                  value = nextProp;\n                  break;\n                }\n\n              case 'defaultValue':\n                {\n                  defaultValue = nextProp;\n                  break;\n                }\n\n              case 'children':\n              case 'dangerouslySetInnerHTML':\n                {\n                  if (nextProp != null) {\n                    throw Error(formatProdErrorMessage(137, tag));\n                  }\n\n                  break;\n                }\n\n              default:\n                {\n                  if (nextProp !== lastProp) setProp(domElement, tag, propKey, nextProp, nextProps, lastProp);\n                }\n            }\n          }\n        }\n        // happen after updating the rest of props. Otherwise HTML5 input validations\n        // raise warnings and prevent the new value from being assigned.\n\n\n        updateInput(domElement, value, defaultValue, lastDefaultValue, checked, defaultChecked, type, name);\n        return;\n      }\n\n    case 'select':\n      {\n        let value = null;\n        let defaultValue = null;\n        let multiple = null;\n        let wasMultiple = null;\n\n        for (const propKey in lastProps) {\n          const lastProp = lastProps[propKey];\n\n          if (lastProps.hasOwnProperty(propKey) && lastProp != null) {\n            switch (propKey) {\n              case 'value':\n                {\n                  // This is handled by updateWrapper below.\n                  break;\n                }\n              // defaultValue are ignored by setProp\n\n              case 'multiple':\n                {\n                  wasMultiple = lastProp; // TODO: Move special case in here from setProp.\n                }\n              // Fallthrough\n\n              default:\n                {\n                  if (!nextProps.hasOwnProperty(propKey)) setProp(domElement, tag, propKey, null, nextProps, lastProp);\n                }\n            }\n          }\n        }\n\n        for (const propKey in nextProps) {\n          const nextProp = nextProps[propKey];\n          const lastProp = lastProps[propKey];\n\n          if (nextProps.hasOwnProperty(propKey) && (nextProp != null || lastProp != null)) {\n            switch (propKey) {\n              case 'value':\n                {\n                  value = nextProp; // This is handled by updateSelect below.\n\n                  break;\n                }\n\n              case 'defaultValue':\n                {\n                  defaultValue = nextProp;\n                  break;\n                }\n\n              case 'multiple':\n                {\n                  multiple = nextProp; // TODO: Just move the special case in here from setProp.\n                }\n              // Fallthrough\n\n              default:\n                {\n                  if (nextProp !== lastProp) setProp(domElement, tag, propKey, nextProp, nextProps, lastProp);\n                }\n            }\n          }\n        } // <select> value update needs to occur after <option> children\n        // reconciliation\n\n\n        updateSelect(domElement, value, defaultValue, multiple, wasMultiple);\n        return;\n      }\n\n    case 'textarea':\n      {\n        let value = null;\n        let defaultValue = null;\n\n        for (const propKey in lastProps) {\n          const lastProp = lastProps[propKey];\n\n          if (lastProps.hasOwnProperty(propKey) && lastProp != null && !nextProps.hasOwnProperty(propKey)) {\n            switch (propKey) {\n              case 'value':\n                {\n                  // This is handled by updateTextarea below.\n                  break;\n                }\n\n              case 'children':\n                {\n                  // TODO: This doesn't actually do anything if it updates.\n                  break;\n                }\n              // defaultValue is ignored by setProp\n\n              default:\n                {\n                  setProp(domElement, tag, propKey, null, nextProps, lastProp);\n                }\n            }\n          }\n        }\n\n        for (const propKey in nextProps) {\n          const nextProp = nextProps[propKey];\n          const lastProp = lastProps[propKey];\n\n          if (nextProps.hasOwnProperty(propKey) && (nextProp != null || lastProp != null)) {\n            switch (propKey) {\n              case 'value':\n                {\n                  value = nextProp; // This is handled by updateTextarea below.\n\n                  break;\n                }\n\n              case 'defaultValue':\n                {\n                  defaultValue = nextProp;\n                  break;\n                }\n\n              case 'children':\n                {\n                  // TODO: This doesn't actually do anything if it updates.\n                  break;\n                }\n\n              case 'dangerouslySetInnerHTML':\n                {\n                  if (nextProp != null) {\n                    // TODO: Do we really need a special error message for this. It's also pretty blunt.\n                    throw Error(formatProdErrorMessage(91));\n                  }\n\n                  break;\n                }\n\n              default:\n                {\n                  if (nextProp !== lastProp) setProp(domElement, tag, propKey, nextProp, nextProps, lastProp);\n                }\n            }\n          }\n        }\n\n        updateTextarea(domElement, value, defaultValue);\n        return;\n      }\n\n    case 'option':\n      {\n        for (const propKey in lastProps) {\n          const lastProp = lastProps[propKey];\n\n          if (lastProps.hasOwnProperty(propKey) && lastProp != null && !nextProps.hasOwnProperty(propKey)) {\n            switch (propKey) {\n              case 'selected':\n                {\n                  // TODO: Remove support for selected on option.\n                  domElement.selected = false;\n                  break;\n                }\n\n              default:\n                {\n                  setProp(domElement, tag, propKey, null, nextProps, lastProp);\n                }\n            }\n          }\n        }\n\n        for (const propKey in nextProps) {\n          const nextProp = nextProps[propKey];\n          const lastProp = lastProps[propKey];\n\n          if (nextProps.hasOwnProperty(propKey) && nextProp !== lastProp && (nextProp != null || lastProp != null)) {\n            switch (propKey) {\n              case 'selected':\n                {\n                  // TODO: Remove support for selected on option.\n                  domElement.selected = nextProp && typeof nextProp !== 'function' && typeof nextProp !== 'symbol';\n                  break;\n                }\n\n              default:\n                {\n                  setProp(domElement, tag, propKey, nextProp, nextProps, lastProp);\n                }\n            }\n          }\n        }\n\n        return;\n      }\n\n    case 'img':\n    case 'link':\n    case 'area':\n    case 'base':\n    case 'br':\n    case 'col':\n    case 'embed':\n    case 'hr':\n    case 'keygen':\n    case 'meta':\n    case 'param':\n    case 'source':\n    case 'track':\n    case 'wbr':\n    case 'menuitem':\n      {\n        // Void elements\n        for (const propKey in lastProps) {\n          const lastProp = lastProps[propKey];\n\n          if (lastProps.hasOwnProperty(propKey) && lastProp != null && !nextProps.hasOwnProperty(propKey)) {\n            setProp(domElement, tag, propKey, null, nextProps, lastProp);\n          }\n        }\n\n        for (const propKey in nextProps) {\n          const nextProp = nextProps[propKey];\n          const lastProp = lastProps[propKey];\n\n          if (nextProps.hasOwnProperty(propKey) && nextProp !== lastProp && (nextProp != null || lastProp != null)) {\n            switch (propKey) {\n              case 'children':\n              case 'dangerouslySetInnerHTML':\n                {\n                  if (nextProp != null) {\n                    // TODO: Can we make this a DEV warning to avoid this deny list?\n                    throw Error(formatProdErrorMessage(137, tag));\n                  }\n\n                  break;\n                }\n              // defaultChecked and defaultValue are ignored by setProp\n\n              default:\n                {\n                  setProp(domElement, tag, propKey, nextProp, nextProps, lastProp);\n                }\n            }\n          }\n        }\n\n        return;\n      }\n\n    default:\n      {\n        if (isCustomElement(tag)) {\n          for (const propKey in lastProps) {\n            const lastProp = lastProps[propKey];\n\n            if (lastProps.hasOwnProperty(propKey) && lastProp != null && !nextProps.hasOwnProperty(propKey)) {\n              setPropOnCustomElement(domElement, tag, propKey, null, nextProps, lastProp);\n            }\n          }\n\n          for (const propKey in nextProps) {\n            const nextProp = nextProps[propKey];\n            const lastProp = lastProps[propKey];\n\n            if (nextProps.hasOwnProperty(propKey) && nextProp !== lastProp && (nextProp != null || lastProp != null)) {\n              setPropOnCustomElement(domElement, tag, propKey, nextProp, nextProps, lastProp);\n            }\n          }\n\n          return;\n        }\n      }\n  }\n\n  for (const propKey in lastProps) {\n    const lastProp = lastProps[propKey];\n\n    if (lastProps.hasOwnProperty(propKey) && lastProp != null && !nextProps.hasOwnProperty(propKey)) {\n      setProp(domElement, tag, propKey, null, nextProps, lastProp);\n    }\n  }\n\n  for (const propKey in nextProps) {\n    const nextProp = nextProps[propKey];\n    const lastProp = lastProps[propKey];\n\n    if (nextProps.hasOwnProperty(propKey) && nextProp !== lastProp && (nextProp != null || lastProp != null)) {\n      setProp(domElement, tag, propKey, nextProp, nextProps, lastProp);\n    }\n  }\n}\n\nfunction hydrateProperties(domElement, tag, props, hostContext) {\n\n\n  switch (tag) {\n    case 'dialog':\n      listenToNonDelegatedEvent('cancel', domElement);\n      listenToNonDelegatedEvent('close', domElement);\n      break;\n\n    case 'iframe':\n    case 'object':\n    case 'embed':\n      // We listen to this event in case to ensure emulated bubble\n      // listeners still fire for the load event.\n      listenToNonDelegatedEvent('load', domElement);\n      break;\n\n    case 'video':\n    case 'audio':\n      // We listen to these events in case to ensure emulated bubble\n      // listeners still fire for all the media events.\n      for (let i = 0; i < mediaEventTypes.length; i++) {\n        listenToNonDelegatedEvent(mediaEventTypes[i], domElement);\n      }\n\n      break;\n\n    case 'source':\n      // We listen to this event in case to ensure emulated bubble\n      // listeners still fire for the error event.\n      listenToNonDelegatedEvent('error', domElement);\n      break;\n\n    case 'img':\n    case 'image':\n    case 'link':\n      // We listen to these events in case to ensure emulated bubble\n      // listeners still fire for error and load events.\n      listenToNonDelegatedEvent('error', domElement);\n      listenToNonDelegatedEvent('load', domElement);\n      break;\n\n    case 'details':\n      // We listen to this event in case to ensure emulated bubble\n      // listeners still fire for the toggle event.\n      listenToNonDelegatedEvent('toggle', domElement);\n      break;\n\n    case 'input':\n      // listeners still fire for the invalid event.\n\n\n      listenToNonDelegatedEvent('invalid', domElement); // TODO: Make sure we check if this is still unmounted or do any clean\n      // post mount to force it to diverge from attributes. However, for\n      // option and select we don't quite do the same thing and select\n      // is not resilient to the DOM state changing so we don't do that here.\n      // TODO: Consider not doing this for input and textarea.\n\n      initInput(domElement, props.value, props.defaultValue, props.checked, props.defaultChecked, props.type, props.name, true);\n      track(domElement);\n      break;\n\n    case 'option':\n      break;\n\n    case 'select':\n      // listeners still fire for the invalid event.\n\n\n      listenToNonDelegatedEvent('invalid', domElement);\n      break;\n\n    case 'textarea':\n      // listeners still fire for the invalid event.\n\n\n      listenToNonDelegatedEvent('invalid', domElement); // TODO: Make sure we check if this is still unmounted or do any clean\n      initTextarea(domElement, props.value, props.defaultValue, props.children);\n      track(domElement);\n      break;\n  }\n\n  const children = props.children; // For text content children we compare against textContent. This\n  // might match additional HTML that is hidden when we read it using\n  // textContent. E.g. \"foo\" will match \"f<span>oo</span>\" but that still\n  // satisfies our requirement. Our requirement is not to produce perfect\n  // HTML and attributes. Ideally we should preserve structure but it's\n  // ok not to if the visible content is still enough to indicate what\n  // even listeners these nodes might be wired up to.\n  // TODO: Warn if there is more than a single textNode as a child.\n  // TODO: Should we use domElement.firstChild.nodeValue to compare?\n\n  if (typeof children === 'string' || typeof children === 'number' || enableBigIntSupport ) {\n    if ( // $FlowFixMe[unsafe-addition] Flow doesn't want us to use `+` operator with string and bigint\n    domElement.textContent !== '' + children && props.suppressHydrationWarning !== true && !checkForUnmatchedText(domElement.textContent, children)) {\n      return false;\n    }\n  }\n\n  if (props.onScroll != null) {\n    listenToNonDelegatedEvent('scroll', domElement);\n  }\n\n  if (props.onScrollEnd != null) {\n    listenToNonDelegatedEvent('scrollend', domElement);\n  }\n\n  if (props.onClick != null) {\n    // TODO: This cast may not be sound for SVG, MathML or custom elements.\n    trapClickOnNonInteractiveElement(domElement);\n  }\n\n  return true;\n}\nfunction hydrateText(textNode, text, parentProps) {\n  const isDifferent = textNode.nodeValue !== text;\n\n  if (isDifferent && (parentProps === null || parentProps.suppressHydrationWarning !== true) && !checkForUnmatchedText(textNode.nodeValue, text)) {\n    return false;\n  }\n\n  return true;\n}\nfunction restoreControlledState(domElement, tag, props) {\n  switch (tag) {\n    case 'input':\n      restoreControlledInputState(domElement, props);\n      return;\n\n    case 'textarea':\n      restoreControlledTextareaState(domElement, props);\n      return;\n\n    case 'select':\n      restoreControlledSelectState(domElement, props);\n      return;\n  }\n}\n\nconst ReactDOMCurrentDispatcher$1 = Internals.ReactDOMCurrentDispatcher; // Unused\nconst SUSPENSE_START_DATA = '$';\nconst SUSPENSE_END_DATA = '/$';\nconst SUSPENSE_PENDING_START_DATA = '$?';\nconst SUSPENSE_FALLBACK_START_DATA = '$!';\nconst FORM_STATE_IS_MATCHING = 'F!';\nconst FORM_STATE_IS_NOT_MATCHING = 'F';\nconst STYLE = 'style';\nconst HostContextNamespaceNone = 0;\nconst HostContextNamespaceSvg = 1;\nconst HostContextNamespaceMath = 2;\nlet eventsEnabled = null;\nlet selectionInformation = null;\n\nfunction getOwnerDocumentFromRootContainer(rootContainerElement) {\n  return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;\n}\n\nfunction getRootHostContext(rootContainerInstance) {\n  let type;\n  let context;\n  const nodeType = rootContainerInstance.nodeType;\n\n  switch (nodeType) {\n    case DOCUMENT_NODE:\n    case DOCUMENT_FRAGMENT_NODE:\n      {\n        type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';\n        const root = rootContainerInstance.documentElement;\n\n        if (root) {\n          const namespaceURI = root.namespaceURI;\n          context = namespaceURI ? getOwnHostContext(namespaceURI) : HostContextNamespaceNone;\n        } else {\n          context = HostContextNamespaceNone;\n        }\n\n        break;\n      }\n\n    default:\n      {\n        const container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;\n        type = container.tagName;\n        const namespaceURI = container.namespaceURI;\n\n        if (!namespaceURI) {\n          switch (type) {\n            case 'svg':\n              context = HostContextNamespaceSvg;\n              break;\n\n            case 'math':\n              context = HostContextNamespaceMath;\n              break;\n\n            default:\n              context = HostContextNamespaceNone;\n              break;\n          }\n        } else {\n          const ownContext = getOwnHostContext(namespaceURI);\n          context = getChildHostContextProd(ownContext, type);\n        }\n\n        break;\n      }\n  }\n\n  return context;\n}\n\nfunction getOwnHostContext(namespaceURI) {\n  switch (namespaceURI) {\n    case SVG_NAMESPACE:\n      return HostContextNamespaceSvg;\n\n    case MATH_NAMESPACE:\n      return HostContextNamespaceMath;\n\n    default:\n      return HostContextNamespaceNone;\n  }\n}\n\nfunction getChildHostContextProd(parentNamespace, type) {\n  if (parentNamespace === HostContextNamespaceNone) {\n    // No (or default) parent namespace: potential entry point.\n    switch (type) {\n      case 'svg':\n        return HostContextNamespaceSvg;\n\n      case 'math':\n        return HostContextNamespaceMath;\n\n      default:\n        return HostContextNamespaceNone;\n    }\n  }\n\n  if (parentNamespace === HostContextNamespaceSvg && type === 'foreignObject') {\n    // We're leaving SVG.\n    return HostContextNamespaceNone;\n  } // By default, pass namespace below.\n\n\n  return parentNamespace;\n}\n\nfunction getChildHostContext(parentHostContext, type) {\n\n  const parentNamespace = parentHostContext;\n  return getChildHostContextProd(parentNamespace, type);\n}\nfunction getPublicInstance(instance) {\n  return instance;\n}\nfunction prepareForCommit(containerInfo) {\n  eventsEnabled = isEnabled();\n  selectionInformation = getSelectionInformation();\n  let activeInstance = null;\n\n  setEnabled(false);\n  return activeInstance;\n}\nfunction resetAfterCommit(containerInfo) {\n  restoreSelection(selectionInformation);\n  setEnabled(eventsEnabled);\n  eventsEnabled = null;\n  selectionInformation = null;\n}\nfunction createHoistableInstance(type, props, rootContainerInstance, internalInstanceHandle) {\n  const ownerDocument = getOwnerDocumentFromRootContainer(rootContainerInstance);\n  const domElement = ownerDocument.createElement(type);\n  precacheFiberNode(internalInstanceHandle, domElement);\n  updateFiberProps(domElement, props);\n  setInitialProperties(domElement, type, props);\n  markNodeAsHoistable(domElement);\n  return domElement;\n}\nfunction createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {\n  let hostContextProd;\n\n  {\n    hostContextProd = hostContext;\n  }\n\n  const ownerDocument = getOwnerDocumentFromRootContainer(rootContainerInstance);\n  let domElement;\n\n  switch (hostContextProd) {\n    case HostContextNamespaceSvg:\n      domElement = ownerDocument.createElementNS(SVG_NAMESPACE, type);\n      break;\n\n    case HostContextNamespaceMath:\n      domElement = ownerDocument.createElementNS(MATH_NAMESPACE, type);\n      break;\n\n    default:\n      switch (type) {\n        case 'svg':\n          {\n            domElement = ownerDocument.createElementNS(SVG_NAMESPACE, type);\n            break;\n          }\n\n        case 'math':\n          {\n            domElement = ownerDocument.createElementNS(MATH_NAMESPACE, type);\n            break;\n          }\n\n        case 'script':\n          {\n            // Create the script via .innerHTML so its \"parser-inserted\" flag is\n            // set to true and it does not execute\n            const div = ownerDocument.createElement('div');\n\n            div.innerHTML = '<script><' + '/script>'; // eslint-disable-line\n            // This is guaranteed to yield a script element.\n\n            const firstChild = div.firstChild;\n            domElement = div.removeChild(firstChild);\n            break;\n          }\n\n        case 'select':\n          {\n            if (typeof props.is === 'string') {\n              domElement = ownerDocument.createElement('select', {\n                is: props.is\n              });\n            } else {\n              // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.\n              // See discussion in https://github.com/facebook/react/pull/6896\n              // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240\n              domElement = ownerDocument.createElement('select');\n            }\n\n            if (props.multiple) {\n              domElement.multiple = true;\n            } else if (props.size) {\n              // Setting a size greater than 1 causes a select to behave like `multiple=true`, where\n              // it is possible that no option is selected.\n              //\n              // This is only necessary when a select in \"single selection mode\".\n              domElement.size = props.size;\n            }\n\n            break;\n          }\n\n        default:\n          {\n            if (typeof props.is === 'string') {\n              domElement = ownerDocument.createElement(type, {\n                is: props.is\n              });\n            } else {\n              // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.\n              // See discussion in https://github.com/facebook/react/pull/6896\n              // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240\n              domElement = ownerDocument.createElement(type);\n            }\n          }\n      }\n\n  }\n\n  precacheFiberNode(internalInstanceHandle, domElement);\n  updateFiberProps(domElement, props);\n  return domElement;\n}\nfunction appendInitialChild(parentInstance, child) {\n  parentInstance.appendChild(child);\n}\nfunction finalizeInitialChildren(domElement, type, props, hostContext) {\n  setInitialProperties(domElement, type, props);\n\n  switch (type) {\n    case 'button':\n    case 'input':\n    case 'select':\n    case 'textarea':\n      return !!props.autoFocus;\n\n    case 'img':\n      return true;\n\n    default:\n      return false;\n  }\n}\nfunction shouldSetTextContent(type, props) {\n  return type === 'textarea' || type === 'noscript' || typeof props.children === 'string' || typeof props.children === 'number' || enableBigIntSupport  || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;\n}\nfunction createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {\n\n  const textNode = getOwnerDocumentFromRootContainer(rootContainerInstance).createTextNode(text);\n  precacheFiberNode(internalInstanceHandle, textNode);\n  return textNode;\n}\nfunction getCurrentEventPriority() {\n  const currentEvent = window.event;\n\n  if (currentEvent === undefined) {\n    return DefaultEventPriority;\n  }\n\n  return getEventPriority(currentEvent.type);\n}\nlet currentPopstateTransitionEvent = null;\nfunction shouldAttemptEagerTransition() {\n  const event = window.event;\n\n  if (event && event.type === 'popstate') {\n    // This is a popstate event. Attempt to render any transition during this\n    // event synchronously. Unless we already attempted during this event.\n    if (event === currentPopstateTransitionEvent) {\n      // We already attempted to render this popstate transition synchronously.\n      // Any subsequent attempts must have happened as the result of a derived\n      // update, like startTransition inside useEffect, or useDV. Switch back to\n      // the default behavior for all remaining transitions during the current\n      // popstate event.\n      return false;\n    } else {\n      // Cache the current event in case a derived transition is scheduled.\n      // (Refer to previous branch.)\n      currentPopstateTransitionEvent = event;\n      return true;\n    }\n  } // We're not inside a popstate event.\n\n\n  currentPopstateTransitionEvent = null;\n  return false;\n}\n// if a component just imports ReactDOM (e.g. for findDOMNode).\n// Some environments might not have setTimeout or clearTimeout.\n\nconst scheduleTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;\nconst cancelTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;\nconst noTimeout = -1;\nconst localPromise = typeof Promise === 'function' ? Promise : undefined;\nfunction preparePortalMount(portalInstance) {\n  listenToAllSupportedEvents(portalInstance);\n}\nconst scheduleMicrotask = typeof queueMicrotask === 'function' ? queueMicrotask : typeof localPromise !== 'undefined' ? callback => localPromise.resolve(null).then(callback).catch(handleErrorInNextTick) : scheduleTimeout; // TODO: Determine the best fallback here.\n\nfunction handleErrorInNextTick(error) {\n  setTimeout(() => {\n    throw error;\n  });\n} // -------------------\nfunction commitMount(domElement, type, newProps, internalInstanceHandle) {\n  // Despite the naming that might imply otherwise, this method only\n  // fires if there is an `Update` effect scheduled during mounting.\n  // This happens if `finalizeInitialChildren` returns `true` (which it\n  // does to implement the `autoFocus` attribute on the client). But\n  // there are also other cases when this might happen (such as patching\n  // up text content during hydration mismatch). So we'll check this again.\n  switch (type) {\n    case 'button':\n    case 'input':\n    case 'select':\n    case 'textarea':\n      if (newProps.autoFocus) {\n        domElement.focus();\n      }\n\n      return;\n\n    case 'img':\n      {\n        if (newProps.src) {\n          domElement.src = newProps.src;\n        }\n\n        return;\n      }\n  }\n}\nfunction commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {\n  // Diff and update the properties.\n  updateProperties(domElement, type, oldProps, newProps); // Update the props handle so that we know which props are the ones with\n  // with current event handlers.\n\n  updateFiberProps(domElement, newProps);\n}\nfunction resetTextContent(domElement) {\n  setTextContent(domElement, '');\n}\nfunction commitTextUpdate(textInstance, oldText, newText) {\n  textInstance.nodeValue = newText;\n}\nfunction appendChild(parentInstance, child) {\n  parentInstance.appendChild(child);\n}\nfunction appendChildToContainer(container, child) {\n  let parentNode;\n\n  if (container.nodeType === COMMENT_NODE) {\n    parentNode = container.parentNode;\n    parentNode.insertBefore(child, container);\n  } else {\n    parentNode = container;\n    parentNode.appendChild(child);\n  } // This container might be used for a portal.\n  // If something inside a portal is clicked, that click should bubble\n  // through the React tree. However, on Mobile Safari the click would\n  // never bubble through the *DOM* tree unless an ancestor with onclick\n  // event exists. So we wouldn't see it and dispatch it.\n  // This is why we ensure that non React root containers have inline onclick\n  // defined.\n  // https://github.com/facebook/react/issues/11918\n\n\n  const reactRootContainer = container._reactRootContainer;\n\n  if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) {\n    // TODO: This cast may not be sound for SVG, MathML or custom elements.\n    trapClickOnNonInteractiveElement(parentNode);\n  }\n}\nfunction insertBefore(parentInstance, child, beforeChild) {\n  parentInstance.insertBefore(child, beforeChild);\n}\nfunction insertInContainerBefore(container, child, beforeChild) {\n  if (container.nodeType === COMMENT_NODE) {\n    container.parentNode.insertBefore(child, beforeChild);\n  } else {\n    container.insertBefore(child, beforeChild);\n  }\n}\n\nfunction removeChild(parentInstance, child) {\n  parentInstance.removeChild(child);\n}\nfunction removeChildFromContainer(container, child) {\n  if (container.nodeType === COMMENT_NODE) {\n    container.parentNode.removeChild(child);\n  } else {\n    container.removeChild(child);\n  }\n}\nfunction clearSuspenseBoundary(parentInstance, suspenseInstance) {\n  let node = suspenseInstance; // Delete all nodes within this suspense boundary.\n  // There might be nested nodes so we need to keep track of how\n  // deep we are and only break out when we're back on top.\n\n  let depth = 0;\n\n  do {\n    const nextNode = node.nextSibling;\n    parentInstance.removeChild(node);\n\n    if (nextNode && nextNode.nodeType === COMMENT_NODE) {\n      const data = nextNode.data;\n\n      if (data === SUSPENSE_END_DATA) {\n        if (depth === 0) {\n          parentInstance.removeChild(nextNode); // Retry if any event replaying was blocked on this.\n\n          retryIfBlockedOn(suspenseInstance);\n          return;\n        } else {\n          depth--;\n        }\n      } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {\n        depth++;\n      }\n    } // $FlowFixMe[incompatible-type] we bail out when we get a null\n\n\n    node = nextNode;\n  } while (node); // TODO: Warn, we didn't find the end comment boundary.\n  // Retry if any event replaying was blocked on this.\n\n\n  retryIfBlockedOn(suspenseInstance);\n}\nfunction clearSuspenseBoundaryFromContainer(container, suspenseInstance) {\n  if (container.nodeType === COMMENT_NODE) {\n    clearSuspenseBoundary(container.parentNode, suspenseInstance);\n  } else if (container.nodeType === ELEMENT_NODE) {\n    clearSuspenseBoundary(container, suspenseInstance);\n  } else ; // Retry if any event replaying was blocked on this.\n\n\n  retryIfBlockedOn(container);\n}\nfunction hideInstance(instance) {\n  // TODO: Does this work for all element types? What about MathML? Should we\n  // pass host context to this method?\n  instance = instance;\n  const style = instance.style; // $FlowFixMe[method-unbinding]\n\n  if (typeof style.setProperty === 'function') {\n    style.setProperty('display', 'none', 'important');\n  } else {\n    style.display = 'none';\n  }\n}\nfunction hideTextInstance(textInstance) {\n  textInstance.nodeValue = '';\n}\nfunction unhideInstance(instance, props) {\n  instance = instance;\n  const styleProp = props[STYLE];\n  const display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty('display') ? styleProp.display : null;\n  instance.style.display = display == null || typeof display === 'boolean' ? '' : // The value would've errored already if it wasn't safe.\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  ('' + display).trim();\n}\nfunction unhideTextInstance(textInstance, text) {\n  textInstance.nodeValue = text;\n}\nfunction clearContainer(container) {\n  const nodeType = container.nodeType;\n\n  if (nodeType === DOCUMENT_NODE) {\n    clearContainerSparingly(container);\n  } else if (nodeType === ELEMENT_NODE) {\n    switch (container.nodeName) {\n      case 'HEAD':\n      case 'HTML':\n      case 'BODY':\n        clearContainerSparingly(container);\n        return;\n\n      default:\n        {\n          container.textContent = '';\n        }\n    }\n  }\n}\n\nfunction clearContainerSparingly(container) {\n  let node;\n  let nextNode = container.firstChild;\n\n  if (nextNode && nextNode.nodeType === DOCUMENT_TYPE_NODE) {\n    nextNode = nextNode.nextSibling;\n  }\n\n  while (nextNode) {\n    node = nextNode;\n    nextNode = nextNode.nextSibling;\n\n    switch (node.nodeName) {\n      case 'HTML':\n      case 'HEAD':\n      case 'BODY':\n        {\n          const element = node;\n          clearContainerSparingly(element); // If these singleton instances had previously been rendered with React they\n          // may still hold on to references to the previous fiber tree. We detatch them\n          // prospectively to reset them to a baseline starting state since we cannot create\n          // new instances.\n\n          detachDeletedInstance(element);\n          continue;\n        }\n      // Script tags are retained to avoid an edge case bug. Normally scripts will execute if they\n      // are ever inserted into the DOM. However when streaming if a script tag is opened but not\n      // yet closed some browsers create and insert the script DOM Node but the script cannot execute\n      // yet until the closing tag is parsed. If something causes React to call clearContainer while\n      // this DOM node is in the document but not yet executable the DOM node will be removed from the\n      // document and when the script closing tag comes in the script will not end up running. This seems\n      // to happen in Chrome/Firefox but not Safari at the moment though this is not necessarily specified\n      // behavior so it could change in future versions of browsers. While leaving all scripts is broader\n      // than strictly necessary this is the least amount of additional code to avoid this breaking\n      // edge case.\n      //\n      // Style tags are retained because they may likely come from 3rd party scripts and extensions\n\n      case 'SCRIPT':\n      case 'STYLE':\n        {\n          continue;\n        }\n      // Stylesheet tags are retained because tehy may likely come from 3rd party scripts and extensions\n\n      case 'LINK':\n        {\n          if (node.rel.toLowerCase() === 'stylesheet') {\n            continue;\n          }\n        }\n    }\n\n    container.removeChild(node);\n  }\n\n  return;\n} // Making this so we can eventually move all of the instance caching to the commit phase.\nfunction canHydrateInstance(instance, type, props, inRootOrSingleton) {\n  while (instance.nodeType === ELEMENT_NODE) {\n    const element = instance;\n    const anyProps = props;\n\n    if (element.nodeName.toLowerCase() !== type.toLowerCase()) {\n      if (!inRootOrSingleton) {\n        // Usually we error for mismatched tags.\n        if (element.nodeName === 'INPUT' && element.type === 'hidden') ; else {\n          return null;\n        }\n      } // In root or singleton parents we skip past mismatched instances.\n\n    } else if (!inRootOrSingleton) {\n      // Match\n      if (type === 'input' && element.type === 'hidden') {\n\n        const name = anyProps.name == null ? null : '' + anyProps.name;\n\n        if (anyProps.type !== 'hidden' || element.getAttribute('name') !== name) ; else {\n          return element;\n        }\n      } else {\n        return element;\n      }\n    } else if (isMarkedHoistable(element)) ; else {\n      // We have an Element with the right type.\n      // We are going to try to exclude it if we can definitely identify it as a hoisted Node or if\n      // we can guess that the node is likely hoisted or was inserted by a 3rd party script or browser extension\n      // using high entropy attributes for certain types. This technique will fail for strange insertions like\n      // extension prepending <div> in the <body> but that already breaks before and that is an edge case.\n      switch (type) {\n        // case 'title':\n        //We assume all titles are matchable. You should only have one in the Document, at least in a hoistable scope\n        // and if you are a HostComponent with type title we must either be in an <svg> context or this title must have an `itemProp` prop.\n        case 'meta':\n          {\n            // The only way to opt out of hoisting meta tags is to give it an itemprop attribute. We assume there will be\n            // not 3rd party meta tags that are prepended, accepting the cases where this isn't true because meta tags\n            // are usually only functional for SSR so even in a rare case where we did bind to an injected tag the runtime\n            // implications are minimal\n            if (!element.hasAttribute('itemprop')) {\n              // This is a Hoistable\n              break;\n            }\n\n            return element;\n          }\n\n        case 'link':\n          {\n            // Links come in many forms and we do expect 3rd parties to inject them into <head> / <body>. We exclude known resources\n            // and then use high-entroy attributes like href which are almost always used and almost always unique to filter out unlikely\n            // matches.\n            const rel = element.getAttribute('rel');\n\n            if (rel === 'stylesheet' && element.hasAttribute('data-precedence')) {\n              // This is a stylesheet resource\n              break;\n            } else if (rel !== anyProps.rel || element.getAttribute('href') !== (anyProps.href == null ? null : anyProps.href) || element.getAttribute('crossorigin') !== (anyProps.crossOrigin == null ? null : anyProps.crossOrigin) || element.getAttribute('title') !== (anyProps.title == null ? null : anyProps.title)) {\n              // rel + href should usually be enough to uniquely identify a link however crossOrigin can vary for rel preconnect\n              // and title could vary for rel alternate\n              break;\n            }\n\n            return element;\n          }\n\n        case 'style':\n          {\n            // Styles are hard to match correctly. We can exclude known resources but otherwise we accept the fact that a non-hoisted style tags\n            // in <head> or <body> are likely never going to be unmounted given their position in the document and the fact they likely hold global styles\n            if (element.hasAttribute('data-precedence')) {\n              // This is a style resource\n              break;\n            }\n\n            return element;\n          }\n\n        case 'script':\n          {\n            // Scripts are a little tricky, we exclude known resources and then similar to links try to use high-entropy attributes\n            // to reject poor matches. One challenge with scripts are inline scripts. We don't attempt to check text content which could\n            // in theory lead to a hydration error later if a 3rd party injected an inline script before the React rendered nodes.\n            // Falling back to client rendering if this happens should be seemless though so we will try this hueristic and revisit later\n            // if we learn it is problematic\n            const srcAttr = element.getAttribute('src');\n\n            if (srcAttr !== (anyProps.src == null ? null : anyProps.src) || element.getAttribute('type') !== (anyProps.type == null ? null : anyProps.type) || element.getAttribute('crossorigin') !== (anyProps.crossOrigin == null ? null : anyProps.crossOrigin)) {\n              // This script is for a different src/type/crossOrigin. It may be a script resource\n              // or it may just be a mistmatch\n              if (srcAttr && element.hasAttribute('async') && !element.hasAttribute('itemprop')) {\n                // This is an async script resource\n                break;\n              }\n            }\n\n            return element;\n          }\n\n        default:\n          {\n            // We have excluded the most likely cases of mismatch between hoistable tags, 3rd party script inserted tags,\n            // and browser extension inserted tags. While it is possible this is not the right match it is a decent hueristic\n            // that should work in the vast majority of cases.\n            return element;\n          }\n      }\n    }\n\n    const nextInstance = getNextHydratableSibling(element);\n\n    if (nextInstance === null) {\n      break;\n    }\n\n    instance = nextInstance;\n  } // This is a suspense boundary or Text node or we got the end.\n  // Suspense Boundaries are never expected to be injected by 3rd parties. If we see one it should be matched\n  // and this is a hydration error.\n  // Text Nodes are also not expected to be injected by 3rd parties. This is less of a guarantee for <body>\n  // but it seems reasonable and conservative to reject this as a hydration error as well\n\n\n  return null;\n}\nfunction canHydrateTextInstance(instance, text, inRootOrSingleton) {\n  // Empty strings are not parsed by HTML so there won't be a correct match here.\n  if (text === '') return null;\n\n  while (instance.nodeType !== TEXT_NODE) {\n    if (instance.nodeType === ELEMENT_NODE && instance.nodeName === 'INPUT' && instance.type === 'hidden') ; else if (!inRootOrSingleton) {\n      return null;\n    }\n\n    const nextInstance = getNextHydratableSibling(instance);\n\n    if (nextInstance === null) {\n      return null;\n    }\n\n    instance = nextInstance;\n  } // This has now been refined to a text node.\n\n\n  return instance;\n}\nfunction canHydrateSuspenseInstance(instance, inRootOrSingleton) {\n  while (instance.nodeType !== COMMENT_NODE) {\n    if (!inRootOrSingleton) {\n      return null;\n    }\n\n    const nextInstance = getNextHydratableSibling(instance);\n\n    if (nextInstance === null) {\n      return null;\n    }\n\n    instance = nextInstance;\n  } // This has now been refined to a suspense node.\n\n\n  return instance;\n}\nfunction isSuspenseInstancePending(instance) {\n  return instance.data === SUSPENSE_PENDING_START_DATA;\n}\nfunction isSuspenseInstanceFallback(instance) {\n  return instance.data === SUSPENSE_FALLBACK_START_DATA;\n}\nfunction getSuspenseInstanceFallbackErrorDetails(instance) {\n  const dataset = instance.nextSibling && instance.nextSibling.dataset;\n  let digest;\n\n  if (dataset) {\n    digest = dataset.dgst;\n  }\n\n  {\n    // Object gets DCE'd if constructed in tail position and matches callsite destructuring\n    return {\n      digest\n    };\n  }\n}\nfunction registerSuspenseInstanceRetry(instance, callback) {\n  instance._reactRetry = callback;\n}\nfunction canHydrateFormStateMarker(instance, inRootOrSingleton) {\n  while (instance.nodeType !== COMMENT_NODE) {\n    if (!inRootOrSingleton) {\n      return null;\n    }\n\n    const nextInstance = getNextHydratableSibling(instance);\n\n    if (nextInstance === null) {\n      return null;\n    }\n\n    instance = nextInstance;\n  }\n\n  const nodeData = instance.data;\n\n  if (nodeData === FORM_STATE_IS_MATCHING || nodeData === FORM_STATE_IS_NOT_MATCHING) {\n    const markerInstance = instance;\n    return markerInstance;\n  }\n\n  return null;\n}\nfunction isFormStateMarkerMatching(markerInstance) {\n  return markerInstance.data === FORM_STATE_IS_MATCHING;\n}\n\nfunction getNextHydratable(node) {\n  // Skip non-hydratable nodes.\n  for (; node != null; node = node.nextSibling) {\n    const nodeType = node.nodeType;\n\n    if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {\n      break;\n    }\n\n    if (nodeType === COMMENT_NODE) {\n      const nodeData = node.data;\n\n      if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA || (nodeData === FORM_STATE_IS_MATCHING || nodeData === FORM_STATE_IS_NOT_MATCHING)) {\n        break;\n      }\n\n      if (nodeData === SUSPENSE_END_DATA) {\n        return null;\n      }\n    }\n  }\n\n  return node;\n}\n\nfunction getNextHydratableSibling(instance) {\n  return getNextHydratable(instance.nextSibling);\n}\nfunction getFirstHydratableChild(parentInstance) {\n  return getNextHydratable(parentInstance.firstChild);\n}\nfunction getFirstHydratableChildWithinContainer(parentContainer) {\n  return getNextHydratable(parentContainer.firstChild);\n}\nfunction getFirstHydratableChildWithinSuspenseInstance(parentInstance) {\n  return getNextHydratable(parentInstance.nextSibling);\n}\nfunction hydrateInstance(instance, type, props, hostContext, internalInstanceHandle) {\n  precacheFiberNode(internalInstanceHandle, instance); // TODO: Possibly defer this until the commit phase where all the events\n  // get attached.\n\n  updateFiberProps(instance, props);\n  return hydrateProperties(instance, type, props);\n} // Returns a Map of properties that were different on the server.\nfunction hydrateTextInstance(textInstance, text, internalInstanceHandle, parentInstanceProps) {\n  precacheFiberNode(internalInstanceHandle, textInstance);\n  return hydrateText(textInstance, text, parentInstanceProps);\n} // Returns the server text if it differs from the client.\nfunction hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {\n  precacheFiberNode(internalInstanceHandle, suspenseInstance);\n}\nfunction getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {\n  let node = suspenseInstance.nextSibling; // Skip past all nodes within this suspense boundary.\n  // There might be nested nodes so we need to keep track of how\n  // deep we are and only break out when we're back on top.\n\n  let depth = 0;\n\n  while (node) {\n    if (node.nodeType === COMMENT_NODE) {\n      const data = node.data;\n\n      if (data === SUSPENSE_END_DATA) {\n        if (depth === 0) {\n          return getNextHydratableSibling(node);\n        } else {\n          depth--;\n        }\n      } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {\n        depth++;\n      }\n    }\n\n    node = node.nextSibling;\n  } // TODO: Warn, we didn't find the end comment boundary.\n\n\n  return null;\n} // Returns the SuspenseInstance if this node is a direct child of a\n// SuspenseInstance. I.e. if its previous sibling is a Comment with\n// SUSPENSE_x_START_DATA. Otherwise, null.\n\nfunction getParentSuspenseInstance(targetInstance) {\n  let node = targetInstance.previousSibling; // Skip past all nodes within this suspense boundary.\n  // There might be nested nodes so we need to keep track of how\n  // deep we are and only break out when we're back on top.\n\n  let depth = 0;\n\n  while (node) {\n    if (node.nodeType === COMMENT_NODE) {\n      const data = node.data;\n\n      if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {\n        if (depth === 0) {\n          return node;\n        } else {\n          depth--;\n        }\n      } else if (data === SUSPENSE_END_DATA) {\n        depth++;\n      }\n    }\n\n    node = node.previousSibling;\n  }\n\n  return null;\n}\nfunction commitHydratedContainer(container) {\n  // Retry if any event replaying was blocked on this.\n  retryIfBlockedOn(container);\n}\nfunction commitHydratedSuspenseInstance(suspenseInstance) {\n  // Retry if any event replaying was blocked on this.\n  retryIfBlockedOn(suspenseInstance);\n}\nfunction shouldDeleteUnhydratedTailInstances(parentType) {\n  return parentType !== 'form' && parentType !== 'button';\n} // -------------------\nfunction isHostSingletonType(type) {\n  return type === 'html' || type === 'head' || type === 'body';\n}\nfunction resolveSingletonInstance(type, props, rootContainerInstance, hostContext, validateDOMNestingDev) {\n\n  const ownerDocument = getOwnerDocumentFromRootContainer(rootContainerInstance);\n\n  switch (type) {\n    case 'html':\n      {\n        const documentElement = ownerDocument.documentElement;\n\n        if (!documentElement) {\n          throw Error(formatProdErrorMessage(452));\n        }\n\n        return documentElement;\n      }\n\n    case 'head':\n      {\n        const head = ownerDocument.head;\n\n        if (!head) {\n          throw Error(formatProdErrorMessage(453));\n        }\n\n        return head;\n      }\n\n    case 'body':\n      {\n        const body = ownerDocument.body;\n\n        if (!body) {\n          throw Error(formatProdErrorMessage(454));\n        }\n\n        return body;\n      }\n\n    default:\n      {\n        throw Error(formatProdErrorMessage(451));\n      }\n  }\n}\nfunction acquireSingletonInstance(type, props, instance, internalInstanceHandle) {\n\n  const attributes = instance.attributes;\n\n  while (attributes.length) {\n    instance.removeAttributeNode(attributes[0]);\n  }\n\n  setInitialProperties(instance, type, props);\n  precacheFiberNode(internalInstanceHandle, instance);\n  updateFiberProps(instance, props);\n}\nfunction releaseSingletonInstance(instance) {\n  const attributes = instance.attributes;\n\n  while (attributes.length) {\n    instance.removeAttributeNode(attributes[0]);\n  }\n\n  detachDeletedInstance(instance);\n}\nfunction clearSingleton(instance) {\n  const element = instance;\n  let node = element.firstChild;\n\n  while (node) {\n    const nextNode = node.nextSibling;\n    const nodeName = node.nodeName;\n\n    if (isMarkedHoistable(node) || nodeName === 'HEAD' || nodeName === 'BODY' || nodeName === 'SCRIPT' || nodeName === 'STYLE' || nodeName === 'LINK' && node.rel.toLowerCase() === 'stylesheet') ; else {\n      element.removeChild(node);\n    }\n\n    node = nextNode;\n  }\n\n  return;\n} // -------------------\nconst NotLoaded =\n/*       */\n0b000;\nconst Loaded =\n/*          */\n0b001;\nconst Errored =\n/*         */\n0b010;\nconst Settled =\n/*         */\n0b011;\nconst Inserted =\n/*        */\n0b100;\nfunction prepareToCommitHoistables() {\n  tagCaches = null;\n} // global collections of Resources\n\nconst preloadPropsMap = new Map();\nconst preconnectsSet = new Set(); // getRootNode is missing from IE and old jsdom versions\n\nfunction getHoistableRoot(container) {\n  // $FlowFixMe[method-unbinding]\n  return typeof container.getRootNode === 'function' ?\n  /* $FlowFixMe[incompatible-return] Flow types this as returning a `Node`,\n   * but it's either a `Document` or `ShadowRoot`. */\n  container.getRootNode() : container.ownerDocument;\n}\n\nfunction getCurrentResourceRoot() {\n  const currentContainer = getCurrentRootHostContainer();\n  return currentContainer ? getHoistableRoot(currentContainer) : null;\n}\n\nfunction getDocumentFromRoot(root) {\n  return root.ownerDocument || root;\n}\n\nconst previousDispatcher = ReactDOMCurrentDispatcher$1.current;\nReactDOMCurrentDispatcher$1.current = {\n  prefetchDNS: prefetchDNS$1,\n  preconnect: preconnect$1,\n  preload: preload$1,\n  preloadModule: preloadModule$1,\n  preinitStyle,\n  preinitScript,\n  preinitModuleScript\n}; // We expect this to get inlined. It is a function mostly to communicate the special nature of\n// how we resolve the HoistableRoot for ReactDOM.pre*() methods. Because we support calling\n// these methods outside of render there is no way to know which Document or ShadowRoot is 'scoped'\n// and so we have to fall back to something universal. Currently we just refer to the global document.\n// This is notable because nowhere else in ReactDOM do we actually reference the global document or window\n// because we may be rendering inside an iframe.\n\nconst globalDocument = typeof document === 'undefined' ? null : document;\n\nfunction getGlobalDocument() {\n  return globalDocument;\n}\n\nfunction preconnectAs(rel, href, crossOrigin) {\n  const ownerDocument = getGlobalDocument();\n\n  if (ownerDocument && typeof href === 'string' && href) {\n    const limitedEscapedHref = escapeSelectorAttributeValueInsideDoubleQuotes(href);\n    let key = \"link[rel=\\\"\" + rel + \"\\\"][href=\\\"\" + limitedEscapedHref + \"\\\"]\";\n\n    if (typeof crossOrigin === 'string') {\n      key += \"[crossorigin=\\\"\" + crossOrigin + \"\\\"]\";\n    }\n\n    if (!preconnectsSet.has(key)) {\n      preconnectsSet.add(key);\n      const preconnectProps = {\n        rel,\n        crossOrigin,\n        href\n      };\n\n      if (null === ownerDocument.querySelector(key)) {\n        const instance = ownerDocument.createElement('link');\n        setInitialProperties(instance, 'link', preconnectProps);\n        markNodeAsHoistable(instance);\n        ownerDocument.head.appendChild(instance);\n      }\n    }\n  }\n}\n\nfunction prefetchDNS$1(href) {\n  previousDispatcher.prefetchDNS(href);\n  preconnectAs('dns-prefetch', href, null);\n}\n\nfunction preconnect$1(href, crossOrigin) {\n  previousDispatcher.preconnect(href, crossOrigin);\n  preconnectAs('preconnect', href, crossOrigin);\n}\n\nfunction preload$1(href, as, options) {\n  previousDispatcher.preload(href, as, options);\n  const ownerDocument = getGlobalDocument();\n\n  if (ownerDocument && href && as) {\n    let preloadSelector = \"link[rel=\\\"preload\\\"][as=\\\"\" + escapeSelectorAttributeValueInsideDoubleQuotes(as) + \"\\\"]\";\n\n    if (as === 'image') {\n      if (options && options.imageSrcSet) {\n        preloadSelector += \"[imagesrcset=\\\"\" + escapeSelectorAttributeValueInsideDoubleQuotes(options.imageSrcSet) + \"\\\"]\";\n\n        if (typeof options.imageSizes === 'string') {\n          preloadSelector += \"[imagesizes=\\\"\" + escapeSelectorAttributeValueInsideDoubleQuotes(options.imageSizes) + \"\\\"]\";\n        }\n      } else {\n        preloadSelector += \"[href=\\\"\" + escapeSelectorAttributeValueInsideDoubleQuotes(href) + \"\\\"]\";\n      }\n    } else {\n      preloadSelector += \"[href=\\\"\" + escapeSelectorAttributeValueInsideDoubleQuotes(href) + \"\\\"]\";\n    } // Some preloads are keyed under their selector. This happens when the preload is for\n    // an arbitrary type. Other preloads are keyed under the resource key they represent a preload for.\n    // Here we figure out which key to use to determine if we have a preload already.\n\n\n    let key = preloadSelector;\n\n    switch (as) {\n      case 'style':\n        key = getStyleKey(href);\n        break;\n\n      case 'script':\n        key = getScriptKey(href);\n        break;\n    }\n\n    if (!preloadPropsMap.has(key)) {\n      const preloadProps = assign({\n        rel: 'preload',\n        // There is a bug in Safari where imageSrcSet is not respected on preload links\n        // so we omit the href here if we have imageSrcSet b/c safari will load the wrong image.\n        // This harms older browers that do not support imageSrcSet by making their preloads not work\n        // but this population is shrinking fast and is already small so we accept this tradeoff.\n        href: as === 'image' && options && options.imageSrcSet ? undefined : href,\n        as\n      }, options);\n\n      preloadPropsMap.set(key, preloadProps);\n\n      if (null === ownerDocument.querySelector(preloadSelector)) {\n        if (as === 'style' && ownerDocument.querySelector(getStylesheetSelectorFromKey(key))) {\n          // We already have a stylesheet for this key. We don't need to preload it.\n          return;\n        } else if (as === 'script' && ownerDocument.querySelector(getScriptSelectorFromKey(key))) {\n          // We already have a stylesheet for this key. We don't need to preload it.\n          return;\n        }\n\n        const instance = ownerDocument.createElement('link');\n        setInitialProperties(instance, 'link', preloadProps);\n        markNodeAsHoistable(instance);\n        ownerDocument.head.appendChild(instance);\n      }\n    }\n  }\n}\n\nfunction preloadModule$1(href, options) {\n  previousDispatcher.preloadModule(href, options);\n  const ownerDocument = getGlobalDocument();\n\n  if (ownerDocument && href) {\n    const as = options && typeof options.as === 'string' ? options.as : 'script';\n    const preloadSelector = \"link[rel=\\\"modulepreload\\\"][as=\\\"\" + escapeSelectorAttributeValueInsideDoubleQuotes(as) + \"\\\"][href=\\\"\" + escapeSelectorAttributeValueInsideDoubleQuotes(href) + \"\\\"]\"; // Some preloads are keyed under their selector. This happens when the preload is for\n    // an arbitrary type. Other preloads are keyed under the resource key they represent a preload for.\n    // Here we figure out which key to use to determine if we have a preload already.\n\n    let key = preloadSelector;\n\n    switch (as) {\n      case 'audioworklet':\n      case 'paintworklet':\n      case 'serviceworker':\n      case 'sharedworker':\n      case 'worker':\n      case 'script':\n        {\n          key = getScriptKey(href);\n          break;\n        }\n    }\n\n    if (!preloadPropsMap.has(key)) {\n      const props = assign({\n        rel: 'modulepreload',\n        href\n      }, options);\n\n      preloadPropsMap.set(key, props);\n\n      if (null === ownerDocument.querySelector(preloadSelector)) {\n        switch (as) {\n          case 'audioworklet':\n          case 'paintworklet':\n          case 'serviceworker':\n          case 'sharedworker':\n          case 'worker':\n          case 'script':\n            {\n              if (ownerDocument.querySelector(getScriptSelectorFromKey(key))) {\n                return;\n              }\n            }\n        }\n\n        const instance = ownerDocument.createElement('link');\n        setInitialProperties(instance, 'link', props);\n        markNodeAsHoistable(instance);\n        ownerDocument.head.appendChild(instance);\n      }\n    }\n  }\n}\n\nfunction preinitStyle(href, precedence, options) {\n  previousDispatcher.preinitStyle(href, precedence, options);\n  const ownerDocument = getGlobalDocument();\n\n  if (ownerDocument && href) {\n    const styles = getResourcesFromRoot(ownerDocument).hoistableStyles;\n    const key = getStyleKey(href);\n    precedence = precedence || 'default'; // Check if this resource already exists\n\n    let resource = styles.get(key);\n\n    if (resource) {\n      // We can early return. The resource exists and there is nothing\n      // more to do\n      return;\n    }\n\n    const state = {\n      loading: NotLoaded,\n      preload: null\n    }; // Attempt to hydrate instance from DOM\n\n    let instance = ownerDocument.querySelector(getStylesheetSelectorFromKey(key));\n\n    if (instance) {\n      state.loading = Loaded | Inserted;\n    } else {\n      // Construct a new instance and insert it\n      const stylesheetProps = assign({\n        rel: 'stylesheet',\n        href,\n        'data-precedence': precedence\n      }, options);\n\n      const preloadProps = preloadPropsMap.get(key);\n\n      if (preloadProps) {\n        adoptPreloadPropsForStylesheet(stylesheetProps, preloadProps);\n      }\n\n      const link = instance = ownerDocument.createElement('link');\n      markNodeAsHoistable(link);\n      setInitialProperties(link, 'link', stylesheetProps);\n      link._p = new Promise((resolve, reject) => {\n        link.onload = resolve;\n        link.onerror = reject;\n      });\n      link.addEventListener('load', () => {\n        state.loading |= Loaded;\n      });\n      link.addEventListener('error', () => {\n        state.loading |= Errored;\n      });\n      state.loading |= Inserted;\n      insertStylesheet(instance, precedence, ownerDocument);\n    } // Construct a Resource and cache it\n\n\n    resource = {\n      type: 'stylesheet',\n      instance,\n      count: 1,\n      state\n    };\n    styles.set(key, resource);\n    return;\n  }\n}\n\nfunction preinitScript(src, options) {\n  previousDispatcher.preinitScript(src, options);\n  const ownerDocument = getGlobalDocument();\n\n  if (ownerDocument && src) {\n    const scripts = getResourcesFromRoot(ownerDocument).hoistableScripts;\n    const key = getScriptKey(src); // Check if this resource already exists\n\n    let resource = scripts.get(key);\n\n    if (resource) {\n      // We can early return. The resource exists and there is nothing\n      // more to do\n      return;\n    } // Attempt to hydrate instance from DOM\n\n\n    let instance = ownerDocument.querySelector(getScriptSelectorFromKey(key));\n\n    if (!instance) {\n      // Construct a new instance and insert it\n      const scriptProps = assign({\n        src,\n        async: true\n      }, options); // Adopt certain preload props\n\n\n      const preloadProps = preloadPropsMap.get(key);\n\n      if (preloadProps) {\n        adoptPreloadPropsForScript(scriptProps, preloadProps);\n      }\n\n      instance = ownerDocument.createElement('script');\n      markNodeAsHoistable(instance);\n      setInitialProperties(instance, 'link', scriptProps);\n      ownerDocument.head.appendChild(instance);\n    } // Construct a Resource and cache it\n\n\n    resource = {\n      type: 'script',\n      instance,\n      count: 1,\n      state: null\n    };\n    scripts.set(key, resource);\n    return;\n  }\n}\n\nfunction preinitModuleScript(src, options) {\n  previousDispatcher.preinitModuleScript(src, options);\n  const ownerDocument = getGlobalDocument();\n\n  if (ownerDocument && src) {\n    const scripts = getResourcesFromRoot(ownerDocument).hoistableScripts;\n    const key = getScriptKey(src); // Check if this resource already exists\n\n    let resource = scripts.get(key);\n\n    if (resource) {\n      // We can early return. The resource exists and there is nothing\n      // more to do\n      return;\n    } // Attempt to hydrate instance from DOM\n\n\n    let instance = ownerDocument.querySelector(getScriptSelectorFromKey(key));\n\n    if (!instance) {\n      // Construct a new instance and insert it\n      const scriptProps = assign({\n        src,\n        async: true,\n        type: 'module'\n      }, options); // Adopt certain preload props\n\n\n      const preloadProps = preloadPropsMap.get(key);\n\n      if (preloadProps) {\n        adoptPreloadPropsForScript(scriptProps, preloadProps);\n      }\n\n      instance = ownerDocument.createElement('script');\n      markNodeAsHoistable(instance);\n      setInitialProperties(instance, 'link', scriptProps);\n      ownerDocument.head.appendChild(instance);\n    } // Construct a Resource and cache it\n\n\n    resource = {\n      type: 'script',\n      instance,\n      count: 1,\n      state: null\n    };\n    scripts.set(key, resource);\n    return;\n  }\n} // This function is called in begin work and we should always have a currentDocument set\n\n\nfunction getResource(type, currentProps, pendingProps) {\n  const resourceRoot = getCurrentResourceRoot();\n\n  if (!resourceRoot) {\n    throw Error(formatProdErrorMessage(446));\n  }\n\n  switch (type) {\n    case 'meta':\n    case 'title':\n      {\n        return null;\n      }\n\n    case 'style':\n      {\n        if (typeof pendingProps.precedence === 'string' && typeof pendingProps.href === 'string') {\n          const key = getStyleKey(pendingProps.href);\n          const styles = getResourcesFromRoot(resourceRoot).hoistableStyles;\n          let resource = styles.get(key);\n\n          if (!resource) {\n            resource = {\n              type: 'style',\n              instance: null,\n              count: 0,\n              state: null\n            };\n            styles.set(key, resource);\n          }\n\n          return resource;\n        }\n\n        return {\n          type: 'void',\n          instance: null,\n          count: 0,\n          state: null\n        };\n      }\n\n    case 'link':\n      {\n        if (pendingProps.rel === 'stylesheet' && typeof pendingProps.href === 'string' && typeof pendingProps.precedence === 'string') {\n          const qualifiedProps = pendingProps;\n          const key = getStyleKey(qualifiedProps.href);\n          const styles = getResourcesFromRoot(resourceRoot).hoistableStyles;\n          let resource = styles.get(key);\n\n          if (!resource) {\n            // We asserted this above but Flow can't figure out that the type satisfies\n            const ownerDocument = getDocumentFromRoot(resourceRoot);\n            resource = {\n              type: 'stylesheet',\n              instance: null,\n              count: 0,\n              state: {\n                loading: NotLoaded,\n                preload: null\n              }\n            };\n            styles.set(key, resource);\n\n            if (!preloadPropsMap.has(key)) {\n              preloadStylesheet(ownerDocument, key, preloadPropsFromStylesheet(qualifiedProps), resource.state);\n            }\n          }\n\n          return resource;\n        }\n\n        return null;\n      }\n\n    case 'script':\n      {\n        if (typeof pendingProps.src === 'string' && pendingProps.async === true) {\n          const scriptProps = pendingProps;\n          const key = getScriptKey(scriptProps.src);\n          const scripts = getResourcesFromRoot(resourceRoot).hoistableScripts;\n          let resource = scripts.get(key);\n\n          if (!resource) {\n            resource = {\n              type: 'script',\n              instance: null,\n              count: 0,\n              state: null\n            };\n            scripts.set(key, resource);\n          }\n\n          return resource;\n        }\n\n        return {\n          type: 'void',\n          instance: null,\n          count: 0,\n          state: null\n        };\n      }\n\n    default:\n      {\n        throw Error(formatProdErrorMessage(444, type));\n      }\n  }\n}\n\nfunction styleTagPropsFromRawProps(rawProps) {\n  return assign({}, rawProps, {\n    'data-href': rawProps.href,\n    'data-precedence': rawProps.precedence,\n    href: null,\n    precedence: null\n  });\n}\n\nfunction getStyleKey(href) {\n  const limitedEscapedHref = escapeSelectorAttributeValueInsideDoubleQuotes(href);\n  return \"href=\\\"\" + limitedEscapedHref + \"\\\"\";\n}\n\nfunction getStyleTagSelector(href) {\n  const limitedEscapedHref = escapeSelectorAttributeValueInsideDoubleQuotes(href);\n  return \"style[data-href~=\\\"\" + limitedEscapedHref + \"\\\"]\";\n}\n\nfunction getStylesheetSelectorFromKey(key) {\n  return \"link[rel=\\\"stylesheet\\\"][\" + key + \"]\";\n}\n\nfunction getPreloadStylesheetSelectorFromKey(key) {\n  return \"link[rel=\\\"preload\\\"][as=\\\"style\\\"][\" + key + \"]\";\n}\n\nfunction stylesheetPropsFromRawProps(rawProps) {\n  return assign({}, rawProps, {\n    'data-precedence': rawProps.precedence,\n    precedence: null\n  });\n}\n\nfunction preloadStylesheet(ownerDocument, key, preloadProps, state) {\n  preloadPropsMap.set(key, preloadProps);\n\n  if (!ownerDocument.querySelector(getStylesheetSelectorFromKey(key))) {\n    // There is no matching stylesheet instance in the Document.\n    // We will insert a preload now to kick off loading because\n    // we expect this stylesheet to commit\n    const preloadEl = ownerDocument.querySelector(getPreloadStylesheetSelectorFromKey(key));\n\n    if (preloadEl) {\n      // If we find a preload already it was SSR'd and we won't have an actual\n      // loading state to track. For now we will just assume it is loaded\n      state.loading = Loaded;\n    } else {\n      const instance = ownerDocument.createElement('link');\n      state.preload = instance;\n      instance.addEventListener('load', () => state.loading |= Loaded);\n      instance.addEventListener('error', () => state.loading |= Errored);\n      setInitialProperties(instance, 'link', preloadProps);\n      markNodeAsHoistable(instance);\n      ownerDocument.head.appendChild(instance);\n    }\n  }\n}\n\nfunction preloadPropsFromStylesheet(props) {\n  return {\n    rel: 'preload',\n    as: 'style',\n    href: props.href,\n    crossOrigin: props.crossOrigin,\n    integrity: props.integrity,\n    media: props.media,\n    hrefLang: props.hrefLang,\n    referrerPolicy: props.referrerPolicy\n  };\n}\n\nfunction getScriptKey(src) {\n  const limitedEscapedSrc = escapeSelectorAttributeValueInsideDoubleQuotes(src);\n  return \"[src=\\\"\" + limitedEscapedSrc + \"\\\"]\";\n}\n\nfunction getScriptSelectorFromKey(key) {\n  return 'script[async]' + key;\n}\n\nfunction acquireResource(hoistableRoot, resource, props) {\n  resource.count++;\n\n  if (resource.instance === null) {\n    switch (resource.type) {\n      case 'style':\n        {\n          const qualifiedProps = props; // Attempt to hydrate instance from DOM\n\n          let instance = hoistableRoot.querySelector(getStyleTagSelector(qualifiedProps.href));\n\n          if (instance) {\n            resource.instance = instance;\n            markNodeAsHoistable(instance);\n            return instance;\n          }\n\n          const styleProps = styleTagPropsFromRawProps(props);\n          const ownerDocument = getDocumentFromRoot(hoistableRoot);\n          instance = ownerDocument.createElement('style');\n          markNodeAsHoistable(instance);\n          setInitialProperties(instance, 'style', styleProps); // TODO: `style` does not have loading state for tracking insertions. I\n          // guess because these aren't suspensey? Not sure whether this is a\n          // factoring smell.\n          // resource.state.loading |= Inserted;\n\n          insertStylesheet(instance, qualifiedProps.precedence, hoistableRoot);\n          resource.instance = instance;\n          return instance;\n        }\n\n      case 'stylesheet':\n        {\n          // This typing is enforce by `getResource`. If we change the logic\n          // there for what qualifies as a stylesheet resource we need to ensure\n          // this cast still makes sense;\n          const qualifiedProps = props;\n          const key = getStyleKey(qualifiedProps.href); // Attempt to hydrate instance from DOM\n\n          let instance = hoistableRoot.querySelector(getStylesheetSelectorFromKey(key));\n\n          if (instance) {\n            resource.state.loading |= Inserted;\n            resource.instance = instance;\n            markNodeAsHoistable(instance);\n            return instance;\n          }\n\n          const stylesheetProps = stylesheetPropsFromRawProps(props);\n          const preloadProps = preloadPropsMap.get(key);\n\n          if (preloadProps) {\n            adoptPreloadPropsForStylesheet(stylesheetProps, preloadProps);\n          } // Construct and insert a new instance\n\n\n          const ownerDocument = getDocumentFromRoot(hoistableRoot);\n          instance = ownerDocument.createElement('link');\n          markNodeAsHoistable(instance);\n          const linkInstance = instance;\n          linkInstance._p = new Promise((resolve, reject) => {\n            linkInstance.onload = resolve;\n            linkInstance.onerror = reject;\n          });\n          setInitialProperties(instance, 'link', stylesheetProps);\n          resource.state.loading |= Inserted;\n          insertStylesheet(instance, qualifiedProps.precedence, hoistableRoot);\n          resource.instance = instance;\n          return instance;\n        }\n\n      case 'script':\n        {\n          // This typing is enforce by `getResource`. If we change the logic\n          // there for what qualifies as a stylesheet resource we need to ensure\n          // this cast still makes sense;\n          const borrowedScriptProps = props;\n          const key = getScriptKey(borrowedScriptProps.src); // Attempt to hydrate instance from DOM\n\n          let instance = hoistableRoot.querySelector(getScriptSelectorFromKey(key));\n\n          if (instance) {\n            resource.instance = instance;\n            markNodeAsHoistable(instance);\n            return instance;\n          }\n\n          let scriptProps = borrowedScriptProps;\n          const preloadProps = preloadPropsMap.get(key);\n\n          if (preloadProps) {\n            scriptProps = assign({}, borrowedScriptProps);\n            adoptPreloadPropsForScript(scriptProps, preloadProps);\n          } // Construct and insert a new instance\n\n\n          const ownerDocument = getDocumentFromRoot(hoistableRoot);\n          instance = ownerDocument.createElement('script');\n          markNodeAsHoistable(instance);\n          setInitialProperties(instance, 'link', scriptProps);\n          ownerDocument.head.appendChild(instance);\n          resource.instance = instance;\n          return instance;\n        }\n\n      case 'void':\n        {\n          return null;\n        }\n\n      default:\n        {\n          throw Error(formatProdErrorMessage(443, resource.type));\n        }\n    }\n  } else {\n    // In the case of stylesheets, they might have already been assigned an\n    // instance during `suspendResource`. But that doesn't mean they were\n    // inserted, because the commit might have been interrupted. So we need to\n    // check now.\n    //\n    // The other resource types are unaffected because they are not\n    // yet suspensey.\n    //\n    // TODO: This is a bit of a code smell. Consider refactoring how\n    // `suspendResource` and `acquireResource` work together. The idea is that\n    // `suspendResource` does all the same stuff as `acquireResource` except\n    // for the insertion.\n    if (resource.type === 'stylesheet' && (resource.state.loading & Inserted) === NotLoaded) {\n      const qualifiedProps = props;\n      const instance = resource.instance;\n      resource.state.loading |= Inserted;\n      insertStylesheet(instance, qualifiedProps.precedence, hoistableRoot);\n    }\n  }\n\n  return resource.instance;\n}\nfunction releaseResource(resource) {\n  resource.count--;\n}\n\nfunction insertStylesheet(instance, precedence, root) {\n  const nodes = root.querySelectorAll('link[rel=\"stylesheet\"][data-precedence],style[data-precedence]');\n  const last = nodes.length ? nodes[nodes.length - 1] : null;\n  let prior = last;\n\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    const nodePrecedence = node.dataset.precedence;\n\n    if (nodePrecedence === precedence) {\n      prior = node;\n    } else if (prior !== last) {\n      break;\n    }\n  }\n\n  if (prior) {\n    // We get the prior from the document so we know it is in the tree.\n    // We also know that links can't be the topmost Node so the parentNode\n    // must exist.\n    prior.parentNode.insertBefore(instance, prior.nextSibling);\n  } else {\n    const parent = root.nodeType === DOCUMENT_NODE ? root.head : root;\n    parent.insertBefore(instance, parent.firstChild);\n  }\n}\n\nfunction adoptPreloadPropsForStylesheet(stylesheetProps, preloadProps) {\n  if (stylesheetProps.crossOrigin == null) stylesheetProps.crossOrigin = preloadProps.crossOrigin;\n  if (stylesheetProps.referrerPolicy == null) stylesheetProps.referrerPolicy = preloadProps.referrerPolicy;\n  if (stylesheetProps.title == null) stylesheetProps.title = preloadProps.title;\n}\n\nfunction adoptPreloadPropsForScript(scriptProps, preloadProps) {\n  if (scriptProps.crossOrigin == null) scriptProps.crossOrigin = preloadProps.crossOrigin;\n  if (scriptProps.referrerPolicy == null) scriptProps.referrerPolicy = preloadProps.referrerPolicy;\n  if (scriptProps.integrity == null) scriptProps.integrity = preloadProps.integrity;\n}\n\nlet tagCaches = null;\nfunction hydrateHoistable(hoistableRoot, type, props, internalInstanceHandle) {\n  const ownerDocument = getDocumentFromRoot(hoistableRoot);\n  let instance = null;\n\n  getInstance: switch (type) {\n    case 'title':\n      {\n        instance = ownerDocument.getElementsByTagName('title')[0];\n\n        if (!instance || isOwnedInstance(instance) || instance.namespaceURI === SVG_NAMESPACE || instance.hasAttribute('itemprop')) {\n          instance = ownerDocument.createElement(type);\n          ownerDocument.head.insertBefore(instance, ownerDocument.querySelector('head > title'));\n        }\n\n        setInitialProperties(instance, type, props);\n        precacheFiberNode(internalInstanceHandle, instance);\n        markNodeAsHoistable(instance);\n        return instance;\n      }\n\n    case 'link':\n      {\n        const cache = getHydratableHoistableCache('link', 'href', ownerDocument);\n        const key = type + (props.href || '');\n        const maybeNodes = cache.get(key);\n\n        if (maybeNodes) {\n          const nodes = maybeNodes;\n\n          for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            if (node.getAttribute('href') !== (props.href == null ? null : props.href) || node.getAttribute('rel') !== (props.rel == null ? null : props.rel) || node.getAttribute('title') !== (props.title == null ? null : props.title) || node.getAttribute('crossorigin') !== (props.crossOrigin == null ? null : props.crossOrigin)) {\n              // mismatch, try the next node;\n              continue;\n            }\n\n            instance = node;\n            nodes.splice(i, 1);\n            break getInstance;\n          }\n        }\n\n        instance = ownerDocument.createElement(type);\n        setInitialProperties(instance, type, props);\n        ownerDocument.head.appendChild(instance);\n        break;\n      }\n\n    case 'meta':\n      {\n        const cache = getHydratableHoistableCache('meta', 'content', ownerDocument);\n        const key = type + (props.content || '');\n        const maybeNodes = cache.get(key);\n\n        if (maybeNodes) {\n          const nodes = maybeNodes;\n\n          for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i]; // We coerce content to string because it is the most likely one to\n\n            if (node.getAttribute('content') !== (props.content == null ? null : '' + props.content) || node.getAttribute('name') !== (props.name == null ? null : props.name) || node.getAttribute('property') !== (props.property == null ? null : props.property) || node.getAttribute('http-equiv') !== (props.httpEquiv == null ? null : props.httpEquiv) || node.getAttribute('charset') !== (props.charSet == null ? null : props.charSet)) {\n              // mismatch, try the next node;\n              continue;\n            }\n\n            instance = node;\n            nodes.splice(i, 1);\n            break getInstance;\n          }\n        }\n\n        instance = ownerDocument.createElement(type);\n        setInitialProperties(instance, type, props);\n        ownerDocument.head.appendChild(instance);\n        break;\n      }\n\n    default:\n      throw Error(formatProdErrorMessage(468, type));\n  } // This node is a match\n\n\n  precacheFiberNode(internalInstanceHandle, instance);\n  markNodeAsHoistable(instance);\n  return instance;\n}\n\nfunction getHydratableHoistableCache(type, keyAttribute, ownerDocument) {\n  let cache;\n  let caches;\n\n  if (tagCaches === null) {\n    cache = new Map();\n    caches = tagCaches = new Map();\n    caches.set(ownerDocument, cache);\n  } else {\n    caches = tagCaches;\n    const maybeCache = caches.get(ownerDocument);\n\n    if (!maybeCache) {\n      cache = new Map();\n      caches.set(ownerDocument, cache);\n    } else {\n      cache = maybeCache;\n    }\n  }\n\n  if (cache.has(type)) {\n    // We use type as a special key that signals that this cache has been seeded for this type\n    return cache;\n  } // Mark this cache as seeded for this type\n\n\n  cache.set(type, null);\n  const nodes = ownerDocument.getElementsByTagName(type);\n\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n\n    if (!isOwnedInstance(node) && (type !== 'link' || node.getAttribute('rel') !== 'stylesheet') && node.namespaceURI !== SVG_NAMESPACE) {\n      const nodeKey = node.getAttribute(keyAttribute) || '';\n      const key = type + nodeKey;\n      const existing = cache.get(key);\n\n      if (existing) {\n        existing.push(node);\n      } else {\n        cache.set(key, [node]);\n      }\n    }\n  }\n\n  return cache;\n}\n\nfunction mountHoistable(hoistableRoot, type, instance) {\n  const ownerDocument = getDocumentFromRoot(hoistableRoot);\n  ownerDocument.head.insertBefore(instance, type === 'title' ? ownerDocument.querySelector('head > title') : null);\n}\nfunction unmountHoistable(instance) {\n  instance.parentNode.removeChild(instance);\n}\nfunction isHostHoistableType(type, props, hostContext) {\n  let hostContextProd;\n\n  {\n    hostContextProd = hostContext;\n  } // Global opt out of hoisting for anything in SVG Namespace or anything with an itemProp inside an itemScope\n\n\n  if (hostContextProd === HostContextNamespaceSvg || props.itemProp != null) {\n\n    return false;\n  }\n\n  switch (type) {\n    case 'meta':\n    case 'title':\n      {\n        return true;\n      }\n\n    case 'style':\n      {\n        if (typeof props.precedence !== 'string' || typeof props.href !== 'string' || props.href === '') {\n\n          return false;\n        }\n\n        return true;\n      }\n\n    case 'link':\n      {\n        if (typeof props.rel !== 'string' || typeof props.href !== 'string' || props.href === '' || props.onLoad || props.onError) {\n\n          return false;\n        }\n\n        switch (props.rel) {\n          case 'stylesheet':\n            {\n              const precedence = props.precedence,\n                    disabled = props.disabled;\n\n              return typeof precedence === 'string' && disabled == null;\n            }\n\n          default:\n            {\n              return true;\n            }\n        }\n      }\n\n    case 'script':\n      {\n        if (props.async !== true || props.onLoad || props.onError || typeof props.src !== 'string' || !props.src) {\n\n          return false;\n        }\n\n        return true;\n      }\n\n    case 'noscript':\n    case 'template':\n      {\n\n        return false;\n      }\n  }\n\n  return false;\n}\nfunction mayResourceSuspendCommit(resource) {\n  return resource.type === 'stylesheet' && (resource.state.loading & Inserted) === NotLoaded;\n}\nfunction preloadInstance(type, props) {\n  // Return true to indicate it's already loaded\n  return true;\n}\nfunction preloadResource(resource) {\n  if (resource.type === 'stylesheet' && (resource.state.loading & Settled) === NotLoaded) {\n    // we have not finished loading the underlying stylesheet yet.\n    return false;\n  } // Return true to indicate it's already loaded\n\n\n  return true;\n}\nlet suspendedState = null; // We use a noop function when we begin suspending because if possible we want the\n// waitfor step to finish synchronously. If it doesn't we'll return a function to\n// provide the actual unsuspend function and that will get completed when the count\n// hits zero or it will get cancelled if the root starts new work.\n\nfunction noop() {}\n\nfunction startSuspendingCommit() {\n  suspendedState = {\n    stylesheets: null,\n    count: 0,\n    unsuspend: noop\n  };\n}\nfunction suspendResource(hoistableRoot, resource, props) {\n  if (suspendedState === null) {\n    throw Error(formatProdErrorMessage(475));\n  }\n\n  const state = suspendedState;\n\n  if (resource.type === 'stylesheet') {\n    if (typeof props.media === 'string') {\n      // If we don't currently match media we avoid suspending on this resource\n      // and let it insert on the mutation path\n      if (matchMedia(props.media).matches === false) {\n        return;\n      }\n    }\n\n    if ((resource.state.loading & Inserted) === NotLoaded) {\n      if (resource.instance === null) {\n        const qualifiedProps = props;\n        const key = getStyleKey(qualifiedProps.href); // Attempt to hydrate instance from DOM\n\n        let instance = hoistableRoot.querySelector(getStylesheetSelectorFromKey(key));\n\n        if (instance) {\n          // If this instance has a loading state it came from the Fizz runtime.\n          // If there is not loading state it is assumed to have been server rendered\n          // as part of the preamble and therefore synchronously loaded. It could have\n          // errored however which we still do not yet have a means to detect. For now\n          // we assume it is loaded.\n          const maybeLoadingState = instance._p;\n\n          if (maybeLoadingState !== null && typeof maybeLoadingState === 'object' && // $FlowFixMe[method-unbinding]\n          typeof maybeLoadingState.then === 'function') {\n            const loadingState = maybeLoadingState;\n            state.count++;\n            const ping = onUnsuspend.bind(state);\n            loadingState.then(ping, ping);\n          }\n\n          resource.state.loading |= Inserted;\n          resource.instance = instance;\n          markNodeAsHoistable(instance);\n          return;\n        }\n\n        const ownerDocument = getDocumentFromRoot(hoistableRoot);\n        const stylesheetProps = stylesheetPropsFromRawProps(props);\n        const preloadProps = preloadPropsMap.get(key);\n\n        if (preloadProps) {\n          adoptPreloadPropsForStylesheet(stylesheetProps, preloadProps);\n        } // Construct and insert a new instance\n\n\n        instance = ownerDocument.createElement('link');\n        markNodeAsHoistable(instance);\n        const linkInstance = instance; // This Promise is a loading state used by the Fizz runtime. We need this incase there is a race\n        // between this resource being rendered on the client and being rendered with a late completed boundary.\n\n        linkInstance._p = new Promise((resolve, reject) => {\n          linkInstance.onload = resolve;\n          linkInstance.onerror = reject;\n        });\n        setInitialProperties(instance, 'link', stylesheetProps);\n        resource.instance = instance;\n      }\n\n      if (state.stylesheets === null) {\n        state.stylesheets = new Map();\n      }\n\n      state.stylesheets.set(resource, hoistableRoot);\n      const preloadEl = resource.state.preload;\n\n      if (preloadEl && (resource.state.loading & Settled) === NotLoaded) {\n        state.count++;\n        const ping = onUnsuspend.bind(state);\n        preloadEl.addEventListener('load', ping);\n        preloadEl.addEventListener('error', ping);\n      }\n    }\n  }\n}\nfunction waitForCommitToBeReady() {\n  if (suspendedState === null) {\n    throw Error(formatProdErrorMessage(475));\n  }\n\n  const state = suspendedState;\n\n  if (state.stylesheets && state.count === 0) {\n    // We are not currently blocked but we have not inserted all stylesheets.\n    // If this insertion happens and loads or errors synchronously then we can\n    // avoid suspending the commit. To do this we check the count again immediately after\n    insertSuspendedStylesheets(state, state.stylesheets);\n  } // We need to check the count again because the inserted stylesheets may have led to new\n  // tasks to wait on.\n\n\n  if (state.count > 0) {\n    return commit => {\n      // We almost never want to show content before its styles have loaded. But\n      // eventually we will give up and allow unstyled content. So this number is\n      // somewhat arbitrary — big enough that you'd only reach it under\n      // extreme circumstances.\n      // TODO: Figure out what the browser engines do during initial page load and\n      // consider aligning our behavior with that.\n      const stylesheetTimer = setTimeout(() => {\n        if (state.stylesheets) {\n          insertSuspendedStylesheets(state, state.stylesheets);\n        }\n\n        if (state.unsuspend) {\n          const unsuspend = state.unsuspend;\n          state.unsuspend = null;\n          unsuspend();\n        }\n      }, 60000); // one minute\n\n      state.unsuspend = commit;\n      return () => {\n        state.unsuspend = null;\n        clearTimeout(stylesheetTimer);\n      };\n    };\n  }\n\n  return null;\n}\n\nfunction onUnsuspend() {\n  this.count--;\n\n  if (this.count === 0) {\n    if (this.stylesheets) {\n      // If we haven't actually inserted the stylesheets yet we need to do so now before starting the commit.\n      // The reason we do this after everything else has finished is because we want to have all the stylesheets\n      // load synchronously right before mutating. Ideally the new styles will cause a single recalc only on the\n      // new tree. When we filled up stylesheets we only inlcuded stylesheets with matching media attributes so we\n      // wait for them to load before actually continuing. We expect this to increase the count above zero\n      insertSuspendedStylesheets(this, this.stylesheets);\n    } else if (this.unsuspend) {\n      const unsuspend = this.unsuspend;\n      this.unsuspend = null;\n      unsuspend();\n    }\n  }\n} // We use a value that is type distinct from precedence to track which one is last.\n// This ensures there is no collision with user defined precedences. Normally we would\n// just track this in module scope but since the precedences are tracked per HoistableRoot\n// we need to associate it to something other than a global scope hence why we try to\n// colocate it with the map of precedences in the first place\n\n\nconst LAST_PRECEDENCE = null; // This is typecast to non-null because it will always be set before read.\n// it is important that this not be used except when the stack guarantees it exists.\n// Currentlyt his is only during insertSuspendedStylesheet.\n\nlet precedencesByRoot = null;\n\nfunction insertSuspendedStylesheets(state, resources) {\n  // We need to clear this out so we don't try to reinsert after the stylesheets have loaded\n  state.stylesheets = null;\n\n  if (state.unsuspend === null) {\n    // The suspended commit was cancelled. We don't need to insert any stylesheets.\n    return;\n  } // Temporarily increment count. we don't want any synchronously loaded stylesheets to try to unsuspend\n  // before we finish inserting all stylesheets.\n\n\n  state.count++;\n  precedencesByRoot = new Map();\n  resources.forEach(insertStylesheetIntoRoot, state);\n  precedencesByRoot = null; // We can remove our temporary count and if we're still at zero we can unsuspend.\n  // If we are in the synchronous phase before deciding if the commit should suspend and this\n  // ends up hitting the unsuspend path it will just invoke the noop unsuspend.\n\n  onUnsuspend.call(state);\n}\n\nfunction insertStylesheetIntoRoot(root, resource, map) {\n  if (resource.state.loading & Inserted) {\n    // This resource was inserted by another root committing. we don't need to insert it again\n    return;\n  }\n\n  let last;\n  let precedences = precedencesByRoot.get(root);\n\n  if (!precedences) {\n    precedences = new Map();\n    precedencesByRoot.set(root, precedences);\n    const nodes = root.querySelectorAll('link[data-precedence],style[data-precedence]');\n\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n\n      if (node.nodeName === 'link' || // We omit style tags with media=\"not all\" because they are not in the right position\n      // and will be hoisted by the Fizz runtime imminently.\n      node.getAttribute('media') !== 'not all') {\n        precedences.set(node.dataset.precedence, node);\n        last = node;\n      }\n    }\n\n    if (last) {\n      precedences.set(LAST_PRECEDENCE, last);\n    }\n  } else {\n    last = precedences.get(LAST_PRECEDENCE);\n  } // We only call this after we have constructed an instance so we assume it here\n\n\n  const instance = resource.instance; // We will always have a precedence for stylesheet instances\n\n  const precedence = instance.getAttribute('data-precedence');\n  const prior = precedences.get(precedence) || last;\n\n  if (prior === last) {\n    precedences.set(LAST_PRECEDENCE, instance);\n  }\n\n  precedences.set(precedence, instance);\n  this.count++;\n  const onComplete = onUnsuspend.bind(this);\n  instance.addEventListener('load', onComplete);\n  instance.addEventListener('error', onComplete);\n\n  if (prior) {\n    prior.parentNode.insertBefore(instance, prior.nextSibling);\n  } else {\n    const parent = root.nodeType === DOCUMENT_NODE ? root.head : root;\n    parent.insertBefore(instance, parent.firstChild);\n  }\n\n  resource.state.loading |= Inserted;\n}\n\nconst NotPendingTransition = NotPending;\n\nfunction ReactDOMRoot(internalRoot) {\n  this._internalRoot = internalRoot;\n} // $FlowFixMe[prop-missing] found when upgrading Flow\n\n\nReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = // $FlowFixMe[missing-this-annot]\nfunction (children) {\n  const root = this._internalRoot;\n\n  if (root === null) {\n    throw Error(formatProdErrorMessage(409));\n  }\n\n  updateContainer(children, root, null, null);\n}; // $FlowFixMe[prop-missing] found when upgrading Flow\n\n\nReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = // $FlowFixMe[missing-this-annot]\nfunction () {\n\n  const root = this._internalRoot;\n\n  if (root !== null) {\n    this._internalRoot = null;\n    const container = root.containerInfo;\n\n    flushSync$1(() => {\n      updateContainer(null, root, null, null);\n    });\n    unmarkContainerAsRoot(container);\n  }\n};\n\nfunction createRoot$1(container, options) {\n  if (!isValidContainer(container)) {\n    throw Error(formatProdErrorMessage(299));\n  }\n  let isStrictMode = false;\n  let concurrentUpdatesByDefaultOverride = false;\n  let identifierPrefix = '';\n  let onUncaughtError = defaultOnUncaughtError;\n  let onCaughtError = defaultOnCaughtError;\n  let onRecoverableError = defaultOnRecoverableError;\n  let transitionCallbacks = null;\n\n  if (options !== null && options !== undefined) {\n\n    if (options.unstable_strictMode === true) {\n      isStrictMode = true;\n    }\n\n    if (options.identifierPrefix !== undefined) {\n      identifierPrefix = options.identifierPrefix;\n    }\n\n    if (options.onUncaughtError !== undefined) {\n      onUncaughtError = options.onUncaughtError;\n    }\n\n    if (options.onCaughtError !== undefined) {\n      onCaughtError = options.onCaughtError;\n    }\n\n    if (options.onRecoverableError !== undefined) {\n      onRecoverableError = options.onRecoverableError;\n    }\n\n    if (options.unstable_transitionCallbacks !== undefined) {\n      transitionCallbacks = options.unstable_transitionCallbacks;\n    }\n  }\n\n  const root = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onUncaughtError, onCaughtError, onRecoverableError, transitionCallbacks);\n  markContainerAsRoot(root.current, container);\n  const rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;\n  listenToAllSupportedEvents(rootContainerElement); // $FlowFixMe[invalid-constructor] Flow no longer supports calling new on functions\n\n  return new ReactDOMRoot(root);\n} // $FlowFixMe[missing-this-annot]\n\nfunction ReactDOMHydrationRoot(internalRoot) {\n  this._internalRoot = internalRoot;\n}\n\nfunction scheduleHydration(target) {\n  if (target) {\n    queueExplicitHydrationTarget(target);\n  }\n} // $FlowFixMe[prop-missing] found when upgrading Flow\n\n\nReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;\nfunction hydrateRoot$1(container, initialChildren, options) {\n  if (!isValidContainer(container)) {\n    throw Error(formatProdErrorMessage(299));\n  }\n  // the hydration callbacks.\n\n\n  const hydrationCallbacks = options != null ? options : null;\n  let isStrictMode = false;\n  let concurrentUpdatesByDefaultOverride = false;\n  let identifierPrefix = '';\n  let onUncaughtError = defaultOnUncaughtError;\n  let onCaughtError = defaultOnCaughtError;\n  let onRecoverableError = defaultOnRecoverableError;\n  let transitionCallbacks = null;\n  let formState = null;\n\n  if (options !== null && options !== undefined) {\n    if (options.unstable_strictMode === true) {\n      isStrictMode = true;\n    }\n\n    if (options.identifierPrefix !== undefined) {\n      identifierPrefix = options.identifierPrefix;\n    }\n\n    if (options.onUncaughtError !== undefined) {\n      onUncaughtError = options.onUncaughtError;\n    }\n\n    if (options.onCaughtError !== undefined) {\n      onCaughtError = options.onCaughtError;\n    }\n\n    if (options.onRecoverableError !== undefined) {\n      onRecoverableError = options.onRecoverableError;\n    }\n\n    if (options.unstable_transitionCallbacks !== undefined) {\n      transitionCallbacks = options.unstable_transitionCallbacks;\n    }\n\n    {\n      if (options.formState !== undefined) {\n        formState = options.formState;\n      }\n    }\n  }\n\n  const root = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onUncaughtError, onCaughtError, onRecoverableError, transitionCallbacks, formState);\n  markContainerAsRoot(root.current, container); // This can't be a comment node since hydration doesn't work on comment nodes anyway.\n\n  listenToAllSupportedEvents(container); // $FlowFixMe[invalid-constructor] Flow no longer supports calling new on functions\n\n  return new ReactDOMHydrationRoot(root);\n}\nfunction isValidContainer(node) {\n  return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers  ));\n} // TODO: Remove this function which also includes comment nodes.\n// We only use it in places that are currently more relaxed.\n\nfunction isValidContainerLegacy(node) {\n  return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));\n}\n\nfunction noopOnRecoverableError() {// This isn't reachable because onRecoverableError isn't called in the\n  // legacy API.\n}\n\nfunction legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {\n  if (isHydrationContainer) {\n    if (typeof callback === 'function') {\n      const originalCallback = callback;\n\n      callback = function () {\n        const instance = getPublicRootInstance(root);\n        originalCallback.call(instance);\n      };\n    }\n\n    const root = createHydrationContainer(initialChildren, callback, container, LegacyRoot, null, // hydrationCallbacks\n    false, // isStrictMode\n    false, // concurrentUpdatesByDefaultOverride,\n    '', // identifierPrefix\n    defaultOnUncaughtError, defaultOnCaughtError, noopOnRecoverableError, // TODO(luna) Support hydration later\n    null, null);\n    container._reactRootContainer = root;\n    markContainerAsRoot(root.current, container);\n    const rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container; // $FlowFixMe[incompatible-call]\n\n    listenToAllSupportedEvents(rootContainerElement);\n    flushSync$1();\n    return root;\n  } else {\n    // First clear any existing content.\n    clearContainer(container);\n\n    if (typeof callback === 'function') {\n      const originalCallback = callback;\n\n      callback = function () {\n        const instance = getPublicRootInstance(root);\n        originalCallback.call(instance);\n      };\n    }\n\n    const root = createContainer(container, LegacyRoot, null, // hydrationCallbacks\n    false, // isStrictMode\n    false, // concurrentUpdatesByDefaultOverride,\n    '', // identifierPrefix\n    defaultOnUncaughtError, defaultOnCaughtError, noopOnRecoverableError, null // transitionCallbacks\n    );\n    container._reactRootContainer = root;\n    markContainerAsRoot(root.current, container);\n    const rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container; // $FlowFixMe[incompatible-call]\n\n    listenToAllSupportedEvents(rootContainerElement); // Initial mount should not be batched.\n\n    flushSync$1(() => {\n      updateContainer(initialChildren, root, parentComponent, callback);\n    });\n    return root;\n  }\n}\n\nfunction legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {\n\n  const maybeRoot = container._reactRootContainer;\n  let root;\n\n  if (!maybeRoot) {\n    // Initial mount\n    root = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);\n  } else {\n    root = maybeRoot;\n\n    if (typeof callback === 'function') {\n      const originalCallback = callback;\n\n      callback = function () {\n        const instance = getPublicRootInstance(root);\n        originalCallback.call(instance);\n      };\n    } // Update\n\n\n    updateContainer(children, root, parentComponent, callback);\n  }\n\n  return getPublicRootInstance(root);\n}\n\nfunction findDOMNode(componentOrElement) {\n\n  if (componentOrElement == null) {\n    return null;\n  }\n\n  if (componentOrElement.nodeType === ELEMENT_NODE) {\n    return componentOrElement;\n  }\n\n  return findHostInstance(componentOrElement);\n}\nfunction render(element, container, callback) {\n\n  if (!isValidContainerLegacy(container)) {\n    throw Error(formatProdErrorMessage(299));\n  }\n\n  return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);\n}\nfunction unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {\n\n  if (!isValidContainerLegacy(containerNode)) {\n    throw Error(formatProdErrorMessage(299));\n  }\n\n  if (parentComponent == null || !has(parentComponent)) {\n    throw Error(formatProdErrorMessage(38));\n  }\n\n  return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);\n}\nfunction unmountComponentAtNode(container) {\n\n  if (!isValidContainerLegacy(container)) {\n    throw Error(formatProdErrorMessage(299));\n  }\n\n  if (container._reactRootContainer) {\n\n\n    flushSync$1(() => {\n      legacyRenderSubtreeIntoContainer(null, null, container, false, () => {\n        // $FlowFixMe[incompatible-type] This should probably use `delete container._reactRootContainer`\n        container._reactRootContainer = null;\n        unmarkContainerAsRoot(container);\n      });\n    }); // If you call unmountComponentAtNode twice in quick succession, you'll\n    // get `true` twice. That's probably fine?\n\n    return true;\n  } else {\n\n    return false;\n  }\n}\n\nfunction getCrossOriginString(input) {\n  if (typeof input === 'string') {\n    return input === 'use-credentials' ? input : '';\n  }\n\n  return undefined;\n}\nfunction getCrossOriginStringAs(as, input) {\n  if (as === 'font') {\n    return '';\n  }\n\n  if (typeof input === 'string') {\n    return input === 'use-credentials' ? input : '';\n  }\n\n  return undefined;\n}\n\nconst ReactDOMCurrentDispatcher = Internals.ReactDOMCurrentDispatcher;\nfunction prefetchDNS(href) {\n\n  if (typeof href === 'string') {\n    ReactDOMCurrentDispatcher.current.prefetchDNS(href);\n  } // We don't error because preconnect needs to be resilient to being called in a variety of scopes\n  // and the runtime may not be capable of responding. The function is optimistic and not critical\n  // so we favor silent bailout over warning or erroring.\n\n}\nfunction preconnect(href, options) {\n\n  if (typeof href === 'string') {\n    const crossOrigin = options ? getCrossOriginString(options.crossOrigin) : null;\n    ReactDOMCurrentDispatcher.current.preconnect(href, crossOrigin);\n  } // We don't error because preconnect needs to be resilient to being called in a variety of scopes\n  // and the runtime may not be capable of responding. The function is optimistic and not critical\n  // so we favor silent bailout over warning or erroring.\n\n}\nfunction preload(href, options) {\n\n  if (typeof href === 'string' && // We check existence because we cannot enforce this function is actually called with the stated type\n  typeof options === 'object' && options !== null && typeof options.as === 'string') {\n    const as = options.as;\n    const crossOrigin = getCrossOriginStringAs(as, options.crossOrigin);\n    ReactDOMCurrentDispatcher.current.preload(href, as, {\n      crossOrigin,\n      integrity: typeof options.integrity === 'string' ? options.integrity : undefined,\n      nonce: typeof options.nonce === 'string' ? options.nonce : undefined,\n      type: typeof options.type === 'string' ? options.type : undefined,\n      fetchPriority: typeof options.fetchPriority === 'string' ? options.fetchPriority : undefined,\n      referrerPolicy: typeof options.referrerPolicy === 'string' ? options.referrerPolicy : undefined,\n      imageSrcSet: typeof options.imageSrcSet === 'string' ? options.imageSrcSet : undefined,\n      imageSizes: typeof options.imageSizes === 'string' ? options.imageSizes : undefined,\n      media: typeof options.media === 'string' ? options.media : undefined\n    });\n  } // We don't error because preload needs to be resilient to being called in a variety of scopes\n  // and the runtime may not be capable of responding. The function is optimistic and not critical\n  // so we favor silent bailout over warning or erroring.\n\n}\nfunction preloadModule(href, options) {\n\n  if (typeof href === 'string') {\n    if (options) {\n      const crossOrigin = getCrossOriginStringAs(options.as, options.crossOrigin);\n      ReactDOMCurrentDispatcher.current.preloadModule(href, {\n        as: typeof options.as === 'string' && options.as !== 'script' ? options.as : undefined,\n        crossOrigin,\n        integrity: typeof options.integrity === 'string' ? options.integrity : undefined\n      });\n    } else {\n      ReactDOMCurrentDispatcher.current.preloadModule(href);\n    }\n  } // We don't error because preload needs to be resilient to being called in a variety of scopes\n  // and the runtime may not be capable of responding. The function is optimistic and not critical\n  // so we favor silent bailout over warning or erroring.\n\n}\nfunction preinit(href, options) {\n\n  if (typeof href === 'string' && options && typeof options.as === 'string') {\n    const as = options.as;\n    const crossOrigin = getCrossOriginStringAs(as, options.crossOrigin);\n    const integrity = typeof options.integrity === 'string' ? options.integrity : undefined;\n    const fetchPriority = typeof options.fetchPriority === 'string' ? options.fetchPriority : undefined;\n\n    if (as === 'style') {\n      ReactDOMCurrentDispatcher.current.preinitStyle(href, typeof options.precedence === 'string' ? options.precedence : undefined, {\n        crossOrigin,\n        integrity,\n        fetchPriority\n      });\n    } else if (as === 'script') {\n      ReactDOMCurrentDispatcher.current.preinitScript(href, {\n        crossOrigin,\n        integrity,\n        fetchPriority,\n        nonce: typeof options.nonce === 'string' ? options.nonce : undefined\n      });\n    }\n  } // We don't error because preinit needs to be resilient to being called in a variety of scopes\n  // and the runtime may not be capable of responding. The function is optimistic and not critical\n  // so we favor silent bailout over warning or erroring.\n\n}\nfunction preinitModule(href, options) {\n\n  if (typeof href === 'string') {\n    if (typeof options === 'object' && options !== null) {\n      if (options.as == null || options.as === 'script') {\n        const crossOrigin = getCrossOriginStringAs(options.as, options.crossOrigin);\n        ReactDOMCurrentDispatcher.current.preinitModuleScript(href, {\n          crossOrigin,\n          integrity: typeof options.integrity === 'string' ? options.integrity : undefined,\n          nonce: typeof options.nonce === 'string' ? options.nonce : undefined\n        });\n      }\n    } else if (options == null) {\n      ReactDOMCurrentDispatcher.current.preinitModuleScript(href);\n    }\n  } // We don't error because preinit needs to be resilient to being called in a variety of scopes\n  // and the runtime may not be capable of responding. The function is optimistic and not critical\n  // so we favor silent bailout over warning or erroring.\n\n}\n\nfunction createPortal(children, container) {\n  let key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n  if (!isValidContainer(container)) {\n    throw Error(formatProdErrorMessage(299));\n  } // TODO: pass ReactDOM portal implementation as third argument\n  // $FlowFixMe[incompatible-return] The Flow type is opaque but there's no way to actually create it.\n\n\n  return createPortal$1(children, container, null, key);\n}\n\nfunction renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {\n  return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);\n}\n\nfunction createRoot(container, options) {\n\n  return createRoot$1(container, options);\n}\n\nfunction hydrateRoot(container, initialChildren, options) {\n\n  return hydrateRoot$1(container, initialChildren, options);\n} // Overload the definition to the two valid signatures.\n// Warning, this opts-out of checking the function body.\n// eslint-disable-next-line no-redeclare\n// eslint-disable-next-line no-redeclare\n\n\nfunction flushSync(fn) {\n\n  return flushSync$1(fn);\n} // Expose findDOMNode on internals\n\n\nInternals.findDOMNode = findDOMNode;\n\nfunction unstable_batchedUpdates(fn, a) {\n  // batchedUpdates was a legacy mode feature that is a no-op outside of\n  // legacy mode. In 19, we made it an actual no-op, but we're keeping it\n  // for now since there may be libraries that still include it.\n  return fn(a);\n}\n// This is an array for better minification.\n\nInternals.Events = [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, unstable_batchedUpdates];\ninjectIntoDevTools({\n  findFiberByHostInstance: getClosestInstanceFromNode,\n  bundleType: 0,\n  version: ReactVersion,\n  rendererPackageName: 'react-dom'\n});\n\nexports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;\nexports.createPortal = createPortal;\nexports.createRoot = createRoot;\nexports.flushSync = flushSync;\nexports.hydrateRoot = hydrateRoot;\nexports.preconnect = preconnect;\nexports.prefetchDNS = prefetchDNS;\nexports.preinit = preinit;\nexports.preinitModule = preinitModule;\nexports.preload = preload;\nexports.preloadModule = preloadModule;\nexports.render = render;\nexports.unmountComponentAtNode = unmountComponentAtNode;\nexports.unstable_batchedUpdates = unstable_batchedUpdates;\nexports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;\nexports.useFormState = useFormState;\nexports.useFormStatus = useFormStatus;\nexports.version = ReactVersion;","'use strict';\n\nvar m = require('react-dom');\nif (process.env.NODE_ENV === 'production') {\n  exports.createRoot = m.createRoot;\n  exports.hydrateRoot = m.hydrateRoot;\n} else {\n  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n  exports.createRoot = function (c, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.createRoot(c, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n  exports.hydrateRoot = function (c, h, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.hydrateRoot(c, h, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n}\n","'use strict';\n\nfunction checkDCE() {\n  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n  if (\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'\n  ) {\n    return;\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    // This branch is unreachable because this function is only called\n    // in production, but the condition is true only in development.\n    // Therefore if the branch is still here, dead code elimination wasn't\n    // properly applied.\n    // Don't change the message. React DevTools relies on it. Also make sure\n    // this message doesn't occur elsewhere in this function, or it will cause\n    // a false positive.\n    throw new Error('^_^');\n  }\n  try {\n    // Verify that the code above has been dead code eliminated (DCE'd).\n    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);\n  } catch (err) {\n    // DevTools shouldn't crash React, no matter what.\n    // We should still report in case we break this code.\n    console.error(err);\n  }\n}\n\nif (process.env.NODE_ENV === 'production') {\n  // DCE check should happen before ReactDOM bundle executes so that\n  // DevTools can report bad minification during injection.\n  checkDCE();\n  module.exports = require('./cjs/react-dom.production.min.js');\n} else {\n  module.exports = require('./cjs/react-dom.development.js');\n}\n","/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar React = require('react');\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n// The Symbol used to tag the ReactElement-like types.\nconst REACT_ELEMENT_TYPE = Symbol.for('react.element');\nconst REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\n\nconst ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\n// $FlowFixMe[method-unbinding]\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\nconst ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\n\nfunction hasValidRef(config) {\n\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n\n  return config.key !== undefined;\n}\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */\n\n\nfunction ReactElement(type, key, _ref, self, source, owner, props) {\n  let ref;\n\n  {\n    ref = _ref;\n  }\n\n  let element;\n\n  {\n    // In prod, `ref` is a regular property. It will be removed in a\n    // future release.\n    element = {\n      // This tag allows us to uniquely identify this as a React Element\n      $$typeof: REACT_ELEMENT_TYPE,\n      // Built-in properties that belong on the element\n      type,\n      key,\n      ref,\n      props,\n      // Record the component responsible for creating this element.\n      _owner: owner\n    };\n  }\n\n  return element;\n}\n/**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */\n\n\nfunction jsxProd(type, config, maybeKey) {\n  let propName; // Reserved names are extracted\n\n  const props = {};\n  let key = null;\n  let ref = null; // Currently, key can be spread in as a prop. This causes a potential\n  // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n  // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n  // but as an intermediary step, we will use jsxDEV for everything except\n  // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n  // key is explicitly declared to be undefined or not.\n\n  if (maybeKey !== undefined) {\n\n    key = '' + maybeKey;\n  }\n\n  if (hasValidKey(config)) {\n\n    key = '' + config.key;\n  }\n\n  if (hasValidRef(config)) {\n    {\n      ref = config.ref;\n    }\n  } // Remaining properties are added to a new props object\n\n\n  for (propName in config) {\n    if (hasOwnProperty.call(config, propName) && // Skip over reserved prop names\n    propName !== 'key' && (propName !== 'ref')) {\n      props[propName] = config[propName];\n    }\n  } // Resolve default props\n\n\n  if (type && type.defaultProps) {\n    const defaultProps = type.defaultProps;\n\n    for (propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n  }\n\n  return ReactElement(type, key, ref, undefined, undefined, ReactCurrentOwner.current, props);\n} // While `jsxDEV` should never be called when running in production, we do\n\nconst jsx = jsxProd; // we may want to special case jsxs internally to take advantage of static children.\n// for now we can ship identical prod functions\n\nconst jsxs = jsxProd;\n\nexports.Fragment = REACT_FRAGMENT_TYPE;\nexports.jsx = jsx;\nexports.jsxs = jsxs;","/**\n * @license React\n * react.production.min.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactVersion = '19.0.0-canary-a73c3450e-20240329';\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n// The Symbol used to tag the ReactElement-like types.\nconst REACT_ELEMENT_TYPE = Symbol.for('react.element');\nconst REACT_PORTAL_TYPE = Symbol.for('react.portal');\nconst REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\nconst REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\nconst REACT_PROFILER_TYPE = Symbol.for('react.profiler');\nconst REACT_PROVIDER_TYPE = Symbol.for('react.provider'); // TODO: Delete with enableRenderableContext\nconst REACT_CONTEXT_TYPE = Symbol.for('react.context');\nconst REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\nconst REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\nconst REACT_MEMO_TYPE = Symbol.for('react.memo');\nconst REACT_LAZY_TYPE = Symbol.for('react.lazy');\nconst MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\nconst FAUX_ITERATOR_SYMBOL = '@@iterator';\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n\n  const maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n\n  return null;\n}\n\n/**\n * This is the abstract API for an update queue.\n */\n\n\nconst ReactNoopUpdateQueue = {\n  /**\n   * Checks whether or not this composite component is mounted.\n   * @param {ReactClass} publicInstance The instance we want to test.\n   * @return {boolean} True if mounted, false otherwise.\n   * @protected\n   * @final\n   */\n  isMounted: function (publicInstance) {\n    return false;\n  },\n\n  /**\n   * Forces an update. This should only be invoked when it is known with\n   * certainty that we are **not** in a DOM transaction.\n   *\n   * You may want to call this when you know that some deeper aspect of the\n   * component's state has changed but `setState` was not called.\n   *\n   * This will not invoke `shouldComponentUpdate`, but it will invoke\n   * `componentWillUpdate` and `componentDidUpdate`.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} callerName name of the calling function in the public API.\n   * @internal\n   */\n  enqueueForceUpdate: function (publicInstance, callback, callerName) {\n  },\n\n  /**\n   * Replaces all of the state. Always use this or `setState` to mutate state.\n   * You should treat `this.state` as immutable.\n   *\n   * There is no guarantee that `this.state` will be immediately updated, so\n   * accessing `this.state` after calling this method may return the old value.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} completeState Next state.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} callerName name of the calling function in the public API.\n   * @internal\n   */\n  enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {\n  },\n\n  /**\n   * Sets a subset of the state. This only exists because _pendingState is\n   * internal. This provides a merging strategy that is not available to deep\n   * properties which is confusing. TODO: Expose pendingState or don't use it\n   * during the merge.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} partialState Next partial state to be merged with state.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} Name of the calling function in the public API.\n   * @internal\n   */\n  enqueueSetState: function (publicInstance, partialState, callback, callerName) {\n  }\n};\n\nconst assign = Object.assign;\n\nconst emptyObject = {};\n/**\n * Base class helpers for the updating state of a component.\n */\n\n\nfunction Component(props, context, updater) {\n  this.props = props;\n  this.context = context; // If a component has string refs, we will assign a different object later.\n\n  this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the\n  // renderer.\n\n  this.updater = updater || ReactNoopUpdateQueue;\n}\n\nComponent.prototype.isReactComponent = {};\n/**\n * Sets a subset of the state. Always use this to mutate\n * state. You should treat `this.state` as immutable.\n *\n * There is no guarantee that `this.state` will be immediately updated, so\n * accessing `this.state` after calling this method may return the old value.\n *\n * There is no guarantee that calls to `setState` will run synchronously,\n * as they may eventually be batched together.  You can provide an optional\n * callback that will be executed when the call to setState is actually\n * completed.\n *\n * When a function is provided to setState, it will be called at some point in\n * the future (not synchronously). It will be called with the up to date\n * component arguments (state, props, context). These values can be different\n * from this.* because your function may be called after receiveProps but before\n * shouldComponentUpdate, and this new state, props, and context will not yet be\n * assigned to this.\n *\n * @param {object|function} partialState Next partial state or function to\n *        produce next partial state to be merged with current state.\n * @param {?function} callback Called after state is updated.\n * @final\n * @protected\n */\n\nComponent.prototype.setState = function (partialState, callback) {\n  if (typeof partialState !== 'object' && typeof partialState !== 'function' && partialState != null) {\n    throw new Error('takes an object of state variables to update or a ' + 'function which returns an object of state variables.');\n  }\n\n  this.updater.enqueueSetState(this, partialState, callback, 'setState');\n};\n/**\n * Forces an update. This should only be invoked when it is known with\n * certainty that we are **not** in a DOM transaction.\n *\n * You may want to call this when you know that some deeper aspect of the\n * component's state has changed but `setState` was not called.\n *\n * This will not invoke `shouldComponentUpdate`, but it will invoke\n * `componentWillUpdate` and `componentDidUpdate`.\n *\n * @param {?function} callback Called after update is complete.\n * @final\n * @protected\n */\n\n\nComponent.prototype.forceUpdate = function (callback) {\n  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');\n};\n\nfunction ComponentDummy() {}\n\nComponentDummy.prototype = Component.prototype;\n/**\n * Convenience component with default shallow equality check for sCU.\n */\n\nfunction PureComponent(props, context, updater) {\n  this.props = props;\n  this.context = context; // If a component has string refs, we will assign a different object later.\n\n  this.refs = emptyObject;\n  this.updater = updater || ReactNoopUpdateQueue;\n}\n\nconst pureComponentPrototype = PureComponent.prototype = new ComponentDummy();\npureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.\n\nassign(pureComponentPrototype, Component.prototype);\npureComponentPrototype.isPureReactComponent = true;\n\n// an immutable object with a single mutable value\nfunction createRef() {\n  const refObject = {\n    current: null\n  };\n\n  return refObject;\n}\n\nconst isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\nfunction isArray(a) {\n  return isArrayImpl(a);\n}\n\n// -----------------------------------------------------------------------------\n// Ready for next major.\n//\n// Alias __NEXT_MAJOR__ to false for easier skimming.\n// -----------------------------------------------------------------------------\n\nconst __NEXT_MAJOR__ = false; // Removes legacy style context\n// as a normal prop instead of stripping it from the props object.\n// Passes `ref` as a normal prop instead of stripping it from the props object\n// during element creation.\n\nconst enableRefAsProp = __NEXT_MAJOR__;\n\n/**\n * Keeps track of the current dispatcher.\n */\nconst ReactCurrentDispatcher = {\n  current: null\n};\n\n/**\n * Keeps track of the current Cache dispatcher.\n */\nconst ReactCurrentCache = {\n  current: null\n};\n\n/**\n * Keeps track of the current batch's configuration such as how long an update\n * should suspend for if it needs to.\n */\nconst ReactCurrentBatchConfig = {\n  transition: null\n};\n\n/**\n * Keeps track of the current owner.\n *\n * The current owner is the component who should own any components that are\n * currently being constructed.\n */\nconst ReactCurrentOwner$1 = {\n  /**\n   * @internal\n   * @type {ReactComponent}\n   */\n  current: null\n};\n\nconst ReactSharedInternals = {\n  ReactCurrentDispatcher,\n  ReactCurrentCache,\n  ReactCurrentBatchConfig,\n  ReactCurrentOwner: ReactCurrentOwner$1\n};\n\n// $FlowFixMe[method-unbinding]\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\nconst ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\n\nfunction hasValidRef(config) {\n\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n\n  return config.key !== undefined;\n}\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */\n\n\nfunction ReactElement(type, key, _ref, self, source, owner, props) {\n  let ref;\n\n  {\n    ref = _ref;\n  }\n\n  let element;\n\n  {\n    // In prod, `ref` is a regular property. It will be removed in a\n    // future release.\n    element = {\n      // This tag allows us to uniquely identify this as a React Element\n      $$typeof: REACT_ELEMENT_TYPE,\n      // Built-in properties that belong on the element\n      type,\n      key,\n      ref,\n      props,\n      // Record the component responsible for creating this element.\n      _owner: owner\n    };\n  }\n\n  return element;\n}\n/**\n * Create and return a new ReactElement of the given type.\n * See https://reactjs.org/docs/react-api.html#createelement\n */\n\nfunction createElement(type, config, children) {\n\n  let propName; // Reserved names are extracted\n\n  const props = {};\n  let key = null;\n  let ref = null;\n\n  if (config != null) {\n    if (hasValidRef(config)) {\n      {\n        ref = config.ref;\n      }\n    }\n\n    if (hasValidKey(config)) {\n\n      key = '' + config.key;\n    } // Remaining properties are added to a new props object\n\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && // Skip over reserved prop names\n      propName !== 'key' && (propName !== 'ref') && // Even though we don't use these anymore in the runtime, we don't want\n      // them to appear as props, so in createElement we filter them out.\n      // We don't have to do this in the jsx() runtime because the jsx()\n      // transform never passed these as props; it used separate arguments.\n      propName !== '__self' && propName !== '__source') {\n        props[propName] = config[propName];\n      }\n    }\n  } // Children can be more than one argument, and those are transferred onto\n  // the newly allocated props object.\n\n\n  const childrenLength = arguments.length - 2;\n\n  if (childrenLength === 1) {\n    props.children = children;\n  } else if (childrenLength > 1) {\n    const childArray = Array(childrenLength);\n\n    for (let i = 0; i < childrenLength; i++) {\n      childArray[i] = arguments[i + 2];\n    }\n\n    props.children = childArray;\n  } // Resolve default props\n\n\n  if (type && type.defaultProps) {\n    const defaultProps = type.defaultProps;\n\n    for (propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n  }\n\n  const element = ReactElement(type, key, ref, undefined, undefined, ReactCurrentOwner.current, props);\n\n  return element;\n}\n/**\n * Return a function that produces ReactElements of a given type.\n * See https://reactjs.org/docs/react-api.html#createfactory\n */\n\nfunction createFactory(type) {\n  const factory = createElement.bind(null, type); // Expose the type on the factory and the prototype so that it can be\n  // easily accessed on elements. E.g. `<Foo />.type === Foo`.\n  // This should not be named `constructor` since this may not be the function\n  // that created the element, and it may not even be a constructor.\n  // Legacy hook: remove it\n\n  factory.type = type;\n\n  return factory;\n}\nfunction cloneAndReplaceKey(oldElement, newKey) {\n  return ReactElement(oldElement.type, newKey, // When enableRefAsProp is on, this argument is ignored. This check only\n  // exists to avoid the `ref` access warning.\n  oldElement.ref, undefined, undefined, oldElement._owner, oldElement.props);\n}\n/**\n * Clone and return a new ReactElement using element as the starting point.\n * See https://reactjs.org/docs/react-api.html#cloneelement\n */\n\nfunction cloneElement(element, config, children) {\n  if (element === null || element === undefined) {\n    throw new Error(\"The argument must be a React element, but you passed \" + element + \".\");\n  }\n\n  let propName; // Original props are copied\n\n  const props = assign({}, element.props); // Reserved names are extracted\n\n  let key = element.key;\n  let ref = element.ref; // Owner will be preserved, unless ref is overridden\n\n  let owner = element._owner;\n\n  if (config != null) {\n    if (hasValidRef(config)) {\n      {\n        // Silently steal the ref from the parent.\n        ref = config.ref;\n      }\n\n      owner = ReactCurrentOwner.current;\n    }\n\n    if (hasValidKey(config)) {\n\n      key = '' + config.key;\n    } // Remaining properties override existing props\n\n\n    let defaultProps;\n\n    if (element.type && element.type.defaultProps) {\n      defaultProps = element.type.defaultProps;\n    }\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && // Skip over reserved prop names\n      propName !== 'key' && (propName !== 'ref') && // ...and maybe these, too, though we currently rely on them for\n      // warnings and debug information in dev. Need to decide if we're OK\n      // with dropping them. In the jsx() runtime it's not an issue because\n      // the data gets passed as separate arguments instead of props, but\n      // it would be nice to stop relying on them entirely so we can drop\n      // them from the internal Fiber field.\n      propName !== '__self' && propName !== '__source' && // Undefined `ref` is ignored by cloneElement. We treat it the same as\n      // if the property were missing. This is mostly for\n      // backwards compatibility.\n      !(enableRefAsProp  )) {\n        if (config[propName] === undefined && defaultProps !== undefined) {\n          // Resolve default props\n          props[propName] = defaultProps[propName];\n        } else {\n          props[propName] = config[propName];\n        }\n      }\n    }\n  } // Children can be more than one argument, and those are transferred onto\n  // the newly allocated props object.\n\n\n  const childrenLength = arguments.length - 2;\n\n  if (childrenLength === 1) {\n    props.children = children;\n  } else if (childrenLength > 1) {\n    const childArray = Array(childrenLength);\n\n    for (let i = 0; i < childrenLength; i++) {\n      childArray[i] = arguments[i + 2];\n    }\n\n    props.children = childArray;\n  }\n\n  const clonedElement = ReactElement(element.type, key, ref, undefined, undefined, owner, props);\n\n  return clonedElement;\n}\n/**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */\n\n\nfunction isValidElement(object) {\n  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n}\n\nconst SEPARATOR = '.';\nconst SUBSEPARATOR = ':';\n/**\n * Escape and wrap key so it is safe to use as a reactid\n *\n * @param {string} key to be escaped.\n * @return {string} the escaped key.\n */\n\nfunction escape(key) {\n  const escapeRegex = /[=:]/g;\n  const escaperLookup = {\n    '=': '=0',\n    ':': '=2'\n  };\n  const escapedString = key.replace(escapeRegex, function (match) {\n    return escaperLookup[match];\n  });\n  return '$' + escapedString;\n}\nconst userProvidedKeyEscapeRegex = /\\/+/g;\n\nfunction escapeUserProvidedKey(text) {\n  return text.replace(userProvidedKeyEscapeRegex, '$&/');\n}\n/**\n * Generate a key string that identifies a element within a set.\n *\n * @param {*} element A element that could contain a manual key.\n * @param {number} index Index that is used if a manual key is not provided.\n * @return {string}\n */\n\n\nfunction getElementKey(element, index) {\n  // Do some typechecking here since we call this blindly. We want to ensure\n  // that we don't block potential future ES APIs.\n  if (typeof element === 'object' && element !== null && element.key != null) {\n\n    return escape('' + element.key);\n  } // Implicit key determined by the index in the set\n\n\n  return index.toString(36);\n}\n\nfunction noop$1() {}\n\nfunction resolveThenable(thenable) {\n  switch (thenable.status) {\n    case 'fulfilled':\n      {\n        const fulfilledValue = thenable.value;\n        return fulfilledValue;\n      }\n\n    case 'rejected':\n      {\n        const rejectedError = thenable.reason;\n        throw rejectedError;\n      }\n\n    default:\n      {\n        if (typeof thenable.status === 'string') {\n          // Only instrument the thenable if the status if not defined. If\n          // it's defined, but an unknown value, assume it's been instrumented by\n          // some custom userspace implementation. We treat it as \"pending\".\n          // Attach a dummy listener, to ensure that any lazy initialization can\n          // happen. Flight lazily parses JSON when the value is actually awaited.\n          thenable.then(noop$1, noop$1);\n        } else {\n          // This is an uncached thenable that we haven't seen before.\n          // TODO: Detect infinite ping loops caused by uncached promises.\n          const pendingThenable = thenable;\n          pendingThenable.status = 'pending';\n          pendingThenable.then(fulfilledValue => {\n            if (thenable.status === 'pending') {\n              const fulfilledThenable = thenable;\n              fulfilledThenable.status = 'fulfilled';\n              fulfilledThenable.value = fulfilledValue;\n            }\n          }, error => {\n            if (thenable.status === 'pending') {\n              const rejectedThenable = thenable;\n              rejectedThenable.status = 'rejected';\n              rejectedThenable.reason = error;\n            }\n          });\n        } // Check one more time in case the thenable resolved synchronously.\n\n\n        switch (thenable.status) {\n          case 'fulfilled':\n            {\n              const fulfilledThenable = thenable;\n              return fulfilledThenable.value;\n            }\n\n          case 'rejected':\n            {\n              const rejectedThenable = thenable;\n              const rejectedError = rejectedThenable.reason;\n              throw rejectedError;\n            }\n        }\n      }\n  }\n\n  throw thenable;\n}\n\nfunction mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {\n  const type = typeof children;\n\n  if (type === 'undefined' || type === 'boolean') {\n    // All of the above are perceived as null.\n    children = null;\n  }\n\n  let invokeCallback = false;\n\n  if (children === null) {\n    invokeCallback = true;\n  } else {\n    switch (type) {\n      case 'bigint':\n        {\n          break;\n        }\n\n      // fallthrough for enabled BigInt support\n\n      case 'string':\n      case 'number':\n        invokeCallback = true;\n        break;\n\n      case 'object':\n        switch (children.$$typeof) {\n          case REACT_ELEMENT_TYPE:\n          case REACT_PORTAL_TYPE:\n            invokeCallback = true;\n            break;\n\n          case REACT_LAZY_TYPE:\n            const payload = children._payload;\n            const init = children._init;\n            return mapIntoArray(init(payload), array, escapedPrefix, nameSoFar, callback);\n        }\n\n    }\n  }\n\n  if (invokeCallback) {\n    const child = children;\n    let mappedChild = callback(child); // If it's the only child, treat the name as if it was wrapped in an array\n    // so that it's consistent if the number of children grows:\n\n    const childKey = nameSoFar === '' ? SEPARATOR + getElementKey(child, 0) : nameSoFar;\n\n    if (isArray(mappedChild)) {\n      let escapedChildKey = '';\n\n      if (childKey != null) {\n        escapedChildKey = escapeUserProvidedKey(childKey) + '/';\n      }\n\n      mapIntoArray(mappedChild, array, escapedChildKey, '', c => c);\n    } else if (mappedChild != null) {\n      if (isValidElement(mappedChild)) {\n\n        mappedChild = cloneAndReplaceKey(mappedChild, // Keep both the (mapped) and old keys if they differ, just as\n        // traverseAllChildren used to do for objects as children\n        escapedPrefix + ( // $FlowFixMe[incompatible-type] Flow incorrectly thinks React.Portal doesn't have a key\n        mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey( // $FlowFixMe[unsafe-addition]\n        '' + mappedChild.key // eslint-disable-line react-internal/safe-string-coercion\n        ) + '/' : '') + childKey);\n      }\n\n      array.push(mappedChild);\n    }\n\n    return 1;\n  }\n\n  let child;\n  let nextName;\n  let subtreeCount = 0; // Count of children found in the current subtree.\n\n  const nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;\n\n  if (isArray(children)) {\n    for (let i = 0; i < children.length; i++) {\n      child = children[i];\n      nextName = nextNamePrefix + getElementKey(child, i);\n      subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);\n    }\n  } else {\n    const iteratorFn = getIteratorFn(children);\n\n    if (typeof iteratorFn === 'function') {\n      const iterableChildren = children;\n\n      const iterator = iteratorFn.call(iterableChildren);\n      let step;\n      let ii = 0; // $FlowFixMe[incompatible-use] `iteratorFn` might return null according to typing.\n\n      while (!(step = iterator.next()).done) {\n        child = step.value;\n        nextName = nextNamePrefix + getElementKey(child, ii++);\n        subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);\n      }\n    } else if (type === 'object') {\n      if (typeof children.then === 'function') {\n        return mapIntoArray(resolveThenable(children), array, escapedPrefix, nameSoFar, callback);\n      } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n      const childrenString = String(children);\n      throw new Error(\"Objects are not valid as a React child (found: \" + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + \"). \" + 'If you meant to render a collection of children, use an array ' + 'instead.');\n    }\n  }\n\n  return subtreeCount;\n}\n/**\n * Maps children that are typically specified as `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenmap\n *\n * The provided mapFunction(child, index) will be called for each\n * leaf child.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} func The map function.\n * @param {*} context Context for mapFunction.\n * @return {object} Object containing the ordered map of results.\n */\n\n\nfunction mapChildren(children, func, context) {\n  if (children == null) {\n    // $FlowFixMe limitation refining abstract types in Flow\n    return children;\n  }\n\n  const result = [];\n  let count = 0;\n  mapIntoArray(children, result, '', '', function (child) {\n    return func.call(context, child, count++);\n  });\n  return result;\n}\n/**\n * Count the number of children that are typically specified as\n * `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrencount\n *\n * @param {?*} children Children tree container.\n * @return {number} The number of children.\n */\n\n\nfunction countChildren(children) {\n  let n = 0;\n  mapChildren(children, () => {\n    n++; // Don't return anything\n  });\n  return n;\n}\n/**\n * Iterates through children that are typically specified as `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenforeach\n *\n * The provided forEachFunc(child, index) will be called for each\n * leaf child.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} forEachFunc\n * @param {*} forEachContext Context for forEachContext.\n */\n\n\nfunction forEachChildren(children, forEachFunc, forEachContext) {\n  mapChildren(children, // $FlowFixMe[missing-this-annot]\n  function () {\n    forEachFunc.apply(this, arguments); // Don't return anything.\n  }, forEachContext);\n}\n/**\n * Flatten a children object (typically specified as `props.children`) and\n * return an array with appropriately re-keyed children.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrentoarray\n */\n\n\nfunction toArray(children) {\n  return mapChildren(children, child => child) || [];\n}\n/**\n * Returns the first child in a collection of children and verifies that there\n * is only one child in the collection.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenonly\n *\n * The current implementation of this function assumes that a single child gets\n * passed without a wrapper, but the purpose of this helper function is to\n * abstract away the particular structure of children.\n *\n * @param {?object} children Child collection structure.\n * @return {ReactElement} The first and only `ReactElement` contained in the\n * structure.\n */\n\n\nfunction onlyChild(children) {\n  if (!isValidElement(children)) {\n    throw new Error('React.Children.only expected to receive a single React element child.');\n  }\n\n  return children;\n}\n\nfunction createContext(defaultValue) {\n  // TODO: Second argument used to be an optional `calculateChangedBits`\n  // function. Warn to reserve for future use?\n  const context = {\n    $$typeof: REACT_CONTEXT_TYPE,\n    // As a workaround to support multiple concurrent renderers, we categorize\n    // some renderers as primary and others as secondary. We only expect\n    // there to be two concurrent renderers at most: React Native (primary) and\n    // Fabric (secondary); React DOM (primary) and React ART (secondary).\n    // Secondary renderers store their context values on separate fields.\n    _currentValue: defaultValue,\n    _currentValue2: defaultValue,\n    // Used to track how many concurrent renderers this context currently\n    // supports within in a single renderer. Such as parallel server rendering.\n    _threadCount: 0,\n    // These are circular\n    Provider: null,\n    Consumer: null\n  };\n\n  {\n    context.Provider = {\n      $$typeof: REACT_PROVIDER_TYPE,\n      _context: context\n    };\n\n    {\n      context.Consumer = context;\n    }\n  }\n\n  return context;\n}\n\nconst Uninitialized = -1;\nconst Pending = 0;\nconst Resolved = 1;\nconst Rejected = 2;\n\nfunction lazyInitializer(payload) {\n  if (payload._status === Uninitialized) {\n    const ctor = payload._result;\n    const thenable = ctor(); // Transition to the next state.\n    // This might throw either because it's missing or throws. If so, we treat it\n    // as still uninitialized and try again next time. Which is the same as what\n    // happens if the ctor or any wrappers processing the ctor throws. This might\n    // end up fixing it if the resolution was a concurrency bug.\n\n    thenable.then(moduleObject => {\n      if (payload._status === Pending || payload._status === Uninitialized) {\n        // Transition to the next state.\n        const resolved = payload;\n        resolved._status = Resolved;\n        resolved._result = moduleObject;\n      }\n    }, error => {\n      if (payload._status === Pending || payload._status === Uninitialized) {\n        // Transition to the next state.\n        const rejected = payload;\n        rejected._status = Rejected;\n        rejected._result = error;\n      }\n    });\n\n    if (payload._status === Uninitialized) {\n      // In case, we're still uninitialized, then we're waiting for the thenable\n      // to resolve. Set it as pending in the meantime.\n      const pending = payload;\n      pending._status = Pending;\n      pending._result = thenable;\n    }\n  }\n\n  if (payload._status === Resolved) {\n    const moduleObject = payload._result;\n\n    return moduleObject.default;\n  } else {\n    throw payload._result;\n  }\n}\n\nfunction lazy(ctor) {\n  const payload = {\n    // We use these fields to store the result.\n    _status: Uninitialized,\n    _result: ctor\n  };\n  const lazyType = {\n    $$typeof: REACT_LAZY_TYPE,\n    _payload: payload,\n    _init: lazyInitializer\n  };\n\n  return lazyType;\n}\n\nfunction forwardRef(render) {\n\n  const elementType = {\n    $$typeof: REACT_FORWARD_REF_TYPE,\n    render\n  };\n\n  return elementType;\n}\n\nfunction memo(type, compare) {\n\n  const elementType = {\n    $$typeof: REACT_MEMO_TYPE,\n    type,\n    compare: compare === undefined ? null : compare\n  };\n\n  return elementType;\n}\n\nconst UNTERMINATED = 0;\nconst TERMINATED = 1;\nconst ERRORED = 2;\n\nfunction createCacheRoot() {\n  return new WeakMap();\n}\n\nfunction createCacheNode() {\n  return {\n    s: UNTERMINATED,\n    // status, represents whether the cached computation returned a value or threw an error\n    v: undefined,\n    // value, either the cached result or an error, depending on s\n    o: null,\n    // object cache, a WeakMap where non-primitive arguments are stored\n    p: null // primitive cache, a regular Map where primitive arguments are stored.\n\n  };\n}\n\nfunction cache$1(fn) {\n  return function () {\n    const dispatcher = ReactCurrentCache.current;\n\n    if (!dispatcher) {\n      // If there is no dispatcher, then we treat this as not being cached.\n      // $FlowFixMe[incompatible-call]: We don't want to use rest arguments since we transpile the code.\n      return fn.apply(null, arguments);\n    }\n\n    const fnMap = dispatcher.getCacheForType(createCacheRoot);\n    const fnNode = fnMap.get(fn);\n    let cacheNode;\n\n    if (fnNode === undefined) {\n      cacheNode = createCacheNode();\n      fnMap.set(fn, cacheNode);\n    } else {\n      cacheNode = fnNode;\n    }\n\n    for (let i = 0, l = arguments.length; i < l; i++) {\n      const arg = arguments[i];\n\n      if (typeof arg === 'function' || typeof arg === 'object' && arg !== null) {\n        // Objects go into a WeakMap\n        let objectCache = cacheNode.o;\n\n        if (objectCache === null) {\n          cacheNode.o = objectCache = new WeakMap();\n        }\n\n        const objectNode = objectCache.get(arg);\n\n        if (objectNode === undefined) {\n          cacheNode = createCacheNode();\n          objectCache.set(arg, cacheNode);\n        } else {\n          cacheNode = objectNode;\n        }\n      } else {\n        // Primitives go into a regular Map\n        let primitiveCache = cacheNode.p;\n\n        if (primitiveCache === null) {\n          cacheNode.p = primitiveCache = new Map();\n        }\n\n        const primitiveNode = primitiveCache.get(arg);\n\n        if (primitiveNode === undefined) {\n          cacheNode = createCacheNode();\n          primitiveCache.set(arg, cacheNode);\n        } else {\n          cacheNode = primitiveNode;\n        }\n      }\n    }\n\n    if (cacheNode.s === TERMINATED) {\n      return cacheNode.v;\n    }\n\n    if (cacheNode.s === ERRORED) {\n      throw cacheNode.v;\n    }\n\n    try {\n      // $FlowFixMe[incompatible-call]: We don't want to use rest arguments since we transpile the code.\n      const result = fn.apply(null, arguments);\n      const terminatedNode = cacheNode;\n      terminatedNode.s = TERMINATED;\n      terminatedNode.v = result;\n      return result;\n    } catch (error) {\n      // We store the first error that's thrown and rethrow it.\n      const erroredNode = cacheNode;\n      erroredNode.s = ERRORED;\n      erroredNode.v = error;\n      throw error;\n    }\n  };\n}\n\nconst cache = cache$1;\n\nfunction resolveDispatcher() {\n  const dispatcher = ReactCurrentDispatcher.current;\n  // intentionally don't throw our own error because this is in a hot path.\n  // Also helps ensure this is inlined.\n\n\n  return dispatcher;\n}\nfunction useContext(Context) {\n  const dispatcher = resolveDispatcher();\n\n  return dispatcher.useContext(Context);\n}\nfunction useState(initialState) {\n  const dispatcher = resolveDispatcher();\n  return dispatcher.useState(initialState);\n}\nfunction useReducer(reducer, initialArg, init) {\n  const dispatcher = resolveDispatcher();\n  return dispatcher.useReducer(reducer, initialArg, init);\n}\nfunction useRef(initialValue) {\n  const dispatcher = resolveDispatcher();\n  return dispatcher.useRef(initialValue);\n}\nfunction useEffect(create, deps) {\n  const dispatcher = resolveDispatcher();\n  return dispatcher.useEffect(create, deps);\n}\nfunction useInsertionEffect(create, deps) {\n  const dispatcher = resolveDispatcher();\n  return dispatcher.useInsertionEffect(create, deps);\n}\nfunction useLayoutEffect(create, deps) {\n  const dispatcher = resolveDispatcher();\n  return dispatcher.useLayoutEffect(create, deps);\n}\nfunction useCallback(callback, deps) {\n  const dispatcher = resolveDispatcher();\n  return dispatcher.useCallback(callback, deps);\n}\nfunction useMemo(create, deps) {\n  const dispatcher = resolveDispatcher();\n  return dispatcher.useMemo(create, deps);\n}\nfunction useImperativeHandle(ref, create, deps) {\n  const dispatcher = resolveDispatcher();\n  return dispatcher.useImperativeHandle(ref, create, deps);\n}\nfunction useDebugValue(value, formatterFn) {\n}\nfunction useTransition() {\n  const dispatcher = resolveDispatcher();\n  return dispatcher.useTransition();\n}\nfunction useDeferredValue(value, initialValue) {\n  const dispatcher = resolveDispatcher();\n  return dispatcher.useDeferredValue(value, initialValue);\n}\nfunction useId() {\n  const dispatcher = resolveDispatcher();\n  return dispatcher.useId();\n}\nfunction useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {\n  const dispatcher = resolveDispatcher();\n  return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n}\nfunction useCacheRefresh() {\n  const dispatcher = resolveDispatcher(); // $FlowFixMe[not-a-function] This is unstable, thus optional\n\n  return dispatcher.useCacheRefresh();\n}\nfunction use(usable) {\n  const dispatcher = resolveDispatcher();\n  return dispatcher.use(usable);\n}\nfunction useOptimistic(passthrough, reducer) {\n  const dispatcher = resolveDispatcher(); // $FlowFixMe[not-a-function] This is unstable, thus optional\n\n  return dispatcher.useOptimistic(passthrough, reducer);\n}\nfunction useActionState(action, initialState, permalink) {\n  {\n    const dispatcher = resolveDispatcher(); // $FlowFixMe[not-a-function] This is unstable, thus optional\n\n    return dispatcher.useActionState(action, initialState, permalink);\n  }\n}\n\nconst reportGlobalError = typeof reportError === 'function' ? // In modern browsers, reportError will dispatch an error event,\n// emulating an uncaught JavaScript error.\nreportError : error => {\n  if (typeof window === 'object' && typeof window.ErrorEvent === 'function') {\n    // Browser Polyfill\n    const message = typeof error === 'object' && error !== null && typeof error.message === 'string' ? // eslint-disable-next-line react-internal/safe-string-coercion\n    String(error.message) : // eslint-disable-next-line react-internal/safe-string-coercion\n    String(error);\n    const event = new window.ErrorEvent('error', {\n      bubbles: true,\n      cancelable: true,\n      message: message,\n      error: error\n    });\n    const shouldLog = window.dispatchEvent(event);\n\n    if (!shouldLog) {\n      return;\n    }\n  } else if (typeof process === 'object' && // $FlowFixMe[method-unbinding]\n  typeof process.emit === 'function') {\n    // Node Polyfill\n    process.emit('uncaughtException', error);\n    return;\n  } // eslint-disable-next-line react-internal/no-production-logging\n\n\n  console['error'](error);\n};\n\nfunction startTransition(scope, options) {\n  const prevTransition = ReactCurrentBatchConfig.transition; // Each renderer registers a callback to receive the return value of\n  // the scope function. This is used to implement async actions.\n\n  const callbacks = new Set();\n  const transition = {\n    _callbacks: callbacks\n  };\n  ReactCurrentBatchConfig.transition = transition;\n  const currentTransition = ReactCurrentBatchConfig.transition;\n\n  {\n    try {\n      const returnValue = scope();\n\n      if (typeof returnValue === 'object' && returnValue !== null && typeof returnValue.then === 'function') {\n        callbacks.forEach(callback => callback(currentTransition, returnValue));\n        returnValue.then(noop, reportGlobalError);\n      }\n    } catch (error) {\n      reportGlobalError(error);\n    } finally {\n      ReactCurrentBatchConfig.transition = prevTransition;\n    }\n  }\n}\n\nfunction noop() {}\n\nfunction act(callback) {\n  {\n    throw new Error('act(...) is not supported in production builds of React.');\n  }\n}\n\nconst Children = {\n  map: mapChildren,\n  forEach: forEachChildren,\n  count: countChildren,\n  toArray,\n  only: onlyChild\n};\n\nexports.Children = Children;\nexports.Component = Component;\nexports.Fragment = REACT_FRAGMENT_TYPE;\nexports.Profiler = REACT_PROFILER_TYPE;\nexports.PureComponent = PureComponent;\nexports.StrictMode = REACT_STRICT_MODE_TYPE;\nexports.Suspense = REACT_SUSPENSE_TYPE;\nexports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;\nexports.act = act;\nexports.cache = cache;\nexports.cloneElement = cloneElement;\nexports.createContext = createContext;\nexports.createElement = createElement;\nexports.createFactory = createFactory;\nexports.createRef = createRef;\nexports.forwardRef = forwardRef;\nexports.isValidElement = isValidElement;\nexports.lazy = lazy;\nexports.memo = memo;\nexports.startTransition = startTransition;\nexports.unstable_useCacheRefresh = useCacheRefresh;\nexports.use = use;\nexports.useActionState = useActionState;\nexports.useCallback = useCallback;\nexports.useContext = useContext;\nexports.useDebugValue = useDebugValue;\nexports.useDeferredValue = useDeferredValue;\nexports.useEffect = useEffect;\nexports.useId = useId;\nexports.useImperativeHandle = useImperativeHandle;\nexports.useInsertionEffect = useInsertionEffect;\nexports.useLayoutEffect = useLayoutEffect;\nexports.useMemo = useMemo;\nexports.useOptimistic = useOptimistic;\nexports.useReducer = useReducer;\nexports.useRef = useRef;\nexports.useState = useState;\nexports.useSyncExternalStore = useSyncExternalStore;\nexports.useTransition = useTransition;\nexports.version = ReactVersion;","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react.production.min.js');\n} else {\n  module.exports = require('./cjs/react.development.js');\n}\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","/**\n * @license React\n * scheduler.production.min.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nconst enableSchedulerDebugging = false;\nconst enableProfiling = false;\nconst frameYieldMs = 5;\nconst userBlockingPriorityTimeout = 250;\nconst normalPriorityTimeout = 5000;\nconst lowPriorityTimeout = 10000;\n\nfunction push(heap, node) {\n  const index = heap.length;\n  heap.push(node);\n  siftUp(heap, node, index);\n}\nfunction peek(heap) {\n  return heap.length === 0 ? null : heap[0];\n}\nfunction pop(heap) {\n  if (heap.length === 0) {\n    return null;\n  }\n\n  const first = heap[0];\n  const last = heap.pop();\n\n  if (last !== first) {\n    heap[0] = last;\n    siftDown(heap, last, 0);\n  }\n\n  return first;\n}\n\nfunction siftUp(heap, node, i) {\n  let index = i;\n\n  while (index > 0) {\n    const parentIndex = index - 1 >>> 1;\n    const parent = heap[parentIndex];\n\n    if (compare(parent, node) > 0) {\n      // The parent is larger. Swap positions.\n      heap[parentIndex] = node;\n      heap[index] = parent;\n      index = parentIndex;\n    } else {\n      // The parent is smaller. Exit.\n      return;\n    }\n  }\n}\n\nfunction siftDown(heap, node, i) {\n  let index = i;\n  const length = heap.length;\n  const halfLength = length >>> 1;\n\n  while (index < halfLength) {\n    const leftIndex = (index + 1) * 2 - 1;\n    const left = heap[leftIndex];\n    const rightIndex = leftIndex + 1;\n    const right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.\n\n    if (compare(left, node) < 0) {\n      if (rightIndex < length && compare(right, left) < 0) {\n        heap[index] = right;\n        heap[rightIndex] = node;\n        index = rightIndex;\n      } else {\n        heap[index] = left;\n        heap[leftIndex] = node;\n        index = leftIndex;\n      }\n    } else if (rightIndex < length && compare(right, node) < 0) {\n      heap[index] = right;\n      heap[rightIndex] = node;\n      index = rightIndex;\n    } else {\n      // Neither child is smaller. Exit.\n      return;\n    }\n  }\n}\n\nfunction compare(a, b) {\n  // Compare sort index first, then task id.\n  const diff = a.sortIndex - b.sortIndex;\n  return diff !== 0 ? diff : a.id - b.id;\n}\n\n// TODO: Use symbols?\nconst ImmediatePriority = 1;\nconst UserBlockingPriority = 2;\nconst NormalPriority = 3;\nconst LowPriority = 4;\nconst IdlePriority = 5;\n\nfunction markTaskErrored(task, ms) {\n}\n\n/* eslint-disable no-var */\nexports.unstable_now = void 0;\nconst hasPerformanceNow = // $FlowFixMe[method-unbinding]\ntypeof performance === 'object' && typeof performance.now === 'function';\n\nif (hasPerformanceNow) {\n  const localPerformance = performance;\n\n  exports.unstable_now = () => localPerformance.now();\n} else {\n  const localDate = Date;\n  const initialTime = localDate.now();\n\n  exports.unstable_now = () => localDate.now() - initialTime;\n} // Max 31 bit integer. The max integer size in V8 for 32-bit systems.\n// Math.pow(2, 30) - 1\n// 0b111111111111111111111111111111\n\n\nvar maxSigned31BitInt = 1073741823; // Tasks are stored on a min heap\n\nvar taskQueue = [];\nvar timerQueue = []; // Incrementing id counter. Used to maintain insertion order.\n\nvar taskIdCounter = 1; // Pausing the scheduler is useful for debugging.\nvar currentTask = null;\nvar currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrance.\n\nvar isPerformingWork = false;\nvar isHostCallbackScheduled = false;\nvar isHostTimeoutScheduled = false; // Capture local references to native APIs, in case a polyfill overrides them.\n\nconst localSetTimeout = typeof setTimeout === 'function' ? setTimeout : null;\nconst localClearTimeout = typeof clearTimeout === 'function' ? clearTimeout : null;\nconst localSetImmediate = typeof setImmediate !== 'undefined' ? setImmediate : null; // IE and Node.js + jsdom\n\nfunction advanceTimers(currentTime) {\n  // Check for tasks that are no longer delayed and add them to the queue.\n  let timer = peek(timerQueue);\n\n  while (timer !== null) {\n    if (timer.callback === null) {\n      // Timer was cancelled.\n      pop(timerQueue);\n    } else if (timer.startTime <= currentTime) {\n      // Timer fired. Transfer to the task queue.\n      pop(timerQueue);\n      timer.sortIndex = timer.expirationTime;\n      push(taskQueue, timer);\n    } else {\n      // Remaining timers are pending.\n      return;\n    }\n\n    timer = peek(timerQueue);\n  }\n}\n\nfunction handleTimeout(currentTime) {\n  isHostTimeoutScheduled = false;\n  advanceTimers(currentTime);\n\n  if (!isHostCallbackScheduled) {\n    if (peek(taskQueue) !== null) {\n      isHostCallbackScheduled = true;\n      requestHostCallback();\n    } else {\n      const firstTimer = peek(timerQueue);\n\n      if (firstTimer !== null) {\n        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n      }\n    }\n  }\n}\n\nfunction flushWork(initialTime) {\n\n\n  isHostCallbackScheduled = false;\n\n  if (isHostTimeoutScheduled) {\n    // We scheduled a timeout but it's no longer needed. Cancel it.\n    isHostTimeoutScheduled = false;\n    cancelHostTimeout();\n  }\n\n  isPerformingWork = true;\n  const previousPriorityLevel = currentPriorityLevel;\n\n  try {\n    if (enableProfiling) ; else {\n      // No catch in prod code path.\n      return workLoop(initialTime);\n    }\n  } finally {\n    currentTask = null;\n    currentPriorityLevel = previousPriorityLevel;\n    isPerformingWork = false;\n  }\n}\n\nfunction workLoop(initialTime) {\n  let currentTime = initialTime;\n  advanceTimers(currentTime);\n  currentTask = peek(taskQueue);\n\n  while (currentTask !== null && !(enableSchedulerDebugging )) {\n    if (currentTask.expirationTime > currentTime && shouldYieldToHost()) {\n      // This currentTask hasn't expired, and we've reached the deadline.\n      break;\n    } // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n\n    const callback = currentTask.callback;\n\n    if (typeof callback === 'function') {\n      // $FlowFixMe[incompatible-use] found when upgrading Flow\n      currentTask.callback = null; // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n      currentPriorityLevel = currentTask.priorityLevel; // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n      const didUserCallbackTimeout = currentTask.expirationTime <= currentTime;\n\n      const continuationCallback = callback(didUserCallbackTimeout);\n      currentTime = exports.unstable_now();\n\n      if (typeof continuationCallback === 'function') {\n        // If a continuation is returned, immediately yield to the main thread\n        // regardless of how much time is left in the current time slice.\n        // $FlowFixMe[incompatible-use] found when upgrading Flow\n        currentTask.callback = continuationCallback;\n\n        advanceTimers(currentTime);\n        return true;\n      } else {\n\n        if (currentTask === peek(taskQueue)) {\n          pop(taskQueue);\n        }\n\n        advanceTimers(currentTime);\n      }\n    } else {\n      pop(taskQueue);\n    }\n\n    currentTask = peek(taskQueue);\n  } // Return whether there's additional work\n\n\n  if (currentTask !== null) {\n    return true;\n  } else {\n    const firstTimer = peek(timerQueue);\n\n    if (firstTimer !== null) {\n      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n    }\n\n    return false;\n  }\n}\n\nfunction unstable_runWithPriority(priorityLevel, eventHandler) {\n  switch (priorityLevel) {\n    case ImmediatePriority:\n    case UserBlockingPriority:\n    case NormalPriority:\n    case LowPriority:\n    case IdlePriority:\n      break;\n\n    default:\n      priorityLevel = NormalPriority;\n  }\n\n  var previousPriorityLevel = currentPriorityLevel;\n  currentPriorityLevel = priorityLevel;\n\n  try {\n    return eventHandler();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n  }\n}\n\nfunction unstable_next(eventHandler) {\n  var priorityLevel;\n\n  switch (currentPriorityLevel) {\n    case ImmediatePriority:\n    case UserBlockingPriority:\n    case NormalPriority:\n      // Shift down to normal priority\n      priorityLevel = NormalPriority;\n      break;\n\n    default:\n      // Anything lower than normal priority should remain at the current level.\n      priorityLevel = currentPriorityLevel;\n      break;\n  }\n\n  var previousPriorityLevel = currentPriorityLevel;\n  currentPriorityLevel = priorityLevel;\n\n  try {\n    return eventHandler();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n  }\n}\n\nfunction unstable_wrapCallback(callback) {\n  var parentPriorityLevel = currentPriorityLevel; // $FlowFixMe[incompatible-return]\n  // $FlowFixMe[missing-this-annot]\n\n  return function () {\n    // This is a fork of runWithPriority, inlined for performance.\n    var previousPriorityLevel = currentPriorityLevel;\n    currentPriorityLevel = parentPriorityLevel;\n\n    try {\n      return callback.apply(this, arguments);\n    } finally {\n      currentPriorityLevel = previousPriorityLevel;\n    }\n  };\n}\n\nfunction unstable_scheduleCallback(priorityLevel, callback, options) {\n  var currentTime = exports.unstable_now();\n  var startTime;\n\n  if (typeof options === 'object' && options !== null) {\n    var delay = options.delay;\n\n    if (typeof delay === 'number' && delay > 0) {\n      startTime = currentTime + delay;\n    } else {\n      startTime = currentTime;\n    }\n  } else {\n    startTime = currentTime;\n  }\n\n  var timeout;\n\n  switch (priorityLevel) {\n    case ImmediatePriority:\n      // Times out immediately\n      timeout = -1;\n      break;\n\n    case UserBlockingPriority:\n      // Eventually times out\n      timeout = userBlockingPriorityTimeout;\n      break;\n\n    case IdlePriority:\n      // Never times out\n      timeout = maxSigned31BitInt;\n      break;\n\n    case LowPriority:\n      // Eventually times out\n      timeout = lowPriorityTimeout;\n      break;\n\n    case NormalPriority:\n    default:\n      // Eventually times out\n      timeout = normalPriorityTimeout;\n      break;\n  }\n\n  var expirationTime = startTime + timeout;\n  var newTask = {\n    id: taskIdCounter++,\n    callback,\n    priorityLevel,\n    startTime,\n    expirationTime,\n    sortIndex: -1\n  };\n\n  if (startTime > currentTime) {\n    // This is a delayed task.\n    newTask.sortIndex = startTime;\n    push(timerQueue, newTask);\n\n    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {\n      // All tasks are delayed, and this is the task with the earliest delay.\n      if (isHostTimeoutScheduled) {\n        // Cancel an existing timeout.\n        cancelHostTimeout();\n      } else {\n        isHostTimeoutScheduled = true;\n      } // Schedule a timeout.\n\n\n      requestHostTimeout(handleTimeout, startTime - currentTime);\n    }\n  } else {\n    newTask.sortIndex = expirationTime;\n    push(taskQueue, newTask);\n    // wait until the next time we yield.\n\n\n    if (!isHostCallbackScheduled && !isPerformingWork) {\n      isHostCallbackScheduled = true;\n      requestHostCallback();\n    }\n  }\n\n  return newTask;\n}\n\nfunction unstable_pauseExecution() {\n}\n\nfunction unstable_continueExecution() {\n\n  if (!isHostCallbackScheduled && !isPerformingWork) {\n    isHostCallbackScheduled = true;\n    requestHostCallback();\n  }\n}\n\nfunction unstable_getFirstCallbackNode() {\n  return peek(taskQueue);\n}\n\nfunction unstable_cancelCallback(task) {\n  // remove from the queue because you can't remove arbitrary nodes from an\n  // array based heap, only the first one.)\n\n\n  task.callback = null;\n}\n\nfunction unstable_getCurrentPriorityLevel() {\n  return currentPriorityLevel;\n}\n\nlet isMessageLoopRunning = false;\nlet taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main\n// thread, like user events. By default, it yields multiple times per frame.\n// It does not attempt to align with frame boundaries, since most tasks don't\n// need to be frame aligned; for those that do, use requestAnimationFrame.\n\nlet frameInterval = frameYieldMs;\nlet startTime = -1;\n\nfunction shouldYieldToHost() {\n  const timeElapsed = exports.unstable_now() - startTime;\n\n  if (timeElapsed < frameInterval) {\n    // The main thread has only been blocked for a really short amount of time;\n    // smaller than a single frame. Don't yield yet.\n    return false;\n  } // Yield now.\n\n\n  return true;\n}\n\nfunction requestPaint() {}\n\nfunction forceFrameRate(fps) {\n  if (fps < 0 || fps > 125) {\n    // Using console['error'] to evade Babel and ESLint\n    console['error']('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing frame rates higher than 125 fps is not supported');\n    return;\n  }\n\n  if (fps > 0) {\n    frameInterval = Math.floor(1000 / fps);\n  } else {\n    // reset the framerate\n    frameInterval = frameYieldMs;\n  }\n}\n\nconst performWorkUntilDeadline = () => {\n  if (isMessageLoopRunning) {\n    const currentTime = exports.unstable_now(); // Keep track of the start time so we can measure how long the main thread\n    // has been blocked.\n\n    startTime = currentTime; // If a scheduler task throws, exit the current browser task so the\n    // error can be observed.\n    //\n    // Intentionally not using a try-catch, since that makes some debugging\n    // techniques harder. Instead, if `flushWork` errors, then `hasMoreWork` will\n    // remain true, and we'll continue the work loop.\n\n    let hasMoreWork = true;\n\n    try {\n      hasMoreWork = flushWork(currentTime);\n    } finally {\n      if (hasMoreWork) {\n        // If there's more work, schedule the next message event at the end\n        // of the preceding one.\n        schedulePerformWorkUntilDeadline();\n      } else {\n        isMessageLoopRunning = false;\n      }\n    }\n  }\n};\n\nlet schedulePerformWorkUntilDeadline;\n\nif (typeof localSetImmediate === 'function') {\n  // Node.js and old IE.\n  // There's a few reasons for why we prefer setImmediate.\n  //\n  // Unlike MessageChannel, it doesn't prevent a Node.js process from exiting.\n  // (Even though this is a DOM fork of the Scheduler, you could get here\n  // with a mix of Node.js 15+, which has a MessageChannel, and jsdom.)\n  // https://github.com/facebook/react/issues/20756\n  //\n  // But also, it runs earlier which is the semantic we want.\n  // If other browsers ever implement it, it's better to use it.\n  // Although both of these would be inferior to native scheduling.\n  schedulePerformWorkUntilDeadline = () => {\n    localSetImmediate(performWorkUntilDeadline);\n  };\n} else if (typeof MessageChannel !== 'undefined') {\n  // DOM and Worker environments.\n  // We prefer MessageChannel because of the 4ms setTimeout clamping.\n  const channel = new MessageChannel();\n  const port = channel.port2;\n  channel.port1.onmessage = performWorkUntilDeadline;\n\n  schedulePerformWorkUntilDeadline = () => {\n    port.postMessage(null);\n  };\n} else {\n  // We should only fallback here in non-browser environments.\n  schedulePerformWorkUntilDeadline = () => {\n    // $FlowFixMe[not-a-function] nullable value\n    localSetTimeout(performWorkUntilDeadline, 0);\n  };\n}\n\nfunction requestHostCallback() {\n  if (!isMessageLoopRunning) {\n    isMessageLoopRunning = true;\n    schedulePerformWorkUntilDeadline();\n  }\n}\n\nfunction requestHostTimeout(callback, ms) {\n  // $FlowFixMe[not-a-function] nullable value\n  taskTimeoutID = localSetTimeout(() => {\n    callback(exports.unstable_now());\n  }, ms);\n}\n\nfunction cancelHostTimeout() {\n  // $FlowFixMe[not-a-function] nullable value\n  localClearTimeout(taskTimeoutID);\n  taskTimeoutID = -1;\n}\nconst unstable_Profiling = null;\n\nexports.unstable_IdlePriority = IdlePriority;\nexports.unstable_ImmediatePriority = ImmediatePriority;\nexports.unstable_LowPriority = LowPriority;\nexports.unstable_NormalPriority = NormalPriority;\nexports.unstable_Profiling = unstable_Profiling;\nexports.unstable_UserBlockingPriority = UserBlockingPriority;\nexports.unstable_cancelCallback = unstable_cancelCallback;\nexports.unstable_continueExecution = unstable_continueExecution;\nexports.unstable_forceFrameRate = forceFrameRate;\nexports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;\nexports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;\nexports.unstable_next = unstable_next;\nexports.unstable_pauseExecution = unstable_pauseExecution;\nexports.unstable_requestPaint = requestPaint;\nexports.unstable_runWithPriority = unstable_runWithPriority;\nexports.unstable_scheduleCallback = unstable_scheduleCallback;\nexports.unstable_shouldYield = shouldYieldToHost;\nexports.unstable_wrapCallback = unstable_wrapCallback;","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/scheduler.production.min.js');\n} else {\n  module.exports = require('./cjs/scheduler.development.js');\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n// TODO: (v7) Change the Location generic default from `any` to `unknown` and\n// remove Remix `useLocation` wrapper.\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location<State = any> extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: State;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n\n  /**\n   * The delta between this location and the former location in the history stack\n   */\n  delta: number | null;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. This may be either a URL or the pieces\n * of a URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Returns a URL for the given `to` value\n   *\n   * @param to - The destination URL\n   */\n  createURL(to: To): URL;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  function createHref(to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nexport function warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n\n  function getIndex(): number {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base =\n      window.location.origin !== \"null\"\n        ? window.location.origin\n        : window.location.href;\n\n    let href = typeof to === \"string\" ? to : createPath(to);\n    // Treating this as a full URL will strip any trailing spaces so we need to\n    // pre-encode them since they might be part of a matching splat param from\n    // an ancestor route\n    href = href.replace(/ $/, \"%20\");\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","export default function OccupationStep({ occupation, setOccupation }) {\n  const inputs = [\n    {\n      value: \"student\",\n      label: \"Student\",\n      placeholder: \"or soon to be enrolled\",\n      icon: \"/icons/occupation/student.png\",\n    },\n    {\n      value: \"professional\",\n      label: \"Professional\",\n      placeholder: \"persuing a career\",\n      icon: \"/icons/occupation/professional.png\",\n    },\n    {\n      value: \"parent\",\n      label: \"Parent\",\n      placeholder: \"of school-age child\",\n      icon: \"/icons/occupation/parent.png\",\n    },\n    {\n      value: \"learner\",\n      label: \"Lifelong learner\",\n      placeholder: \"\",\n      icon: \"/icons/occupation/learner.png\",\n    },\n    {\n      value: \"teacher\",\n      label: \"Teacher\",\n      placeholder: \"\",\n      icon: \"/icons/occupation/teacher.png\",\n    },\n    {\n      value: \"other\",\n      label: \"Other\",\n      placeholder: \"\",\n      icon: \"/icons/occupation/other.png\",\n    },\n  ];\n\n  const handleClick = (value) => {\n    setOccupation(value);\n  };\n\n  return (\n    <>\n      <h3 className=\" mb-4 text-2xl font-medium leading-none text-gray-900 dark:text-white text-center\">\n        Which describe you the best?\n      </h3>\n      <p className=\"mb-8 text-xs font-medium leading-none text-gray-500 dark:text-white text-center\">\n        This will help personalize your experience.\n      </p>\n      <div className=\"flex flex-col gap-3 w-80 md:w-[50%]\">\n        {inputs.map((item, i) => (\n          <div\n            key={i}\n            className={`flex gap-3 border-[1px] border-slate-200 pl-4 py-4 rounded-lg  text-sm hover:border-slate-400 ${\n              occupation == item.value ? \"border-slate-500 shadow-md\" : null\n            }`}\n            onClick={(e) => handleClick(item.value)}\n          >\n            <img src={item.icon} alt={item.value} className=\"h-6 \" />\n            <div>\n              <span>{item.label}</span>&nbsp;\n              <span className=\"text-slate-600\">{item.placeholder}</span>\n            </div>\n          </div>\n        ))}\n      </div>\n    </>\n  );\n}\n","export default function InterestStep({ interest, setInterest }) {\n  const inputs = [\n    {\n      value: \"learning\",\n      label: \"Learning\",\n      placeholder: \"specific skills to advance my career\",\n      icon: \"/icons/interest/learning.svg\",\n    },\n    {\n      value: \"exploring\",\n      label: \"Exploring\",\n      placeholder: \"new topics I'm interested in\",\n      icon: \"/icons/interest/exploring.svg\",\n    },\n    {\n      value: \"refreshing\",\n      label: \"Refreshing\",\n      placeholder: \"my math foundations\",\n      icon: \"/icons/interest/refreshing.svg\",\n    },\n    {\n      value: \"exercising\",\n      label: \"Exercising\",\n      placeholder: \"my brain to stay sharp\",\n      icon: \"/icons/interest/exercising.svg\",\n    },\n    {\n      value: \"other\",\n      label: \"Something else\",\n      placeholder: \"\",\n      icon: \"/icons/interest/other.svg\",\n    },\n  ];\n\n  const handleClick = (value) => {\n    setInterest(value);\n  };\n\n  return (\n    <>\n      <h3 className=\" mb-4 text-2xl font-medium leading-none text-gray-900 dark:text-white text-center\">\n        Which describe you the best?\n      </h3>\n      <p className=\"mb-8 text-xs font-medium leading-none text-gray-500 dark:text-white text-center\">\n        This will help personalize your experience.\n      </p>\n      <div className=\"flex flex-col gap-3 md:w-[50%]\">\n        {inputs.map((item, i) => (\n          <div\n            className={`flex gap-3 border-[1px] border-slate-300 pl-4 py-4 rounded-lg  hover:border-slate-500  ${\n              interest == item.value ? \"border-slate-600 shadow-md\" : null\n            }`}\n            onClick={(e) => handleClick(item.value)}\n          >\n            <img src={item.icon} alt={item.value} className=\"h-6 md:h-6 \" />\n            <div className=\"flex items-center\">\n              <span className=\"text-sm md:text-md\">\n                {item.label} <span>{item.placeholder}</span>\n              </span>\n            </div>\n          </div>\n        ))}\n      </div>\n    </>\n  );\n}\n","export default function HaltStep() {\n  return (\n    <>\n      <div className=\"pt-6 md:w-4/5 md:flex justify-between items-center\">\n        <video autoPlay loop width=\"320\" height=\"240\">\n          <source src=\"/videos/step3-banner.mp4\" type=\"video/mp4\" />\n          Your browser does not support the video tag.\n        </video>\n\n        <div className=\"md:w-1/2 space-y-4 md:text-left text-center\">\n          <h2 className=\"text-2xl font-medium\">You're in the right place</h2>\n          <p className=\"text-sm text-gray-500\">\n            Brilliant gets you hands-on with a whole universe of concepts in\n            math, science, and computer science. You'll solve fun problems while\n            growing your critical thinking skills.\n          </p>\n        </div>\n      </div>\n    </>\n  );\n}\n","export default function LevelStep({ level, setLevel }) {\n  const inputs = [\n    {\n      value: \"arithmetic\",\n      label: \"Arithmetic\",\n      placeholder: \"Introductory\",\n      icon: \"/icons/mathLev/arithmetic.png\",\n    },\n    {\n      value: \"basicAlgebra\",\n      label: \"Basic Algebra\",\n      placeholder: \"Foundational\",\n      icon: \"/icons/mathLev/basic-algebra.png\",\n    },\n    {\n      value: \"intermediateAlgebra\",\n      label: \"Intermediate Algebra\",\n      placeholder: \"Intermediate\",\n      icon: \"/icons/mathLev/intermediate-algebra.png\",\n    },\n    {\n      value: \"calculus\",\n      label: \"Calculus\",\n      placeholder: \"Advanced\",\n      icon: \"/icons/mathLev/calculus.png\",\n    },\n  ];\n\n  const handleClick = (value) => {\n    setLevel(value);\n  };\n\n  return (\n    <div className=\"py-10 flex flex-col gap-4\">\n      <h3 className=\"mt-4 mb-4 text-2xl font-medium leading-none text-gray-900 dark:text-white text-center\">\n        What is your math comfort level?\n      </h3>\n      <p className=\"mb-8 text-xs font-medium leading-none text-gray-500 dark:text-white text-center\">\n        Choose the highest level you feel confident in - you can always adjust\n        later.\n      </p>\n      <div className=\"space-y-4 md:space-y-0 md:flex md:gap-3 \">\n        {inputs.map((item, i) => (\n          <div\n            className={`p-4 flex flex-col items-center gap-6 border-[1px] min-w-56 border-slate-300 pl-4 py-4 rounded-lg  hover:border-slate-400  ${\n              level == item.value ? \"border-slate-600 shadow-md\" : null\n            }`}\n            onClick={(e) => handleClick(item.value)}\n          >\n            <img src={item.icon} alt={item.value} className=\"h-14\" />\n            <div className=\"flex flex-col items-center\">\n              <span>{item.label}</span>\n              <span className=\"text-gray-500\">{item.placeholder}</span>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n","export default function FinalStep() {\n  return (\n    <>\n      <div className=\"pt-6 w-4/5 md:flex justify-between items-center\">\n        <video autoPlay loop width=\"320\" height=\"240\">\n          <source src=\"/videos/final-step.mp4\" type=\"video/mp4\" />\n          Your browser does not support the video tag.\n        </video>\n\n        <div className=\"md:w-1/2 space-y-4 text-center md:text-left\">\n          <h2 className=\"text-3xl font-medium mb-10\">You're on your way!</h2>\n          <div className=\"text-4xl text-yellow-600\">★★★★★</div>\n          <p className=\"text-md text-gray-700 italic\">\n            “If you like bending your mind over interesting problems or want to\n            explore a rich world full of beautiful mysteries, this app will be a\n            sure thing for you.”\n          </p>\n          <p className=\"text-md text-gray-700\">— Bob V.</p>\n        </div>\n      </div>\n    </>\n  );\n}\n","import type { Location, Path, To } from \"./history\";\nimport { invariant, parsePath, warning } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n  reloadDocument?: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\ntype LowerCaseFormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\ntype UpperCaseFormMethod = Uppercase<LowerCaseFormMethod>;\n\n/**\n * Users can specify either lowercase or uppercase form methods on `<Form>`,\n * useSubmit(), `<fetcher.Form>`, etc.\n */\nexport type HTMLFormMethod = LowerCaseFormMethod | UpperCaseFormMethod;\n\n/**\n * Active navigation/fetcher form methods are exposed in lowercase on the\n * RouterState\n */\nexport type FormMethod = LowerCaseFormMethod;\nexport type MutationFormMethod = Exclude<FormMethod, \"get\">;\n\n/**\n * In v7, active navigation/fetcher form methods are exposed in uppercase on the\n * RouterState.  This is to align with the normalization done via fetch().\n */\nexport type V7_FormMethod = UpperCaseFormMethod;\nexport type V7_MutationFormMethod = Exclude<V7_FormMethod, \"GET\">;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\"\n  | \"application/json\"\n  | \"text/plain\";\n\n// Thanks https://github.com/sindresorhus/type-fest!\ntype JsonObject = { [Key in string]: JsonValue } & {\n  [Key in string]?: JsonValue | undefined;\n};\ntype JsonArray = JsonValue[] | readonly JsonValue[];\ntype JsonPrimitive = string | number | boolean | null;\ntype JsonValue = JsonPrimitive | JsonObject | JsonArray;\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport type Submission =\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: FormData;\n      json: undefined;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: JsonValue;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: undefined;\n      text: string;\n    };\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs<Context> {\n  request: Request;\n  params: Params;\n  context?: Context;\n}\n\n// TODO: (v7) Change the defaults from any to unknown in and remove Remix wrappers:\n//   ActionFunction, ActionFunctionArgs, LoaderFunction, LoaderFunctionArgs\n//   Also, make them a type alias instead of an interface\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Loaders and actions can return anything except `undefined` (`null` is a\n * valid return value if there is no data to return).  Responses are preferred\n * and will ease any future migration to Remix\n */\ntype DataFunctionValue = Response | NonNullable<unknown> | null;\n\n/**\n * Route loader function signature\n */\nexport type LoaderFunction<Context = any> = {\n  (args: LoaderFunctionArgs<Context>):\n    | Promise<DataFunctionValue>\n    | DataFunctionValue;\n} & { hydrate?: boolean };\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction<Context = any> {\n  (args: ActionFunctionArgs<Context>):\n    | Promise<DataFunctionValue>\n    | DataFunctionValue;\n}\n\n/**\n * Arguments passed to shouldRevalidate function\n */\nexport interface ShouldRevalidateFunctionArgs {\n  currentUrl: URL;\n  currentParams: AgnosticDataRouteMatch[\"params\"];\n  nextUrl: URL;\n  nextParams: AgnosticDataRouteMatch[\"params\"];\n  formMethod?: Submission[\"formMethod\"];\n  formAction?: Submission[\"formAction\"];\n  formEncType?: Submission[\"formEncType\"];\n  text?: Submission[\"text\"];\n  formData?: Submission[\"formData\"];\n  json?: Submission[\"json\"];\n  actionResult?: any;\n  defaultShouldRevalidate: boolean;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: ShouldRevalidateFunctionArgs): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set `hasErrorBoundary`\n * from the framework-aware `errorElement` prop\n *\n * @deprecated Use `mapRouteProperties` instead\n */\nexport interface DetectErrorBoundaryFunction {\n  (route: AgnosticRouteObject): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set any framework-specific\n * properties from framework-agnostic properties\n */\nexport interface MapRoutePropertiesFunction {\n  (route: AgnosticRouteObject): {\n    hasErrorBoundary: boolean;\n  } & Record<string, any>;\n}\n\n/**\n * Keys we cannot change from within a lazy() function. We spread all other keys\n * onto the route. Either they're meaningful to the router, or they'll get\n * ignored.\n */\nexport type ImmutableRouteKey =\n  | \"lazy\"\n  | \"caseSensitive\"\n  | \"path\"\n  | \"id\"\n  | \"index\"\n  | \"children\";\n\nexport const immutableRouteKeys = new Set<ImmutableRouteKey>([\n  \"lazy\",\n  \"caseSensitive\",\n  \"path\",\n  \"id\",\n  \"index\",\n  \"children\",\n]);\n\ntype RequireOne<T, Key = keyof T> = Exclude<\n  {\n    [K in keyof T]: K extends Key ? Omit<T, K> & Required<Pick<T, K>> : never;\n  }[keyof T],\n  undefined\n>;\n\n/**\n * lazy() function to load a route definition, which can add non-matching\n * related properties to a route\n */\nexport interface LazyRouteFunction<R extends AgnosticRouteObject> {\n  (): Promise<RequireOne<Omit<R, ImmutableRouteKey>>>;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n  lazy?: LazyRouteFunction<AgnosticBaseRouteObject>;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\nexport type RouteManifest = Record<string, AgnosticDataRouteObject | undefined>;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param extends `${infer Optional}?`\n      ? Optional\n      : Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\nexport type PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\" | \"/*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise, return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if you could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  mapRouteProperties: MapRoutePropertiesFunction,\n  parentPath: number[] = [],\n  manifest: RouteManifest = {}\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !manifest[id],\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n      };\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n        children: undefined,\n      };\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(\n          route.children,\n          mapRouteProperties,\n          treePath,\n          manifest\n        );\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    let decoded = decodePath(pathname);\n    matches = matchRouteBranch<string, RouteObjectType>(branches[i], decoded);\n  }\n\n  return matches;\n}\n\nexport interface UIMatch<Data = unknown, Handle = unknown> {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: Data;\n  handle: Handle;\n}\n\nexport function convertRouteMatchToUiMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UIMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle,\n  };\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:[\\w-]+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string | null;\n  } = {} as any\n): string {\n  let path: string = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n\n  const stringify = (p: any) =>\n    p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n\n  const segments = path\n    .split(/\\/+/)\n    .map((segment, index, array) => {\n      const isLastSegment = index === array.length - 1;\n\n      // only apply the splat if it's the last segment\n      if (isLastSegment && segment === \"*\") {\n        const star = \"*\" as PathParam<Path>;\n        // Apply the splat\n        return stringify(params[star]);\n      }\n\n      const keyMatch = segment.match(/^:([\\w-]+)(\\??)$/);\n      if (keyMatch) {\n        const [, key, optional] = keyMatch;\n        let param = params[key as PathParam<Path>];\n        invariant(optional === \"?\" || param != null, `Missing \":${key}\" param`);\n        return stringify(param);\n      }\n\n      // Remove any optional markers from optional static segments\n      return segment.replace(/\\?$/g, \"\");\n    })\n    // Remove empty segments\n    .filter((segment) => !!segment);\n\n  return prefix + segments.join(\"/\");\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, compiledParams] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = compiledParams.reduce<Mutable<Params>>(\n    (memo, { paramName, isOptional }, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      const value = captureGroups[index];\n      if (isOptional && !value) {\n        memo[paramName] = undefined;\n      } else {\n        memo[paramName] = (value || \"\").replace(/%2F/g, \"/\");\n      }\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\ntype CompiledPathParam = { paramName: string; isOptional?: boolean };\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, CompiledPathParam[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let params: CompiledPathParam[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(\n        /\\/:([\\w-]+)(\\?)?/g,\n        (_: string, paramName: string, isOptional) => {\n          params.push({ paramName, isOptional: isOptional != null });\n          return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n        }\n      );\n\n  if (path.endsWith(\"*\")) {\n    params.push({ paramName: \"*\" });\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, params];\n}\n\nfunction decodePath(value: string) {\n  try {\n    return value\n      .split(\"/\")\n      .map((v) => decodeURIComponent(v).replace(/\\//g, \"%2F\"))\n      .join(\"/\");\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n// Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\nexport function getResolveToMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[], v7_relativeSplatPath: boolean) {\n  let pathMatches = getPathContributingMatches(matches);\n\n  // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n  if (v7_relativeSplatPath) {\n    return pathMatches.map((match, idx) =>\n      idx === matches.length - 1 ? match.pathname : match.pathnameBase\n    );\n  }\n\n  return pathMatches.map((match) => match.pathnameBase);\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    // With relative=\"route\" (the default), each leading .. segment means\n    // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n    // difference from how <a href> works and a major reason we call this a\n    // \"to\" value instead of a \"href\".\n    if (!isPathRelative && toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeysSet: Set<string> = new Set<string>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscribers: Set<(aborted: boolean, settledKey?: string) => void> =\n    new Set();\n  data: Record<string, unknown>;\n  init?: ResponseInit;\n  deferredKeys: string[] = [];\n\n  constructor(data: Record<string, unknown>, responseInit?: ResponseInit) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  private trackPromise(\n    key: string,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, undefined, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\n        `Deferred data for key \"${key}\" resolved/rejected with \\`undefined\\`, ` +\n          `you must resolve/reject with a value or \\`null\\`.`\n      );\n      Object.defineProperty(promise, \"_error\", { get: () => undefinedError });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.emit(false, key);\n    return data;\n  }\n\n  private emit(aborted: boolean, settledKey?: string) {\n    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn: (aborted: boolean, settledKey?: string) => void) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport type DeferFunction = (\n  data: Record<string, unknown>,\n  init?: number | ResponseInit\n) => DeferredData;\n\nexport const defer: DeferFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  return new DeferredData(data, responseInit);\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirectDocument: RedirectFunction = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n\nexport type ErrorResponse = {\n  status: number;\n  statusText: string;\n  data: any;\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nexport class ErrorResponseImpl implements ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  private error?: Error;\n  private internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nexport function isRouteErrorResponse(error: any): error is ErrorResponse {\n  return (\n    error != null &&\n    typeof error.status === \"number\" &&\n    typeof error.statusText === \"string\" &&\n    typeof error.internal === \"boolean\" &&\n    \"data\" in error\n  );\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  invariant,\n  parsePath,\n  warning,\n} from \"./history\";\nimport type {\n  ActionFunction,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  AgnosticRouteObject,\n  DataResult,\n  DeferredData,\n  DeferredResult,\n  DetectErrorBoundaryFunction,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  HTMLFormMethod,\n  ImmutableRouteKey,\n  LoaderFunction,\n  MapRoutePropertiesFunction,\n  MutationFormMethod,\n  RedirectResult,\n  RouteData,\n  RouteManifest,\n  ShouldRevalidateFunctionArgs,\n  Submission,\n  SuccessResult,\n  UIMatch,\n  V7_FormMethod,\n  V7_MutationFormMethod,\n} from \"./utils\";\nimport {\n  ErrorResponseImpl,\n  ResultType,\n  convertRouteMatchToUiMatch,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  getResolveToMatches,\n  immutableRouteKeys,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  resolveTo,\n  stripBasename,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the future config for the router\n   */\n  get future(): FutureConfig;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the window associated with the router\n   */\n  get window(): RouterInit[\"window\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): Promise<void>;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To | null, opts?: RouterNavigateOptions): Promise<void>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get a navigation blocker\n   * @param key The identifier for the blocker\n   * @param fn The blocker function implementation\n   */\n  getBlocker(key: string, fn: BlockerFunction): Blocker;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete a navigation blocker\n   * @param key The identifier for the blocker\n   */\n  deleteBlocker(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * HMR needs to pass in-flight route updates to React Router\n   * TODO: Replace this with granular route update APIs (addRoute, updateRoute, deleteRoute)\n   */\n  _internalSetRoutes(routes: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n\n  /**\n   * Map of current blockers\n   */\n  blockers: Map<string, Blocker>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface FutureConfig {\n  v7_fetcherPersist: boolean;\n  v7_normalizeFormMethod: boolean;\n  v7_partialHydration: boolean;\n  v7_prependBasename: boolean;\n  v7_relativeSplatPath: boolean;\n}\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  routes: AgnosticRouteObject[];\n  history: History;\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<FutureConfig>;\n  hydrationData?: HydrationState;\n  window?: Window;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  activeDeferreds: Record<string, DeferredData> | null;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: { requestContext?: unknown }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: { routeId?: string; requestContext?: unknown }\n  ): Promise<any>;\n}\n\ntype ViewTransitionOpts = {\n  currentLocation: Location;\n  nextLocation: Location;\n};\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (\n    state: RouterState,\n    opts: {\n      deletedFetchers: string[];\n      unstable_viewTransitionOpts?: ViewTransitionOpts;\n      unstable_flushSync: boolean;\n    }\n  ): void;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UIMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\nexport type RelativeRoutingType = \"route\" | \"path\";\n\n// Allowed for any navigation or fetch\ntype BaseNavigateOrFetchOptions = {\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  unstable_flushSync?: boolean;\n};\n\n// Only allowed for navigations\ntype BaseNavigateOptions = BaseNavigateOrFetchOptions & {\n  replace?: boolean;\n  state?: any;\n  fromRouteId?: string;\n  unstable_viewTransition?: boolean;\n};\n\n// Only allowed for submission navigations\ntype BaseSubmissionOptions = {\n  formMethod?: HTMLFormMethod;\n  formEncType?: FormEncType;\n} & (\n  | { formData: FormData; body?: undefined }\n  | { formData?: undefined; body: any }\n);\n\n/**\n * Options for a navigate() call for a normal (non-submission) navigation\n */\ntype LinkNavigateOptions = BaseNavigateOptions;\n\n/**\n * Options for a navigate() call for a submission navigation\n */\ntype SubmissionNavigateOptions = BaseNavigateOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to navigate() for a navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options for a fetch() load\n */\ntype LoadFetchOptions = BaseNavigateOrFetchOptions;\n\n/**\n * Options for a fetch() submission\n */\ntype SubmitFetchOptions = BaseNavigateOrFetchOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions = LoadFetchOptions | SubmitFetchOptions;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    json: undefined;\n    text: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    text: Submission[\"text\"];\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    text: undefined;\n    formData: undefined;\n    json: undefined;\n    data: TData | undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    data: TData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    text: Submission[\"text\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    data: TData | undefined;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface BlockerBlocked {\n  state: \"blocked\";\n  reset(): void;\n  proceed(): void;\n  location: Location;\n}\n\ninterface BlockerUnblocked {\n  state: \"unblocked\";\n  reset: undefined;\n  proceed: undefined;\n  location: undefined;\n}\n\ninterface BlockerProceeding {\n  state: \"proceeding\";\n  reset: undefined;\n  proceed: undefined;\n  location: Location;\n}\n\nexport type Blocker = BlockerUnblocked | BlockerBlocked | BlockerProceeding;\n\nexport type BlockerFunction = (args: {\n  currentLocation: Location;\n  nextLocation: Location;\n  historyAction: HistoryAction;\n}) => boolean;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * error boundary to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Cached info for active fetcher.load() instances so they can participate\n * in revalidation\n */\ninterface FetchLoadMatch {\n  routeId: string;\n  path: string;\n}\n\n/**\n * Identified fetcher.load() calls that need to be revalidated\n */\ninterface RevalidatingFetcher extends FetchLoadMatch {\n  key: string;\n  match: AgnosticDataRouteMatch | null;\n  matches: AgnosticDataRouteMatch[] | null;\n  controller: AbortController | null;\n}\n\n/**\n * Wrapper object to allow us to throw any response out from callLoaderOrAction\n * for queryRouter while preserving whether or not it was thrown or returned\n * from the loader/action\n */\ninterface QueryRouteResponse {\n  type: ResultType.data | ResultType.error;\n  response: Response;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_BLOCKER: BlockerUnblocked = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined,\n};\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst defaultMapRouteProperties: MapRoutePropertiesFunction = (route) => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary),\n});\n\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  const routerWindow = init.window\n    ? init.window\n    : typeof window !== \"undefined\"\n    ? window\n    : undefined;\n  const isBrowser =\n    typeof routerWindow !== \"undefined\" &&\n    typeof routerWindow.document !== \"undefined\" &&\n    typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  // Routes keyed by ID\n  let manifest: RouteManifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(\n    init.routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n  let inFlightDataRoutes: AgnosticDataRouteObject[] | undefined;\n  let basename = init.basename || \"/\";\n  // Config driven behavior flags\n  let future: FutureConfig = {\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false,\n    ...init.future,\n  };\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized: boolean;\n  let hasLazyRoutes = initialMatches.some((m) => m.route.lazy);\n  let hasLoaders = initialMatches.some((m) => m.route.loader);\n  if (hasLazyRoutes) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!hasLoaders) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    let errors = init.hydrationData ? init.hydrationData.errors : null;\n    let isRouteInitialized = (m: AgnosticDataRouteMatch) => {\n      // No loader, nothing to initialize\n      if (!m.route.loader) return true;\n      // Explicitly opting-in to running on hydration\n      if (m.route.loader.hydrate === true) return false;\n      // Otherwise, initialized if hydrated with data or an error\n      return (\n        (loaderData && loaderData[m.route.id] !== undefined) ||\n        (errors && errors[m.route.id] !== undefined)\n      );\n    };\n\n    // If errors exist, don't consider routes below the boundary\n    if (errors) {\n      let idx = initialMatches.findIndex(\n        (m) => errors![m.route.id] !== undefined\n      );\n      initialized = initialMatches.slice(0, idx + 1).every(isRouteInitialized);\n    } else {\n      initialized = initialMatches.every(isRouteInitialized);\n    }\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n\n  // Should the current navigation enable document.startViewTransition?\n  let pendingViewTransitionEnabled = false;\n\n  // Store applied view transitions so we can apply them on POP\n  let appliedViewTransitions: Map<string, Set<string>> = new Map<\n    string,\n    Set<string>\n  >();\n\n  // Cleanup function for persisting applied transitions to sessionStorage\n  let removePageHideEventListener: (() => void) | null = null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set<string>();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n\n  // Ref-count mounted fetchers so we know when it's ok to clean them up\n  let activeFetchers = new Map<string, number>();\n\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n  let deletedFetchers = new Set<string>();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map<string, BlockerFunction>();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        // Ignore this event if it was just us resetting the URL from a\n        // blocked POP navigation\n        if (ignoreNextHistoryUpdate) {\n          ignoreNextHistoryUpdate = false;\n          return;\n        }\n\n        warning(\n          blockerFunctions.size === 0 || delta != null,\n          \"You are trying to use a blocker on a POP navigation to a location \" +\n            \"that was not created by @remix-run/router. This will fail silently in \" +\n            \"production. This can happen if you are navigating outside the router \" +\n            \"via `window.history.pushState`/`window.location.hash` instead of using \" +\n            \"router navigation APIs.  This can also happen if you are using \" +\n            \"createHashRouter and the user manually changes the URL.\"\n        );\n\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction,\n        });\n\n        if (blockerKey && delta != null) {\n          // Restore the URL to match the current UI, but don't update router state\n          ignoreNextHistoryUpdate = true;\n          init.history.go(delta * -1);\n\n          // Put the blocker into a blocked state\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey!, {\n                state: \"proceeding\",\n                proceed: undefined,\n                reset: undefined,\n                location,\n              });\n              // Re-do the same POP navigation we just blocked\n              init.history.go(delta);\n            },\n            reset() {\n              let blockers = new Map(state.blockers);\n              blockers.set(blockerKey!, IDLE_BLOCKER);\n              updateState({ blockers });\n            },\n          });\n          return;\n        }\n\n        return startNavigation(historyAction, location);\n      }\n    );\n\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      let _saveAppliedTransitions = () =>\n        persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = () =>\n        routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    }\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location, {\n        initialHydration: true,\n      });\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(\n    newState: Partial<RouterState>,\n    opts: {\n      flushSync?: boolean;\n      viewTransitionOpts?: ViewTransitionOpts;\n    } = {}\n  ): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    let completedFetchers: string[] = [];\n    let deletedFetchersKeys: string[] = [];\n\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n\n    // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n    [...subscribers].forEach((subscriber) =>\n      subscriber(state, {\n        deletedFetchers: deletedFetchersKeys,\n        unstable_viewTransitionOpts: opts.viewTransitionOpts,\n        unstable_flushSync: opts.flushSync === true,\n      })\n    );\n\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach((key) => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach((key) => deleteFetcher(key));\n    }\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>,\n    { flushSync }: { flushSync?: boolean } = {}\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset =\n      pendingPreventScrollReset === true ||\n      (state.navigation.formMethod != null &&\n        isMutationMethod(state.navigation.formMethod) &&\n        location.state?._isRedirect !== true);\n\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    let viewTransitionOpts: ViewTransitionOpts | undefined;\n\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === HistoryAction.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location,\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location,\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set<string>([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location,\n      };\n    }\n\n    updateState(\n      {\n        ...newState, // matches, errors, fetchers go through as-is\n        actionData,\n        loaderData,\n        historyAction: pendingAction,\n        location,\n        initialized: true,\n        navigation: IDLE_NAVIGATION,\n        revalidation: \"idle\",\n        restoreScrollPosition: getSavedScrollPosition(\n          location,\n          newState.matches || state.matches\n        ),\n        preventScrollReset,\n        blockers,\n      },\n      {\n        viewTransitionOpts,\n        flushSync: flushSync === true,\n      }\n    );\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To | null,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      to,\n      future.v7_relativeSplatPath,\n      opts?.fromRouteId,\n      opts?.relative\n    );\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      false,\n      normalizedPath,\n      opts\n    );\n\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction,\n    });\n\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey!, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation,\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey!, IDLE_BLOCKER);\n          updateState({ blockers });\n        },\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.unstable_viewTransition,\n      flushSync,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      initialHydration?: boolean;\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponseImpl;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n      enableViewTransition?: boolean;\n      flushSync?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true;\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(routesToUse);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(\n        location,\n        {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error,\n          },\n        },\n        { flushSync }\n      );\n      return;\n    }\n\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (\n      state.initialized &&\n      !isRevalidationRequired &&\n      isHashChangeOnly(state.location, location) &&\n      !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))\n    ) {\n      completeNavigation(location, { matches }, { flushSync });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionData: RouteData | undefined;\n    let pendingError: RouteData | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError,\n      };\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace, flushSync }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false;\n\n      // Create a GET request for the loaders\n      request = new Request(request.url, { signal: request.signal });\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.fetcherSubmission,\n      opts && opts.replace,\n      opts && opts.initialHydration === true,\n      flushSync,\n      pendingActionData,\n      pendingError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      ...(pendingActionData ? { actionData: pendingActionData } : {}),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts: { replace?: boolean; flushSync?: boolean } = {}\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({ navigation }, { flushSync: opts.flushSync === true });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        manifest,\n        mapRouteProperties,\n        basename,\n        future.v7_relativeSplatPath\n      );\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace =\n          result.location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(state, result, { submission, replace });\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    fetcherSubmission?: Submission,\n    replace?: boolean,\n    initialHydration?: boolean,\n    flushSync?: boolean,\n    pendingActionData?: RouteData,\n    pendingError?: RouteData\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation =\n      overrideNavigation || getLoadingNavigation(location, submission);\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission =\n      submission ||\n      fetcherSubmission ||\n      getSubmissionFromNavigation(loadingNavigation);\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      future.v7_partialHydration && initialHydration === true,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      pendingActionData,\n      pendingError\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(\n        location,\n        {\n          matches,\n          loaderData: {},\n          // Commit pending error if we're short circuiting\n          errors: pendingError || null,\n          ...(pendingActionData ? { actionData: pendingActionData } : {}),\n          ...(updatedFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n        },\n        { flushSync }\n      );\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    // If we have partialHydration enabled, then don't update the state for the\n    // initial data load since it's not a \"navigation\"\n    if (\n      !isUninterruptedRevalidation &&\n      (!future.v7_partialHydration || !initialHydration)\n    ) {\n      revalidatingFetchers.forEach((rf) => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher = getLoadingFetcher(\n          undefined,\n          fetcher ? fetcher.data : undefined\n        );\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState(\n        {\n          navigation: loadingNavigation,\n          ...(actionData\n            ? Object.keys(actionData).length === 0\n              ? { actionData: null }\n              : { actionData }\n            : {}),\n          ...(revalidatingFetchers.length > 0\n            ? { fetchers: new Map(state.fetchers) }\n            : {}),\n        },\n        {\n          flushSync,\n        }\n      );\n    }\n\n    revalidatingFetchers.forEach((rf) => {\n      if (fetchControllers.has(rf.key)) {\n        abortFetcher(rf.key);\n      }\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((f) => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey =\n          revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      await startRedirectNavigation(state, redirect.result, { replace });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingError,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    // During partial hydration, preserve SSR errors for routes that don't re-run\n    if (future.v7_partialHydration && initialHydration && state.errors) {\n      Object.entries(state.errors)\n        .filter(([id]) => !matchesToLoad.some((m) => m.route.id === id))\n        .forEach(([routeId, error]) => {\n          errors = Object.assign(errors || {}, { [routeId]: error });\n        });\n    }\n\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers =\n      updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n\n    return {\n      loaderData,\n      errors,\n      ...(shouldUpdateFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n    };\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      href,\n      future.v7_relativeSplatPath,\n      routeId,\n      opts?.relative\n    );\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: normalizedPath }),\n        { flushSync }\n      );\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      true,\n      normalizedPath,\n      opts\n    );\n\n    if (error) {\n      setFetcherError(key, routeId, error, { flushSync });\n      return;\n    }\n\n    let match = getTargetMatch(matches, path);\n\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(\n        key,\n        routeId,\n        path,\n        match,\n        matches,\n        flushSync,\n        submission\n      );\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, { routeId, path });\n    handleFetcherLoader(\n      key,\n      routeId,\n      path,\n      match,\n      matches,\n      flushSync,\n      submission\n    );\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    flushSync: boolean,\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId,\n      });\n      setFetcherError(key, routeId, error, { flushSync });\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync,\n    });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let actionResult = await callLoaderOrAction(\n      \"action\",\n      fetchRequest,\n      match,\n      requestMatches,\n      manifest,\n      mapRouteProperties,\n      basename,\n      future.v7_relativeSplatPath\n    );\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    // When using v7_fetcherPersist, we don't want errors bubbling up to the UI\n    // or redirects processed for unmounted fetchers so we just revert them to\n    // idle\n    if (future.v7_fetcherPersist && deletedFetchers.has(key)) {\n      if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      }\n      // Let SuccessResult's fall through for revalidation\n    } else {\n      if (isRedirectResult(actionResult)) {\n        fetchControllers.delete(key);\n        if (pendingNavigationLoadId > originatingLoadId) {\n          // A new navigation was kicked off after our action started, so that\n          // should take precedence over this redirect navigation.  We already\n          // set isRevalidationRequired so all loaders for the new route should\n          // fire unless opted out via shouldRevalidate\n          updateFetcherState(key, getDoneFetcher(undefined));\n          return;\n        } else {\n          fetchRedirectIds.add(key);\n          updateFetcherState(key, getLoadingFetcher(submission));\n          return startRedirectNavigation(state, actionResult, {\n            fetcherSubmission: submission,\n          });\n        }\n      }\n\n      // Process any non-redirect errors thrown\n      if (isErrorResult(actionResult)) {\n        setFetcherError(key, routeId, actionResult.error);\n        return;\n      }\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n      nextLocation,\n      abortController.signal\n    );\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(routesToUse, state.navigation.location, basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      false,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      { [match.route.id]: actionResult.data },\n      undefined // No need to send through errors since we short circuit above\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter((rf) => rf.key !== key)\n      .forEach((rf) => {\n        let staleKey = rf.key;\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher = getLoadingFetcher(\n          undefined,\n          existingFetcher ? existingFetcher.data : undefined\n        );\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        if (fetchControllers.has(staleKey)) {\n          abortFetcher(staleKey);\n        }\n        if (rf.controller) {\n          fetchControllers.set(staleKey, rf.controller);\n        }\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((rf) => abortFetcher(rf.key));\n\n    abortController.signal.addEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    abortController.signal.removeEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey =\n          revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      return startRedirectNavigation(state, redirect.result);\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n\n    abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        fetchers: new Map(state.fetchers),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    flushSync: boolean,\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(\n      key,\n      getLoadingFetcher(\n        submission,\n        existingFetcher ? existingFetcher.data : undefined\n      ),\n      { flushSync }\n    );\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let result: DataResult = await callLoaderOrAction(\n      \"loader\",\n      fetchRequest,\n      match,\n      matches,\n      manifest,\n      mapRouteProperties,\n      basename,\n      future.v7_relativeSplatPath\n    );\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // We don't want errors bubbling up or redirects followed for unmounted\n    // fetchers, so short circuit here if it was removed from the UI\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(state, result);\n        return;\n      }\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    state: RouterState,\n    redirect: RedirectResult,\n    {\n      submission,\n      fetcherSubmission,\n      replace,\n    }: {\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      replace?: boolean;\n    } = {}\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(state.location, redirect.location, {\n      _isRedirect: true,\n    });\n    invariant(\n      redirectLocation,\n      \"Expected a location on the redirect navigation\"\n    );\n\n    if (isBrowser) {\n      let isDocumentReload = false;\n\n      if (redirect.reloadDocument) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(redirect.location)) {\n        const url = init.history.createURL(redirect.location);\n        isDocumentReload =\n          // Hard reload if it's an absolute URL to a new origin\n          url.origin !== routerWindow.location.origin ||\n          // Hard reload if it's an absolute URL that does not match our basename\n          stripBasename(url.pathname, basename) == null;\n      }\n\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(redirect.location);\n        } else {\n          routerWindow.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let { formMethod, formAction, formEncType } = state.navigation;\n    if (\n      !submission &&\n      !fetcherSubmission &&\n      formMethod &&\n      formAction &&\n      formEncType\n    ) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.status) &&\n      activeSubmission &&\n      isMutationMethod(activeSubmission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...activeSubmission,\n          formAction: redirect.location,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(\n        redirectLocation,\n        submission\n      );\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          manifest,\n          mapRouteProperties,\n          basename,\n          future.v7_relativeSplatPath\n        )\n      ),\n      ...fetchersToLoad.map((f) => {\n        if (f.matches && f.match && f.controller) {\n          return callLoaderOrAction(\n            \"loader\",\n            createClientSideRequest(init.history, f.path, f.controller.signal),\n            f.match,\n            f.matches,\n            manifest,\n            mapRouteProperties,\n            basename,\n            future.v7_relativeSplatPath\n          );\n        } else {\n          let error: ErrorResult = {\n            type: ResultType.error,\n            error: getInternalRouterError(404, { pathname: f.path }),\n          };\n          return error;\n        }\n      }),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        loaderResults.map(() => request.signal),\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map((f) => f.match),\n        fetcherResults,\n        fetchersToLoad.map((f) => (f.controller ? f.controller.signal : null)),\n        true\n      ),\n    ]);\n\n    return { results, loaderResults, fetcherResults };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function updateFetcherState(\n    key: string,\n    fetcher: Fetcher,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    state.fetchers.set(key, fetcher);\n    updateState(\n      { fetchers: new Map(state.fetchers) },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function setFetcherError(\n    key: string,\n    routeId: string,\n    error: any,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState(\n      {\n        errors: {\n          [boundaryMatch.route.id]: error,\n        },\n        fetchers: new Map(state.fetchers),\n      },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    if (future.v7_fetcherPersist) {\n      activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n      // If this fetcher was previously marked for deletion, unmark it since we\n      // have a new instance\n      if (deletedFetchers.has(key)) {\n        deletedFetchers.delete(key);\n      }\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  function deleteFetcher(key: string): void {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (\n      fetchControllers.has(key) &&\n      !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))\n    ) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    deletedFetchers.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function deleteFetcherAndUpdateState(key: string): void {\n    if (future.v7_fetcherPersist) {\n      let count = (activeFetchers.get(key) || 0) - 1;\n      if (count <= 0) {\n        activeFetchers.delete(key);\n        deletedFetchers.add(key);\n      } else {\n        activeFetchers.set(key, count);\n      }\n    } else {\n      deleteFetcher(key);\n    }\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): boolean {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key: string, fn: BlockerFunction) {\n    let blocker: Blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key: string) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key: string, newBlocker: Blocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(\n      (blocker.state === \"unblocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"proceeding\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"unblocked\") ||\n        (blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\"),\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({ blockers });\n  }\n\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction,\n  }: {\n    currentLocation: Location;\n    nextLocation: Location;\n    historyAction: HistoryAction;\n  }): string | undefined {\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return blockerKey;\n    }\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function getScrollKey(location: Location, matches: AgnosticDataRouteMatch[]) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(\n        location,\n        matches.map((m) => convertRouteMatchToUiMatch(m, state.loaderData))\n      );\n      return key || location.key;\n    }\n    return location.key;\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  function _internalSetRoutes(newRoutes: AgnosticDataRouteObject[]) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(\n      newRoutes,\n      mapRouteProperties,\n      undefined,\n      manifest\n    );\n  }\n\n  router = {\n    get basename() {\n      return basename;\n    },\n    get future() {\n      return future;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport const UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface StaticHandlerFutureConfig {\n  v7_relativeSplatPath: boolean;\n  v7_throwAbortReason: boolean;\n}\n\nexport interface CreateStaticHandlerOptions {\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<StaticHandlerFutureConfig>;\n}\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: CreateStaticHandlerOptions\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let manifest: RouteManifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (opts?.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts?.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Config driven behavior flags\n  let future: StaticHandlerFutureConfig = {\n    v7_relativeSplatPath: false,\n    v7_throwAbortReason: false,\n    ...(opts ? opts.future : null),\n  };\n\n  let dataRoutes = convertRoutesToDataRoutes(\n    routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(\n    request: Request,\n    { requestContext }: { requestContext?: unknown } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n    }: { requestContext?: unknown; routeId?: string } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      match\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      let data = Object.values(result.loaderData)[0];\n      if (result.activeDeferreds?.[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        manifest,\n        mapRouteProperties,\n        basename,\n        future.v7_relativeSplatPath,\n        { isStaticRequest: true, isRouteRequest, requestContext }\n      );\n\n      if (request.signal.aborted) {\n        throwStaticHandlerAbortedError(request, isRouteRequest, future);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, { type: \"defer-action\" });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        undefined,\n        {\n          [boundaryMatch.route.id]: result.error,\n        }\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n\n    return {\n      ...context,\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      actionHeaders: {\n        ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n      },\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch,\n    pendingActionError?: RouteData\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (\n      isRouteRequest &&\n      !routeMatch?.route.loader &&\n      !routeMatch?.route.lazy\n    ) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : getLoaderMatchesUntilBoundary(\n          matches,\n          Object.keys(pendingActionError || {})[0]\n        );\n    let matchesToLoad = requestMatches.filter(\n      (m) => m.route.loader || m.route.lazy\n    );\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          manifest,\n          mapRouteProperties,\n          basename,\n          future.v7_relativeSplatPath,\n          { isStaticRequest: true, isRouteRequest, requestContext }\n        )\n      ),\n    ]);\n\n    if (request.signal.aborted) {\n      throwStaticHandlerAbortedError(request, isRouteRequest, future);\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map<string, DeferredData>();\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionError,\n      activeDeferreds\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set<string>(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n      activeDeferreds:\n        activeDeferreds.size > 0\n          ? Object.fromEntries(activeDeferreds.entries())\n          : null,\n    };\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: isRouteErrorResponse(error) ? error.status : 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction throwStaticHandlerAbortedError(\n  request: Request,\n  isRouteRequest: boolean,\n  future: StaticHandlerFutureConfig\n) {\n  if (future.v7_throwAbortReason && request.signal.reason !== undefined) {\n    throw request.signal.reason;\n  }\n\n  let method = isRouteRequest ? \"queryRoute\" : \"query\";\n  throw new Error(`${method}() call aborted: ${request.method} ${request.url}`);\n}\n\nfunction isSubmissionNavigation(\n  opts: BaseNavigateOrFetchOptions\n): opts is SubmissionNavigateOptions {\n  return (\n    opts != null &&\n    ((\"formData\" in opts && opts.formData != null) ||\n      (\"body\" in opts && opts.body !== undefined))\n  );\n}\n\nfunction normalizeTo(\n  location: Path,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  prependBasename: boolean,\n  to: To | null,\n  v7_relativeSplatPath: boolean,\n  fromRouteId?: string,\n  relative?: RelativeRoutingType\n) {\n  let contextualMatches: AgnosticDataRouteMatch[];\n  let activeRouteMatch: AgnosticDataRouteMatch | undefined;\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n\n  // Resolve the relative path\n  let path = resolveTo(\n    to ? to : \".\",\n    getResolveToMatches(contextualMatches, v7_relativeSplatPath),\n    stripBasename(location.pathname, basename) || location.pathname,\n    relative === \"path\"\n  );\n\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n\n  // Add an ?index param for matched index routes if we don't already have one\n  if (\n    (to == null || to === \"\" || to === \".\") &&\n    activeRouteMatch &&\n    activeRouteMatch.route.index &&\n    !hasNakedIndexQuery(path.search)\n  ) {\n    path.search = path.search\n      ? path.search.replace(/^\\?/, \"?index&\")\n      : \"?index\";\n  }\n\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  normalizeFormMethod: boolean,\n  isFetcher: boolean,\n  path: string,\n  opts?: BaseNavigateOrFetchOptions\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponseImpl;\n} {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, { type: \"invalid-body\" }),\n  });\n\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod\n    ? (rawFormMethod.toUpperCase() as V7_FormMethod)\n    : (rawFormMethod.toLowerCase() as FormMethod);\n  let formAction = stripHashFromPath(path);\n\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      let text =\n        typeof opts.body === \"string\"\n          ? opts.body\n          : opts.body instanceof FormData ||\n            opts.body instanceof URLSearchParams\n          ? // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n            Array.from(opts.body.entries()).reduce(\n              (acc, [name, value]) => `${acc}${name}=${value}\\n`,\n              \"\"\n            )\n          : String(opts.body);\n\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text,\n        },\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      try {\n        let json =\n          typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined,\n          },\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n\n  invariant(\n    typeof FormData === \"function\",\n    \"FormData is not available in this environment\"\n  );\n\n  let searchParams: URLSearchParams;\n  let formData: FormData;\n\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n\n  let submission: Submission = {\n    formMethod,\n    formAction,\n    formEncType:\n      (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined,\n  };\n\n  if (isMutationMethod(submission.formMethod)) {\n    return { path, submission };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = `?${searchParams}`;\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId?: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  history: History,\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isInitialLoad: boolean,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  deletedFetchers: Set<string>,\n  fetchLoadMatches: Map<string, FetchLoadMatch>,\n  fetchRedirectIds: Set<string>,\n  routesToUse: AgnosticDataRouteObject[],\n  basename: string | undefined,\n  pendingActionData?: RouteData,\n  pendingError?: RouteData\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingError\n    ? Object.values(pendingError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : undefined;\n\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    let { route } = match;\n    if (route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n\n    if (route.loader == null) {\n      return false;\n    }\n\n    if (isInitialLoad) {\n      if (route.loader.hydrate) {\n        return true;\n      }\n      return (\n        state.loaderData[route.id] === undefined &&\n        // Don't re-run if the loader ran and threw an error\n        (!state.errors || state.errors[route.id] === undefined)\n      );\n    }\n\n    // Always call the loader on new route instances and pending defer cancellations\n    if (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      cancelledDeferredRoutes.some((id) => id === match.route.id)\n    ) {\n      return true;\n    }\n\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n\n    return shouldRevalidateLoader(match, {\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate:\n        // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n        isRevalidationRequired ||\n        // Clicked the same link, resubmitted a GET form\n        currentUrl.pathname + currentUrl.search ===\n          nextUrl.pathname + nextUrl.search ||\n        // Search params affect all loaders\n        currentUrl.search !== nextUrl.search ||\n        isNewRouteInstance(currentRouteMatch, nextRouteMatch),\n    });\n  });\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate:\n    //  - on initial load (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (\n      isInitialLoad ||\n      !matches.some((m) => m.route.id === f.routeId) ||\n      deletedFetchers.has(key)\n    ) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null,\n      });\n      return;\n    }\n\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.includes(key)) {\n      // Always revalidate if the fetcher was cancelled\n      shouldRevalidate = true;\n    } else if (\n      fetcher &&\n      fetcher.state !== \"idle\" &&\n      fetcher.data === undefined\n    ) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, {\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params,\n        ...submission,\n        actionResult,\n        defaultShouldRevalidate: isRevalidationRequired,\n      });\n    }\n\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController(),\n      });\n    }\n  });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath != null &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  loaderMatch: AgnosticDataRouteMatch,\n  arg: ShouldRevalidateFunctionArgs\n) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(\n  route: AgnosticDataRouteObject,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  manifest: RouteManifest\n) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy();\n\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates: Record<string, any> = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue =\n      routeToUpdate[lazyRouteProperty as keyof typeof routeToUpdate];\n\n    let isPropertyStaticallyDefined =\n      staticRouteValue !== undefined &&\n      // This property isn't static since it should always be updated based\n      // on the route updates\n      lazyRouteProperty !== \"hasErrorBoundary\";\n\n    warning(\n      !isPropertyStaticallyDefined,\n      `Route \"${routeToUpdate.id}\" has a static property \"${lazyRouteProperty}\" ` +\n        `defined but its lazy function is also returning a value for this property. ` +\n        `The lazy route property \"${lazyRouteProperty}\" will be ignored.`\n    );\n\n    if (\n      !isPropertyStaticallyDefined &&\n      !immutableRouteKeys.has(lazyRouteProperty as ImmutableRouteKey)\n    ) {\n      routeUpdates[lazyRouteProperty] =\n        lazyRoute[lazyRouteProperty as keyof typeof lazyRoute];\n    }\n  }\n\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, {\n    // To keep things framework agnostic, we use the provided\n    // `mapRouteProperties` (or wrapped `detectErrorBoundary`) function to\n    // set the framework-aware properties (`element`/`hasErrorBoundary`) since\n    // the logic will differ between frameworks.\n    ...mapRouteProperties(routeToUpdate),\n    lazy: undefined,\n  });\n}\n\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  matches: AgnosticDataRouteMatch[],\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  basename: string,\n  v7_relativeSplatPath: boolean,\n  opts: {\n    isStaticRequest?: boolean;\n    isRouteRequest?: boolean;\n    requestContext?: unknown;\n  } = {}\n): Promise<DataResult> {\n  let resultType;\n  let result;\n  let onReject: (() => void) | undefined;\n\n  let runHandler = (handler: ActionFunction | LoaderFunction) => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject: () => void;\n    let abortPromise = new Promise((_, r) => (reject = r));\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n    return Promise.race([\n      handler({\n        request,\n        params: match.params,\n        context: opts.requestContext,\n      }),\n      abortPromise,\n    ]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let values = await Promise.all([\n          // If the handler throws, don't let it immediately bubble out,\n          // since we need to let the lazy() execution finish so we know if this\n          // route has a boundary that can handle the error\n          runHandler(handler).catch((e) => {\n            handlerError = e;\n          }),\n          loadLazyRouteModule(match.route, mapRouteProperties, manifest),\n        ]);\n        if (handlerError) {\n          throw handlerError;\n        }\n        result = values[0];\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n\n        handler = match.route[type];\n        if (handler) {\n          // Handler still run even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id,\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return { type: ResultType.data, data: undefined };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname,\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n\n    invariant(\n      result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  if (isResponse(result)) {\n    let status = result.status;\n\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(\n        location,\n        \"Redirects returned/thrown from loaders/actions must have a Location header\"\n      );\n\n      // Support relative routing in internal redirects\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        location = normalizeTo(\n          new URL(request.url),\n          matches.slice(0, matches.indexOf(match) + 1),\n          basename,\n          true,\n          location,\n          v7_relativeSplatPath\n        );\n      } else if (!opts.isStaticRequest) {\n        // Strip off the protocol+origin for same-origin + same-basename absolute\n        // redirects. If this is a static request, we can let it go back to the\n        // browser as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\")\n          ? new URL(currentUrl.protocol + location)\n          : new URL(location);\n        let isSameBasename = stripBasename(url.pathname, basename) != null;\n        if (url.origin === currentUrl.origin && isSameBasename) {\n          location = url.pathname + url.search + url.hash;\n        }\n      }\n\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (opts.isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n        reloadDocument: result.headers.get(\"X-Remix-Reload-Document\") !== null,\n      };\n    }\n\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (opts.isRouteRequest) {\n      let queryRouteResponse: QueryRouteResponse = {\n        type:\n          resultType === ResultType.error ? ResultType.error : ResultType.data,\n        response: result,\n      };\n      throw queryRouteResponse;\n    }\n\n    let data: any;\n\n    try {\n      let contentType = result.headers.get(\"Content-Type\");\n      // Check between word boundaries instead of startsWith() due to the last\n      // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        if (result.body == null) {\n          data = null;\n        } else {\n          data = await result.json();\n        }\n      } else {\n        data = await result.text();\n      }\n    } catch (e) {\n      return { type: ResultType.error, error: e };\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponseImpl(status, result.statusText, data),\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  if (isDeferredData(result)) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: result.init?.status,\n      headers: result.init?.headers && new Headers(result.init.headers),\n    };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  history: History,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({ \"Content-Type\": formEncType });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (\n      formEncType === \"application/x-www-form-urlencoded\" &&\n      submission.formData\n    ) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n\n  return searchParams;\n}\n\nfunction convertSearchParamsToFormData(\n  searchParams: URLSearchParams\n): FormData {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      }\n\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (\n        result.statusCode != null &&\n        result.statusCode !== 200 &&\n        !foundError\n      ) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingError,\n    activeDeferreds\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let { key, match, controller } = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match?.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route =\n    routes.length === 1\n      ? routes[0]\n      : routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n          id: `__shim-error-route__`,\n        };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    type,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    type?: \"defer-action\" | \"invalid-body\";\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponseImpl(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(\n  results: DataResult[]\n): { result: RedirectResult; idx: number } | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return { result, idx: i };\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nexport function isDeferredData(value: any): value is DeferredData {\n  let deferred: DeferredData = value;\n  return (\n    deferred &&\n    typeof deferred === \"object\" &&\n    typeof deferred.data === \"object\" &&\n    typeof deferred.subscribe === \"function\" &&\n    typeof deferred.cancel === \"function\" &&\n    typeof deferred.resolveData === \"function\"\n  );\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj: any): obj is QueryRouteResponse {\n  return (\n    obj &&\n    isResponse(obj.response) &&\n    (obj.type === ResultType.data || obj.type === ResultType.error)\n  );\n}\n\nfunction isValidMethod(method: string): method is FormMethod | V7_FormMethod {\n  return validRequestMethods.has(method.toLowerCase() as FormMethod);\n}\n\nfunction isMutationMethod(\n  method: string\n): method is MutationFormMethod | V7_MutationFormMethod {\n  return validMutationMethods.has(method.toLowerCase() as MutationFormMethod);\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: (AgnosticDataRouteMatch | null)[],\n  results: DataResult[],\n  signals: (AbortSignal | null)[],\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match!.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      let signal = signals[index];\n      invariant(\n        signal,\n        \"Expected an AbortSignal for revalidating fetcher deferred result\"\n      );\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n\nfunction getSubmissionFromNavigation(\n  navigation: Navigation\n): Submission | undefined {\n  let { formMethod, formAction, formEncType, text, formData, json } =\n    navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text,\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined,\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined,\n    };\n  }\n}\n\nfunction getLoadingNavigation(\n  location: Location,\n  submission?: Submission\n): NavigationStates[\"Loading\"] {\n  if (submission) {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n    };\n    return navigation;\n  } else {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n    };\n    return navigation;\n  }\n}\n\nfunction getSubmittingNavigation(\n  location: Location,\n  submission: Submission\n): NavigationStates[\"Submitting\"] {\n  let navigation: NavigationStates[\"Submitting\"] = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n  };\n  return navigation;\n}\n\nfunction getLoadingFetcher(\n  submission?: Submission,\n  data?: Fetcher[\"data\"]\n): FetcherStates[\"Loading\"] {\n  if (submission) {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data,\n    };\n    return fetcher;\n  } else {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data,\n    };\n    return fetcher;\n  }\n}\n\nfunction getSubmittingFetcher(\n  submission: Submission,\n  existingFetcher?: Fetcher\n): FetcherStates[\"Submitting\"] {\n  let fetcher: FetcherStates[\"Submitting\"] = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined,\n  };\n  return fetcher;\n}\n\nfunction getDoneFetcher(data: Fetcher[\"data\"]): FetcherStates[\"Idle\"] {\n  let fetcher: FetcherStates[\"Idle\"] = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data,\n  };\n  return fetcher;\n}\n\nfunction restoreAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(\n      TRANSITIONS_STORAGE_KEY\n    );\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\n\nfunction persistAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  if (transitions.size > 0) {\n    let json: Record<string, string[]> = {};\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n    try {\n      _window.sessionStorage.setItem(\n        TRANSITIONS_STORAGE_KEY,\n        JSON.stringify(json)\n      );\n    } catch (error) {\n      warning(\n        false,\n        `Failed to save applied view transitions in sessionStorage (${error}).`\n      );\n    }\n  }\n}\n\n//#endregion\n","import * as React from \"react\";\nimport type {\n  AgnosticIndexRouteObject,\n  AgnosticNonIndexRouteObject,\n  AgnosticRouteMatch,\n  History,\n  LazyRouteFunction,\n  Location,\n  Action as NavigationType,\n  RelativeRoutingType,\n  Router,\n  StaticHandlerContext,\n  To,\n  TrackedPromise,\n} from \"@remix-run/router\";\n\n// Create react-specific types from the agnostic types in @remix-run/router to\n// export from react-router\nexport interface IndexRouteObject {\n  caseSensitive?: AgnosticIndexRouteObject[\"caseSensitive\"];\n  path?: AgnosticIndexRouteObject[\"path\"];\n  id?: AgnosticIndexRouteObject[\"id\"];\n  loader?: AgnosticIndexRouteObject[\"loader\"];\n  action?: AgnosticIndexRouteObject[\"action\"];\n  hasErrorBoundary?: AgnosticIndexRouteObject[\"hasErrorBoundary\"];\n  shouldRevalidate?: AgnosticIndexRouteObject[\"shouldRevalidate\"];\n  handle?: AgnosticIndexRouteObject[\"handle\"];\n  index: true;\n  children?: undefined;\n  element?: React.ReactNode | null;\n  hydrateFallbackElement?: React.ReactNode | null;\n  errorElement?: React.ReactNode | null;\n  Component?: React.ComponentType | null;\n  HydrateFallback?: React.ComponentType | null;\n  ErrorBoundary?: React.ComponentType | null;\n  lazy?: LazyRouteFunction<RouteObject>;\n}\n\nexport interface NonIndexRouteObject {\n  caseSensitive?: AgnosticNonIndexRouteObject[\"caseSensitive\"];\n  path?: AgnosticNonIndexRouteObject[\"path\"];\n  id?: AgnosticNonIndexRouteObject[\"id\"];\n  loader?: AgnosticNonIndexRouteObject[\"loader\"];\n  action?: AgnosticNonIndexRouteObject[\"action\"];\n  hasErrorBoundary?: AgnosticNonIndexRouteObject[\"hasErrorBoundary\"];\n  shouldRevalidate?: AgnosticNonIndexRouteObject[\"shouldRevalidate\"];\n  handle?: AgnosticNonIndexRouteObject[\"handle\"];\n  index?: false;\n  children?: RouteObject[];\n  element?: React.ReactNode | null;\n  hydrateFallbackElement?: React.ReactNode | null;\n  errorElement?: React.ReactNode | null;\n  Component?: React.ComponentType | null;\n  HydrateFallback?: React.ComponentType | null;\n  ErrorBoundary?: React.ComponentType | null;\n  lazy?: LazyRouteFunction<RouteObject>;\n}\n\nexport type RouteObject = IndexRouteObject | NonIndexRouteObject;\n\nexport type DataRouteObject = RouteObject & {\n  children?: DataRouteObject[];\n  id: string;\n};\n\nexport interface RouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends RouteObject = RouteObject\n> extends AgnosticRouteMatch<ParamKey, RouteObjectType> {}\n\nexport interface DataRouteMatch extends RouteMatch<string, DataRouteObject> {}\n\nexport interface DataRouterContextObject\n  // Omit `future` since those can be pulled from the `router`\n  // `NavigationContext` needs future since it doesn't have a `router` in all cases\n  extends Omit<NavigationContextObject, \"future\"> {\n  router: Router;\n  staticContext?: StaticHandlerContext;\n}\n\nexport const DataRouterContext =\n  React.createContext<DataRouterContextObject | null>(null);\nif (__DEV__) {\n  DataRouterContext.displayName = \"DataRouter\";\n}\n\nexport const DataRouterStateContext = React.createContext<\n  Router[\"state\"] | null\n>(null);\nif (__DEV__) {\n  DataRouterStateContext.displayName = \"DataRouterState\";\n}\n\nexport const AwaitContext = React.createContext<TrackedPromise | null>(null);\nif (__DEV__) {\n  AwaitContext.displayName = \"Await\";\n}\n\nexport interface NavigateOptions {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  unstable_flushSync?: boolean;\n  unstable_viewTransition?: boolean;\n}\n\n/**\n * A Navigator is a \"location changer\"; it's how you get to different locations.\n *\n * Every history instance conforms to the Navigator interface, but the\n * distinction is useful primarily when it comes to the low-level `<Router>` API\n * where both the location and a navigator must be provided separately in order\n * to avoid \"tearing\" that may occur in a suspense-enabled app if the action\n * and/or location were to be read directly from the history instance.\n */\nexport interface Navigator {\n  createHref: History[\"createHref\"];\n  // Optional for backwards-compat with Router/HistoryRouter usage (edge case)\n  encodeLocation?: History[\"encodeLocation\"];\n  go: History[\"go\"];\n  push(to: To, state?: any, opts?: NavigateOptions): void;\n  replace(to: To, state?: any, opts?: NavigateOptions): void;\n}\n\ninterface NavigationContextObject {\n  basename: string;\n  navigator: Navigator;\n  static: boolean;\n  future: {\n    v7_relativeSplatPath: boolean;\n  };\n}\n\nexport const NavigationContext = React.createContext<NavigationContextObject>(\n  null!\n);\n\nif (__DEV__) {\n  NavigationContext.displayName = \"Navigation\";\n}\n\ninterface LocationContextObject {\n  location: Location;\n  navigationType: NavigationType;\n}\n\nexport const LocationContext = React.createContext<LocationContextObject>(\n  null!\n);\n\nif (__DEV__) {\n  LocationContext.displayName = \"Location\";\n}\n\nexport interface RouteContextObject {\n  outlet: React.ReactElement | null;\n  matches: RouteMatch[];\n  isDataRoute: boolean;\n}\n\nexport const RouteContext = React.createContext<RouteContextObject>({\n  outlet: null,\n  matches: [],\n  isDataRoute: false,\n});\n\nif (__DEV__) {\n  RouteContext.displayName = \"Route\";\n}\n\nexport const RouteErrorContext = React.createContext<any>(null);\n\nif (__DEV__) {\n  RouteErrorContext.displayName = \"RouteError\";\n}\n","import * as React from \"react\";\nimport type {\n  Blocker,\n  BlockerFunction,\n  Location,\n  ParamParseKey,\n  Params,\n  Path,\n  PathMatch,\n  PathPattern,\n  RelativeRoutingType,\n  Router as RemixRouter,\n  RevalidationState,\n  To,\n  UIMatch,\n} from \"@remix-run/router\";\nimport {\n  IDLE_BLOCKER,\n  Action as NavigationType,\n  UNSAFE_convertRouteMatchToUiMatch as convertRouteMatchToUiMatch,\n  UNSAFE_getResolveToMatches as getResolveToMatches,\n  UNSAFE_invariant as invariant,\n  isRouteErrorResponse,\n  joinPaths,\n  matchPath,\n  matchRoutes,\n  parsePath,\n  resolveTo,\n  stripBasename,\n  UNSAFE_warning as warning,\n} from \"@remix-run/router\";\n\nimport type {\n  DataRouteMatch,\n  NavigateOptions,\n  RouteContextObject,\n  RouteMatch,\n  RouteObject,\n} from \"./context\";\nimport {\n  AwaitContext,\n  DataRouterContext,\n  DataRouterStateContext,\n  LocationContext,\n  NavigationContext,\n  RouteContext,\n  RouteErrorContext,\n} from \"./context\";\n\n/**\n * Returns the full href for the given \"to\" value. This is useful for building\n * custom links that are also accessible and preserve right-click behavior.\n *\n * @see https://reactrouter.com/hooks/use-href\n */\nexport function useHref(\n  to: To,\n  { relative }: { relative?: RelativeRoutingType } = {}\n): string {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useHref() may be used only in the context of a <Router> component.`\n  );\n\n  let { basename, navigator } = React.useContext(NavigationContext);\n  let { hash, pathname, search } = useResolvedPath(to, { relative });\n\n  let joinedPathname = pathname;\n\n  // If we're operating within a basename, prepend it to the pathname prior\n  // to creating the href.  If this is a root navigation, then just use the raw\n  // basename which allows the basename to have full control over the presence\n  // of a trailing slash on root links\n  if (basename !== \"/\") {\n    joinedPathname =\n      pathname === \"/\" ? basename : joinPaths([basename, pathname]);\n  }\n\n  return navigator.createHref({ pathname: joinedPathname, search, hash });\n}\n\n/**\n * Returns true if this component is a descendant of a `<Router>`.\n *\n * @see https://reactrouter.com/hooks/use-in-router-context\n */\nexport function useInRouterContext(): boolean {\n  return React.useContext(LocationContext) != null;\n}\n\n/**\n * Returns the current location object, which represents the current URL in web\n * browsers.\n *\n * Note: If you're using this it may mean you're doing some of your own\n * \"routing\" in your app, and we'd like to know what your use case is. We may\n * be able to provide something higher-level to better suit your needs.\n *\n * @see https://reactrouter.com/hooks/use-location\n */\nexport function useLocation(): Location {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useLocation() may be used only in the context of a <Router> component.`\n  );\n\n  return React.useContext(LocationContext).location;\n}\n\n/**\n * Returns the current navigation action which describes how the router came to\n * the current location, either by a pop, push, or replace on the history stack.\n *\n * @see https://reactrouter.com/hooks/use-navigation-type\n */\nexport function useNavigationType(): NavigationType {\n  return React.useContext(LocationContext).navigationType;\n}\n\n/**\n * Returns a PathMatch object if the given pattern matches the current URL.\n * This is useful for components that need to know \"active\" state, e.g.\n * `<NavLink>`.\n *\n * @see https://reactrouter.com/hooks/use-match\n */\nexport function useMatch<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(pattern: PathPattern<Path> | Path): PathMatch<ParamKey> | null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useMatch() may be used only in the context of a <Router> component.`\n  );\n\n  let { pathname } = useLocation();\n  return React.useMemo(\n    () => matchPath<ParamKey, Path>(pattern, pathname),\n    [pathname, pattern]\n  );\n}\n\n/**\n * The interface for the navigate() function returned from useNavigate().\n */\nexport interface NavigateFunction {\n  (to: To, options?: NavigateOptions): void;\n  (delta: number): void;\n}\n\nconst navigateEffectWarning =\n  `You should call navigate() in a React.useEffect(), not when ` +\n  `your component is first rendered.`;\n\n// Mute warnings for calls to useNavigate in SSR environments\nfunction useIsomorphicLayoutEffect(\n  cb: Parameters<typeof React.useLayoutEffect>[0]\n) {\n  let isStatic = React.useContext(NavigationContext).static;\n  if (!isStatic) {\n    // We should be able to get rid of this once react 18.3 is released\n    // See: https://github.com/facebook/react/pull/26395\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(cb);\n  }\n}\n\n/**\n * Returns an imperative method for changing the location. Used by `<Link>`s, but\n * may also be used by other elements to change the location.\n *\n * @see https://reactrouter.com/hooks/use-navigate\n */\nexport function useNavigate(): NavigateFunction {\n  let { isDataRoute } = React.useContext(RouteContext);\n  // Conditional usage is OK here because the usage of a data router is static\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  return isDataRoute ? useNavigateStable() : useNavigateUnstable();\n}\n\nfunction useNavigateUnstable(): NavigateFunction {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useNavigate() may be used only in the context of a <Router> component.`\n  );\n\n  let dataRouterContext = React.useContext(DataRouterContext);\n  let { basename, future, navigator } = React.useContext(NavigationContext);\n  let { matches } = React.useContext(RouteContext);\n  let { pathname: locationPathname } = useLocation();\n\n  let routePathnamesJson = JSON.stringify(\n    getResolveToMatches(matches, future.v7_relativeSplatPath)\n  );\n\n  let activeRef = React.useRef(false);\n  useIsomorphicLayoutEffect(() => {\n    activeRef.current = true;\n  });\n\n  let navigate: NavigateFunction = React.useCallback(\n    (to: To | number, options: NavigateOptions = {}) => {\n      warning(activeRef.current, navigateEffectWarning);\n\n      // Short circuit here since if this happens on first render the navigate\n      // is useless because we haven't wired up our history listener yet\n      if (!activeRef.current) return;\n\n      if (typeof to === \"number\") {\n        navigator.go(to);\n        return;\n      }\n\n      let path = resolveTo(\n        to,\n        JSON.parse(routePathnamesJson),\n        locationPathname,\n        options.relative === \"path\"\n      );\n\n      // If we're operating within a basename, prepend it to the pathname prior\n      // to handing off to history (but only if we're not in a data router,\n      // otherwise it'll prepend the basename inside of the router).\n      // If this is a root navigation, then we navigate to the raw basename\n      // which allows the basename to have full control over the presence of a\n      // trailing slash on root links\n      if (dataRouterContext == null && basename !== \"/\") {\n        path.pathname =\n          path.pathname === \"/\"\n            ? basename\n            : joinPaths([basename, path.pathname]);\n      }\n\n      (!!options.replace ? navigator.replace : navigator.push)(\n        path,\n        options.state,\n        options\n      );\n    },\n    [\n      basename,\n      navigator,\n      routePathnamesJson,\n      locationPathname,\n      dataRouterContext,\n    ]\n  );\n\n  return navigate;\n}\n\nconst OutletContext = React.createContext<unknown>(null);\n\n/**\n * Returns the context (if provided) for the child route at this level of the route\n * hierarchy.\n * @see https://reactrouter.com/hooks/use-outlet-context\n */\nexport function useOutletContext<Context = unknown>(): Context {\n  return React.useContext(OutletContext) as Context;\n}\n\n/**\n * Returns the element for the child route at this level of the route\n * hierarchy. Used internally by `<Outlet>` to render child routes.\n *\n * @see https://reactrouter.com/hooks/use-outlet\n */\nexport function useOutlet(context?: unknown): React.ReactElement | null {\n  let outlet = React.useContext(RouteContext).outlet;\n  if (outlet) {\n    return (\n      <OutletContext.Provider value={context}>{outlet}</OutletContext.Provider>\n    );\n  }\n  return outlet;\n}\n\n/**\n * Returns an object of key/value pairs of the dynamic params from the current\n * URL that were matched by the route path.\n *\n * @see https://reactrouter.com/hooks/use-params\n */\nexport function useParams<\n  ParamsOrKey extends string | Record<string, string | undefined> = string\n>(): Readonly<\n  [ParamsOrKey] extends [string] ? Params<ParamsOrKey> : Partial<ParamsOrKey>\n> {\n  let { matches } = React.useContext(RouteContext);\n  let routeMatch = matches[matches.length - 1];\n  return routeMatch ? (routeMatch.params as any) : {};\n}\n\n/**\n * Resolves the pathname of the given `to` value against the current location.\n *\n * @see https://reactrouter.com/hooks/use-resolved-path\n */\nexport function useResolvedPath(\n  to: To,\n  { relative }: { relative?: RelativeRoutingType } = {}\n): Path {\n  let { future } = React.useContext(NavigationContext);\n  let { matches } = React.useContext(RouteContext);\n  let { pathname: locationPathname } = useLocation();\n  let routePathnamesJson = JSON.stringify(\n    getResolveToMatches(matches, future.v7_relativeSplatPath)\n  );\n\n  return React.useMemo(\n    () =>\n      resolveTo(\n        to,\n        JSON.parse(routePathnamesJson),\n        locationPathname,\n        relative === \"path\"\n      ),\n    [to, routePathnamesJson, locationPathname, relative]\n  );\n}\n\n/**\n * Returns the element of the route that matched the current location, prepared\n * with the correct context to render the remainder of the route tree. Route\n * elements in the tree must render an `<Outlet>` to render their child route's\n * element.\n *\n * @see https://reactrouter.com/hooks/use-routes\n */\nexport function useRoutes(\n  routes: RouteObject[],\n  locationArg?: Partial<Location> | string\n): React.ReactElement | null {\n  return useRoutesImpl(routes, locationArg);\n}\n\n// Internal implementation with accept optional param for RouterProvider usage\nexport function useRoutesImpl(\n  routes: RouteObject[],\n  locationArg?: Partial<Location> | string,\n  dataRouterState?: RemixRouter[\"state\"],\n  future?: RemixRouter[\"future\"]\n): React.ReactElement | null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useRoutes() may be used only in the context of a <Router> component.`\n  );\n\n  let { navigator } = React.useContext(NavigationContext);\n  let { matches: parentMatches } = React.useContext(RouteContext);\n  let routeMatch = parentMatches[parentMatches.length - 1];\n  let parentParams = routeMatch ? routeMatch.params : {};\n  let parentPathname = routeMatch ? routeMatch.pathname : \"/\";\n  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : \"/\";\n  let parentRoute = routeMatch && routeMatch.route;\n\n  if (__DEV__) {\n    // You won't get a warning about 2 different <Routes> under a <Route>\n    // without a trailing *, but this is a best-effort warning anyway since we\n    // cannot even give the warning unless they land at the parent route.\n    //\n    // Example:\n    //\n    // <Routes>\n    //   {/* This route path MUST end with /* because otherwise\n    //       it will never match /blog/post/123 */}\n    //   <Route path=\"blog\" element={<Blog />} />\n    //   <Route path=\"blog/feed\" element={<BlogFeed />} />\n    // </Routes>\n    //\n    // function Blog() {\n    //   return (\n    //     <Routes>\n    //       <Route path=\"post/:id\" element={<Post />} />\n    //     </Routes>\n    //   );\n    // }\n    let parentPath = (parentRoute && parentRoute.path) || \"\";\n    warningOnce(\n      parentPathname,\n      !parentRoute || parentPath.endsWith(\"*\"),\n      `You rendered descendant <Routes> (or called \\`useRoutes()\\`) at ` +\n        `\"${parentPathname}\" (under <Route path=\"${parentPath}\">) but the ` +\n        `parent route path has no trailing \"*\". This means if you navigate ` +\n        `deeper, the parent won't match anymore and therefore the child ` +\n        `routes will never render.\\n\\n` +\n        `Please change the parent <Route path=\"${parentPath}\"> to <Route ` +\n        `path=\"${parentPath === \"/\" ? \"*\" : `${parentPath}/*`}\">.`\n    );\n  }\n\n  let locationFromContext = useLocation();\n\n  let location;\n  if (locationArg) {\n    let parsedLocationArg =\n      typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n    invariant(\n      parentPathnameBase === \"/\" ||\n        parsedLocationArg.pathname?.startsWith(parentPathnameBase),\n      `When overriding the location using \\`<Routes location>\\` or \\`useRoutes(routes, location)\\`, ` +\n        `the location pathname must begin with the portion of the URL pathname that was ` +\n        `matched by all parent routes. The current pathname base is \"${parentPathnameBase}\" ` +\n        `but pathname \"${parsedLocationArg.pathname}\" was given in the \\`location\\` prop.`\n    );\n\n    location = parsedLocationArg;\n  } else {\n    location = locationFromContext;\n  }\n\n  let pathname = location.pathname || \"/\";\n\n  let remainingPathname = pathname;\n  if (parentPathnameBase !== \"/\") {\n    // Determine the remaining pathname by removing the # of URL segments the\n    // parentPathnameBase has, instead of removing based on character count.\n    // This is because we can't guarantee that incoming/outgoing encodings/\n    // decodings will match exactly.\n    // We decode paths before matching on a per-segment basis with\n    // decodeURIComponent(), but we re-encode pathnames via `new URL()` so they\n    // match what `window.location.pathname` would reflect.  Those don't 100%\n    // align when it comes to encoded URI characters such as % and &.\n    //\n    // So we may end up with:\n    //   pathname:           \"/descendant/a%25b/match\"\n    //   parentPathnameBase: \"/descendant/a%b\"\n    //\n    // And the direct substring removal approach won't work :/\n    let parentSegments = parentPathnameBase.replace(/^\\//, \"\").split(\"/\");\n    let segments = pathname.replace(/^\\//, \"\").split(\"/\");\n    remainingPathname = \"/\" + segments.slice(parentSegments.length).join(\"/\");\n  }\n\n  let matches = matchRoutes(routes, { pathname: remainingPathname });\n\n  if (__DEV__) {\n    warning(\n      parentRoute || matches != null,\n      `No routes matched location \"${location.pathname}${location.search}${location.hash}\" `\n    );\n\n    warning(\n      matches == null ||\n        matches[matches.length - 1].route.element !== undefined ||\n        matches[matches.length - 1].route.Component !== undefined ||\n        matches[matches.length - 1].route.lazy !== undefined,\n      `Matched leaf route at location \"${location.pathname}${location.search}${location.hash}\" ` +\n        `does not have an element or Component. This means it will render an <Outlet /> with a ` +\n        `null value by default resulting in an \"empty\" page.`\n    );\n  }\n\n  let renderedMatches = _renderMatches(\n    matches &&\n      matches.map((match) =>\n        Object.assign({}, match, {\n          params: Object.assign({}, parentParams, match.params),\n          pathname: joinPaths([\n            parentPathnameBase,\n            // Re-encode pathnames that were decoded inside matchRoutes\n            navigator.encodeLocation\n              ? navigator.encodeLocation(match.pathname).pathname\n              : match.pathname,\n          ]),\n          pathnameBase:\n            match.pathnameBase === \"/\"\n              ? parentPathnameBase\n              : joinPaths([\n                  parentPathnameBase,\n                  // Re-encode pathnames that were decoded inside matchRoutes\n                  navigator.encodeLocation\n                    ? navigator.encodeLocation(match.pathnameBase).pathname\n                    : match.pathnameBase,\n                ]),\n        })\n      ),\n    parentMatches,\n    dataRouterState,\n    future\n  );\n\n  // When a user passes in a `locationArg`, the associated routes need to\n  // be wrapped in a new `LocationContext.Provider` in order for `useLocation`\n  // to use the scoped location instead of the global location.\n  if (locationArg && renderedMatches) {\n    return (\n      <LocationContext.Provider\n        value={{\n          location: {\n            pathname: \"/\",\n            search: \"\",\n            hash: \"\",\n            state: null,\n            key: \"default\",\n            ...location,\n          },\n          navigationType: NavigationType.Pop,\n        }}\n      >\n        {renderedMatches}\n      </LocationContext.Provider>\n    );\n  }\n\n  return renderedMatches;\n}\n\nfunction DefaultErrorComponent() {\n  let error = useRouteError();\n  let message = isRouteErrorResponse(error)\n    ? `${error.status} ${error.statusText}`\n    : error instanceof Error\n    ? error.message\n    : JSON.stringify(error);\n  let stack = error instanceof Error ? error.stack : null;\n  let lightgrey = \"rgba(200,200,200, 0.5)\";\n  let preStyles = { padding: \"0.5rem\", backgroundColor: lightgrey };\n  let codeStyles = { padding: \"2px 4px\", backgroundColor: lightgrey };\n\n  let devInfo = null;\n  if (__DEV__) {\n    console.error(\n      \"Error handled by React Router default ErrorBoundary:\",\n      error\n    );\n\n    devInfo = (\n      <>\n        <p>💿 Hey developer 👋</p>\n        <p>\n          You can provide a way better UX than this when your app throws errors\n          by providing your own <code style={codeStyles}>ErrorBoundary</code> or{\" \"}\n          <code style={codeStyles}>errorElement</code> prop on your route.\n        </p>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <h2>Unexpected Application Error!</h2>\n      <h3 style={{ fontStyle: \"italic\" }}>{message}</h3>\n      {stack ? <pre style={preStyles}>{stack}</pre> : null}\n      {devInfo}\n    </>\n  );\n}\n\nconst defaultErrorElement = <DefaultErrorComponent />;\n\ntype RenderErrorBoundaryProps = React.PropsWithChildren<{\n  location: Location;\n  revalidation: RevalidationState;\n  error: any;\n  component: React.ReactNode;\n  routeContext: RouteContextObject;\n}>;\n\ntype RenderErrorBoundaryState = {\n  location: Location;\n  revalidation: RevalidationState;\n  error: any;\n};\n\nexport class RenderErrorBoundary extends React.Component<\n  RenderErrorBoundaryProps,\n  RenderErrorBoundaryState\n> {\n  constructor(props: RenderErrorBoundaryProps) {\n    super(props);\n    this.state = {\n      location: props.location,\n      revalidation: props.revalidation,\n      error: props.error,\n    };\n  }\n\n  static getDerivedStateFromError(error: any) {\n    return { error: error };\n  }\n\n  static getDerivedStateFromProps(\n    props: RenderErrorBoundaryProps,\n    state: RenderErrorBoundaryState\n  ) {\n    // When we get into an error state, the user will likely click \"back\" to the\n    // previous page that didn't have an error. Because this wraps the entire\n    // application, that will have no effect--the error page continues to display.\n    // This gives us a mechanism to recover from the error when the location changes.\n    //\n    // Whether we're in an error state or not, we update the location in state\n    // so that when we are in an error state, it gets reset when a new location\n    // comes in and the user recovers from the error.\n    if (\n      state.location !== props.location ||\n      (state.revalidation !== \"idle\" && props.revalidation === \"idle\")\n    ) {\n      return {\n        error: props.error,\n        location: props.location,\n        revalidation: props.revalidation,\n      };\n    }\n\n    // If we're not changing locations, preserve the location but still surface\n    // any new errors that may come through. We retain the existing error, we do\n    // this because the error provided from the app state may be cleared without\n    // the location changing.\n    return {\n      error: props.error !== undefined ? props.error : state.error,\n      location: state.location,\n      revalidation: props.revalidation || state.revalidation,\n    };\n  }\n\n  componentDidCatch(error: any, errorInfo: any) {\n    console.error(\n      \"React Router caught the following error during render\",\n      error,\n      errorInfo\n    );\n  }\n\n  render() {\n    return this.state.error !== undefined ? (\n      <RouteContext.Provider value={this.props.routeContext}>\n        <RouteErrorContext.Provider\n          value={this.state.error}\n          children={this.props.component}\n        />\n      </RouteContext.Provider>\n    ) : (\n      this.props.children\n    );\n  }\n}\n\ninterface RenderedRouteProps {\n  routeContext: RouteContextObject;\n  match: RouteMatch<string, RouteObject>;\n  children: React.ReactNode | null;\n}\n\nfunction RenderedRoute({ routeContext, match, children }: RenderedRouteProps) {\n  let dataRouterContext = React.useContext(DataRouterContext);\n\n  // Track how deep we got in our render pass to emulate SSR componentDidCatch\n  // in a DataStaticRouter\n  if (\n    dataRouterContext &&\n    dataRouterContext.static &&\n    dataRouterContext.staticContext &&\n    (match.route.errorElement || match.route.ErrorBoundary)\n  ) {\n    dataRouterContext.staticContext._deepestRenderedBoundaryId = match.route.id;\n  }\n\n  return (\n    <RouteContext.Provider value={routeContext}>\n      {children}\n    </RouteContext.Provider>\n  );\n}\n\nexport function _renderMatches(\n  matches: RouteMatch[] | null,\n  parentMatches: RouteMatch[] = [],\n  dataRouterState: RemixRouter[\"state\"] | null = null,\n  future: RemixRouter[\"future\"] | null = null\n): React.ReactElement | null {\n  if (matches == null) {\n    if (dataRouterState?.errors) {\n      // Don't bail if we have data router errors so we can render them in the\n      // boundary.  Use the pre-matched (or shimmed) matches\n      matches = dataRouterState.matches as DataRouteMatch[];\n    } else {\n      return null;\n    }\n  }\n\n  let renderedMatches = matches;\n\n  // If we have data errors, trim matches to the highest error boundary\n  let errors = dataRouterState?.errors;\n  if (errors != null) {\n    let errorIndex = renderedMatches.findIndex(\n      (m) => m.route.id && errors?.[m.route.id]\n    );\n    invariant(\n      errorIndex >= 0,\n      `Could not find a matching route for errors on route IDs: ${Object.keys(\n        errors\n      ).join(\",\")}`\n    );\n    renderedMatches = renderedMatches.slice(\n      0,\n      Math.min(renderedMatches.length, errorIndex + 1)\n    );\n  }\n\n  // If we're in a partial hydration mode, detect if we need to render down to\n  // a given HydrateFallback while we load the rest of the hydration data\n  let renderFallback = false;\n  let fallbackIndex = -1;\n  if (dataRouterState && future && future.v7_partialHydration) {\n    for (let i = 0; i < renderedMatches.length; i++) {\n      let match = renderedMatches[i];\n      // Track the deepest fallback up until the first route without data\n      if (match.route.HydrateFallback || match.route.hydrateFallbackElement) {\n        fallbackIndex = i;\n      }\n\n      if (match.route.id) {\n        let { loaderData, errors } = dataRouterState;\n        let needsToRunLoader =\n          match.route.loader &&\n          loaderData[match.route.id] === undefined &&\n          (!errors || errors[match.route.id] === undefined);\n        if (match.route.lazy || needsToRunLoader) {\n          // We found the first route that's not ready to render (waiting on\n          // lazy, or has a loader that hasn't run yet).  Flag that we need to\n          // render a fallback and render up until the appropriate fallback\n          renderFallback = true;\n          if (fallbackIndex >= 0) {\n            renderedMatches = renderedMatches.slice(0, fallbackIndex + 1);\n          } else {\n            renderedMatches = [renderedMatches[0]];\n          }\n          break;\n        }\n      }\n    }\n  }\n\n  return renderedMatches.reduceRight((outlet, match, index) => {\n    // Only data routers handle errors/fallbacks\n    let error: any;\n    let shouldRenderHydrateFallback = false;\n    let errorElement: React.ReactNode | null = null;\n    let hydrateFallbackElement: React.ReactNode | null = null;\n    if (dataRouterState) {\n      error = errors && match.route.id ? errors[match.route.id] : undefined;\n      errorElement = match.route.errorElement || defaultErrorElement;\n\n      if (renderFallback) {\n        if (fallbackIndex < 0 && index === 0) {\n          warningOnce(\n            \"route-fallback\",\n            false,\n            \"No `HydrateFallback` element provided to render during initial hydration\"\n          );\n          shouldRenderHydrateFallback = true;\n          hydrateFallbackElement = null;\n        } else if (fallbackIndex === index) {\n          shouldRenderHydrateFallback = true;\n          hydrateFallbackElement = match.route.hydrateFallbackElement || null;\n        }\n      }\n    }\n\n    let matches = parentMatches.concat(renderedMatches.slice(0, index + 1));\n    let getChildren = () => {\n      let children: React.ReactNode;\n      if (error) {\n        children = errorElement;\n      } else if (shouldRenderHydrateFallback) {\n        children = hydrateFallbackElement;\n      } else if (match.route.Component) {\n        // Note: This is a de-optimized path since React won't re-use the\n        // ReactElement since it's identity changes with each new\n        // React.createElement call.  We keep this so folks can use\n        // `<Route Component={...}>` in `<Routes>` but generally `Component`\n        // usage is only advised in `RouterProvider` when we can convert it to\n        // `element` ahead of time.\n        children = <match.route.Component />;\n      } else if (match.route.element) {\n        children = match.route.element;\n      } else {\n        children = outlet;\n      }\n      return (\n        <RenderedRoute\n          match={match}\n          routeContext={{\n            outlet,\n            matches,\n            isDataRoute: dataRouterState != null,\n          }}\n          children={children}\n        />\n      );\n    };\n    // Only wrap in an error boundary within data router usages when we have an\n    // ErrorBoundary/errorElement on this route.  Otherwise let it bubble up to\n    // an ancestor ErrorBoundary/errorElement\n    return dataRouterState &&\n      (match.route.ErrorBoundary || match.route.errorElement || index === 0) ? (\n      <RenderErrorBoundary\n        location={dataRouterState.location}\n        revalidation={dataRouterState.revalidation}\n        component={errorElement}\n        error={error}\n        children={getChildren()}\n        routeContext={{ outlet: null, matches, isDataRoute: true }}\n      />\n    ) : (\n      getChildren()\n    );\n  }, null as React.ReactElement | null);\n}\n\nenum DataRouterHook {\n  UseBlocker = \"useBlocker\",\n  UseRevalidator = \"useRevalidator\",\n  UseNavigateStable = \"useNavigate\",\n}\n\nenum DataRouterStateHook {\n  UseBlocker = \"useBlocker\",\n  UseLoaderData = \"useLoaderData\",\n  UseActionData = \"useActionData\",\n  UseRouteError = \"useRouteError\",\n  UseNavigation = \"useNavigation\",\n  UseRouteLoaderData = \"useRouteLoaderData\",\n  UseMatches = \"useMatches\",\n  UseRevalidator = \"useRevalidator\",\n  UseNavigateStable = \"useNavigate\",\n  UseRouteId = \"useRouteId\",\n}\n\nfunction getDataRouterConsoleError(\n  hookName: DataRouterHook | DataRouterStateHook\n) {\n  return `${hookName} must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.`;\n}\n\nfunction useDataRouterContext(hookName: DataRouterHook) {\n  let ctx = React.useContext(DataRouterContext);\n  invariant(ctx, getDataRouterConsoleError(hookName));\n  return ctx;\n}\n\nfunction useDataRouterState(hookName: DataRouterStateHook) {\n  let state = React.useContext(DataRouterStateContext);\n  invariant(state, getDataRouterConsoleError(hookName));\n  return state;\n}\n\nfunction useRouteContext(hookName: DataRouterStateHook) {\n  let route = React.useContext(RouteContext);\n  invariant(route, getDataRouterConsoleError(hookName));\n  return route;\n}\n\n// Internal version with hookName-aware debugging\nfunction useCurrentRouteId(hookName: DataRouterStateHook) {\n  let route = useRouteContext(hookName);\n  let thisRoute = route.matches[route.matches.length - 1];\n  invariant(\n    thisRoute.route.id,\n    `${hookName} can only be used on routes that contain a unique \"id\"`\n  );\n  return thisRoute.route.id;\n}\n\n/**\n * Returns the ID for the nearest contextual route\n */\nexport function useRouteId() {\n  return useCurrentRouteId(DataRouterStateHook.UseRouteId);\n}\n\n/**\n * Returns the current navigation, defaulting to an \"idle\" navigation when\n * no navigation is in progress\n */\nexport function useNavigation() {\n  let state = useDataRouterState(DataRouterStateHook.UseNavigation);\n  return state.navigation;\n}\n\n/**\n * Returns a revalidate function for manually triggering revalidation, as well\n * as the current state of any manual revalidations\n */\nexport function useRevalidator() {\n  let dataRouterContext = useDataRouterContext(DataRouterHook.UseRevalidator);\n  let state = useDataRouterState(DataRouterStateHook.UseRevalidator);\n  return React.useMemo(\n    () => ({\n      revalidate: dataRouterContext.router.revalidate,\n      state: state.revalidation,\n    }),\n    [dataRouterContext.router.revalidate, state.revalidation]\n  );\n}\n\n/**\n * Returns the active route matches, useful for accessing loaderData for\n * parent/child routes or the route \"handle\" property\n */\nexport function useMatches(): UIMatch[] {\n  let { matches, loaderData } = useDataRouterState(\n    DataRouterStateHook.UseMatches\n  );\n  return React.useMemo(\n    () => matches.map((m) => convertRouteMatchToUiMatch(m, loaderData)),\n    [matches, loaderData]\n  );\n}\n\n/**\n * Returns the loader data for the nearest ancestor Route loader\n */\nexport function useLoaderData(): unknown {\n  let state = useDataRouterState(DataRouterStateHook.UseLoaderData);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseLoaderData);\n\n  if (state.errors && state.errors[routeId] != null) {\n    console.error(\n      `You cannot \\`useLoaderData\\` in an errorElement (routeId: ${routeId})`\n    );\n    return undefined;\n  }\n  return state.loaderData[routeId];\n}\n\n/**\n * Returns the loaderData for the given routeId\n */\nexport function useRouteLoaderData(routeId: string): unknown {\n  let state = useDataRouterState(DataRouterStateHook.UseRouteLoaderData);\n  return state.loaderData[routeId];\n}\n\n/**\n * Returns the action data for the nearest ancestor Route action\n */\nexport function useActionData(): unknown {\n  let state = useDataRouterState(DataRouterStateHook.UseActionData);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseLoaderData);\n  return state.actionData ? state.actionData[routeId] : undefined;\n}\n\n/**\n * Returns the nearest ancestor Route error, which could be a loader/action\n * error or a render error.  This is intended to be called from your\n * ErrorBoundary/errorElement to display a proper error message.\n */\nexport function useRouteError(): unknown {\n  let error = React.useContext(RouteErrorContext);\n  let state = useDataRouterState(DataRouterStateHook.UseRouteError);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseRouteError);\n\n  // If this was a render error, we put it in a RouteError context inside\n  // of RenderErrorBoundary\n  if (error !== undefined) {\n    return error;\n  }\n\n  // Otherwise look for errors from our data router state\n  return state.errors?.[routeId];\n}\n\n/**\n * Returns the happy-path data from the nearest ancestor `<Await />` value\n */\nexport function useAsyncValue(): unknown {\n  let value = React.useContext(AwaitContext);\n  return value?._data;\n}\n\n/**\n * Returns the error from the nearest ancestor `<Await />` value\n */\nexport function useAsyncError(): unknown {\n  let value = React.useContext(AwaitContext);\n  return value?._error;\n}\n\nlet blockerId = 0;\n\n/**\n * Allow the application to block navigations within the SPA and present the\n * user a confirmation dialog to confirm the navigation.  Mostly used to avoid\n * using half-filled form data.  This does not handle hard-reloads or\n * cross-origin navigations.\n */\nexport function useBlocker(shouldBlock: boolean | BlockerFunction): Blocker {\n  let { router, basename } = useDataRouterContext(DataRouterHook.UseBlocker);\n  let state = useDataRouterState(DataRouterStateHook.UseBlocker);\n\n  let [blockerKey, setBlockerKey] = React.useState(\"\");\n  let blockerFunction = React.useCallback<BlockerFunction>(\n    (arg) => {\n      if (typeof shouldBlock !== \"function\") {\n        return !!shouldBlock;\n      }\n      if (basename === \"/\") {\n        return shouldBlock(arg);\n      }\n\n      // If they provided us a function and we've got an active basename, strip\n      // it from the locations we expose to the user to match the behavior of\n      // useLocation\n      let { currentLocation, nextLocation, historyAction } = arg;\n      return shouldBlock({\n        currentLocation: {\n          ...currentLocation,\n          pathname:\n            stripBasename(currentLocation.pathname, basename) ||\n            currentLocation.pathname,\n        },\n        nextLocation: {\n          ...nextLocation,\n          pathname:\n            stripBasename(nextLocation.pathname, basename) ||\n            nextLocation.pathname,\n        },\n        historyAction,\n      });\n    },\n    [basename, shouldBlock]\n  );\n\n  // This effect is in charge of blocker key assignment and deletion (which is\n  // tightly coupled to the key)\n  React.useEffect(() => {\n    let key = String(++blockerId);\n    setBlockerKey(key);\n    return () => router.deleteBlocker(key);\n  }, [router]);\n\n  // This effect handles assigning the blockerFunction.  This is to handle\n  // unstable blocker function identities, and happens only after the prior\n  // effect so we don't get an orphaned blockerFunction in the router with a\n  // key of \"\".  Until then we just have the IDLE_BLOCKER.\n  React.useEffect(() => {\n    if (blockerKey !== \"\") {\n      router.getBlocker(blockerKey, blockerFunction);\n    }\n  }, [router, blockerKey, blockerFunction]);\n\n  // Prefer the blocker from `state` not `router.state` since DataRouterContext\n  // is memoized so this ensures we update on blocker state updates\n  return blockerKey && state.blockers.has(blockerKey)\n    ? state.blockers.get(blockerKey)!\n    : IDLE_BLOCKER;\n}\n\n/**\n * Stable version of useNavigate that is used when we are in the context of\n * a RouterProvider.\n */\nfunction useNavigateStable(): NavigateFunction {\n  let { router } = useDataRouterContext(DataRouterHook.UseNavigateStable);\n  let id = useCurrentRouteId(DataRouterStateHook.UseNavigateStable);\n\n  let activeRef = React.useRef(false);\n  useIsomorphicLayoutEffect(() => {\n    activeRef.current = true;\n  });\n\n  let navigate: NavigateFunction = React.useCallback(\n    (to: To | number, options: NavigateOptions = {}) => {\n      warning(activeRef.current, navigateEffectWarning);\n\n      // Short circuit here since if this happens on first render the navigate\n      // is useless because we haven't wired up our router subscriber yet\n      if (!activeRef.current) return;\n\n      if (typeof to === \"number\") {\n        router.navigate(to);\n      } else {\n        router.navigate(to, { fromRouteId: id, ...options });\n      }\n    },\n    [router, id]\n  );\n\n  return navigate;\n}\n\nconst alreadyWarned: Record<string, boolean> = {};\n\nfunction warningOnce(key: string, cond: boolean, message: string) {\n  if (!cond && !alreadyWarned[key]) {\n    alreadyWarned[key] = true;\n    warning(false, message);\n  }\n}\n","import type {\n  InitialEntry,\n  LazyRouteFunction,\n  Location,\n  MemoryHistory,\n  RelativeRoutingType,\n  Router as RemixRouter,\n  RouterState,\n  RouterSubscriber,\n  To,\n  TrackedPromise,\n} from \"@remix-run/router\";\nimport {\n  AbortedDeferredError,\n  Action as NavigationType,\n  createMemoryHistory,\n  UNSAFE_getResolveToMatches as getResolveToMatches,\n  UNSAFE_invariant as invariant,\n  parsePath,\n  resolveTo,\n  stripBasename,\n  UNSAFE_warning as warning,\n} from \"@remix-run/router\";\nimport * as React from \"react\";\n\nimport type {\n  DataRouteObject,\n  IndexRouteObject,\n  Navigator,\n  NonIndexRouteObject,\n  RouteMatch,\n  RouteObject,\n} from \"./context\";\nimport {\n  AwaitContext,\n  DataRouterContext,\n  DataRouterStateContext,\n  LocationContext,\n  NavigationContext,\n  RouteContext,\n} from \"./context\";\nimport {\n  _renderMatches,\n  useAsyncValue,\n  useInRouterContext,\n  useLocation,\n  useNavigate,\n  useOutlet,\n  useRoutes,\n  useRoutesImpl,\n} from \"./hooks\";\n\nexport interface FutureConfig {\n  v7_relativeSplatPath: boolean;\n  v7_startTransition: boolean;\n}\n\nexport interface RouterProviderProps {\n  fallbackElement?: React.ReactNode;\n  router: RemixRouter;\n  // Only accept future flags relevant to rendering behavior\n  // routing flags should be accessed via router.future\n  future?: Partial<Pick<FutureConfig, \"v7_startTransition\">>;\n}\n\n/**\n  Webpack + React 17 fails to compile on any of the following because webpack\n  complains that `startTransition` doesn't exist in `React`:\n  * import { startTransition } from \"react\"\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React.startTransition(() => setState()) : setState()\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React[\"startTransition\"](() => setState()) : setState()\n\n  Moving it to a constant such as the following solves the Webpack/React 17 issue:\n  * import * as React from from \"react\";\n    const START_TRANSITION = \"startTransition\";\n    START_TRANSITION in React ? React[START_TRANSITION](() => setState()) : setState()\n\n  However, that introduces webpack/terser minification issues in production builds\n  in React 18 where minification/obfuscation ends up removing the call of\n  React.startTransition entirely from the first half of the ternary.  Grabbing\n  this exported reference once up front resolves that issue.\n\n  See https://github.com/remix-run/react-router/issues/10579\n*/\nconst START_TRANSITION = \"startTransition\";\nconst startTransitionImpl = React[START_TRANSITION];\n\n/**\n * Given a Remix Router instance, render the appropriate UI\n */\nexport function RouterProvider({\n  fallbackElement,\n  router,\n  future,\n}: RouterProviderProps): React.ReactElement {\n  let [state, setStateImpl] = React.useState(router.state);\n  let { v7_startTransition } = future || {};\n\n  let setState = React.useCallback<RouterSubscriber>(\n    (newState: RouterState) => {\n      if (v7_startTransition && startTransitionImpl) {\n        startTransitionImpl(() => setStateImpl(newState));\n      } else {\n        setStateImpl(newState);\n      }\n    },\n    [setStateImpl, v7_startTransition]\n  );\n\n  // Need to use a layout effect here so we are subscribed early enough to\n  // pick up on any render-driven redirects/navigations (useEffect/<Navigate>)\n  React.useLayoutEffect(() => router.subscribe(setState), [router, setState]);\n\n  React.useEffect(() => {\n    warning(\n      fallbackElement == null || !router.future.v7_partialHydration,\n      \"`<RouterProvider fallbackElement>` is deprecated when using \" +\n        \"`v7_partialHydration`, use a `HydrateFallback` component instead\"\n    );\n    // Only log this once on initial mount\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  let navigator = React.useMemo((): Navigator => {\n    return {\n      createHref: router.createHref,\n      encodeLocation: router.encodeLocation,\n      go: (n) => router.navigate(n),\n      push: (to, state, opts) =>\n        router.navigate(to, {\n          state,\n          preventScrollReset: opts?.preventScrollReset,\n        }),\n      replace: (to, state, opts) =>\n        router.navigate(to, {\n          replace: true,\n          state,\n          preventScrollReset: opts?.preventScrollReset,\n        }),\n    };\n  }, [router]);\n\n  let basename = router.basename || \"/\";\n\n  let dataRouterContext = React.useMemo(\n    () => ({\n      router,\n      navigator,\n      static: false,\n      basename,\n    }),\n    [router, navigator, basename]\n  );\n\n  // The fragment and {null} here are important!  We need them to keep React 18's\n  // useId happy when we are server-rendering since we may have a <script> here\n  // containing the hydrated server-side staticContext (from StaticRouterProvider).\n  // useId relies on the component tree structure to generate deterministic id's\n  // so we need to ensure it remains the same on the client even though\n  // we don't need the <script> tag\n  return (\n    <>\n      <DataRouterContext.Provider value={dataRouterContext}>\n        <DataRouterStateContext.Provider value={state}>\n          <Router\n            basename={basename}\n            location={state.location}\n            navigationType={state.historyAction}\n            navigator={navigator}\n            future={{\n              v7_relativeSplatPath: router.future.v7_relativeSplatPath,\n            }}\n          >\n            {state.initialized || router.future.v7_partialHydration ? (\n              <DataRoutes\n                routes={router.routes}\n                future={router.future}\n                state={state}\n              />\n            ) : (\n              fallbackElement\n            )}\n          </Router>\n        </DataRouterStateContext.Provider>\n      </DataRouterContext.Provider>\n      {null}\n    </>\n  );\n}\n\nfunction DataRoutes({\n  routes,\n  future,\n  state,\n}: {\n  routes: DataRouteObject[];\n  future: RemixRouter[\"future\"];\n  state: RouterState;\n}): React.ReactElement | null {\n  return useRoutesImpl(routes, undefined, state, future);\n}\n\nexport interface MemoryRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  future?: Partial<FutureConfig>;\n}\n\n/**\n * A `<Router>` that stores all entries in memory.\n *\n * @see https://reactrouter.com/router-components/memory-router\n */\nexport function MemoryRouter({\n  basename,\n  children,\n  initialEntries,\n  initialIndex,\n  future,\n}: MemoryRouterProps): React.ReactElement {\n  let historyRef = React.useRef<MemoryHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createMemoryHistory({\n      initialEntries,\n      initialIndex,\n      v5Compat: true,\n    });\n  }\n\n  let history = historyRef.current;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n  let { v7_startTransition } = future || {};\n  let setState = React.useCallback(\n    (newState: { action: NavigationType; location: Location }) => {\n      v7_startTransition && startTransitionImpl\n        ? startTransitionImpl(() => setStateImpl(newState))\n        : setStateImpl(newState);\n    },\n    [setStateImpl, v7_startTransition]\n  );\n\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n      future={future}\n    />\n  );\n}\n\nexport interface NavigateProps {\n  to: To;\n  replace?: boolean;\n  state?: any;\n  relative?: RelativeRoutingType;\n}\n\n/**\n * Changes the current location.\n *\n * Note: This API is mostly useful in React.Component subclasses that are not\n * able to use hooks. In functional components, we recommend you use the\n * `useNavigate` hook instead.\n *\n * @see https://reactrouter.com/components/navigate\n */\nexport function Navigate({\n  to,\n  replace,\n  state,\n  relative,\n}: NavigateProps): null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of\n    // the router loaded. We can help them understand how to avoid that.\n    `<Navigate> may be used only in the context of a <Router> component.`\n  );\n\n  let { future, static: isStatic } = React.useContext(NavigationContext);\n\n  warning(\n    !isStatic,\n    `<Navigate> must not be used on the initial render in a <StaticRouter>. ` +\n      `This is a no-op, but you should modify your code so the <Navigate> is ` +\n      `only ever rendered in response to some user interaction or state change.`\n  );\n\n  let { matches } = React.useContext(RouteContext);\n  let { pathname: locationPathname } = useLocation();\n  let navigate = useNavigate();\n\n  // Resolve the path outside of the effect so that when effects run twice in\n  // StrictMode they navigate to the same place\n  let path = resolveTo(\n    to,\n    getResolveToMatches(matches, future.v7_relativeSplatPath),\n    locationPathname,\n    relative === \"path\"\n  );\n  let jsonPath = JSON.stringify(path);\n\n  React.useEffect(\n    () => navigate(JSON.parse(jsonPath), { replace, state, relative }),\n    [navigate, jsonPath, relative, replace, state]\n  );\n\n  return null;\n}\n\nexport interface OutletProps {\n  context?: unknown;\n}\n\n/**\n * Renders the child route's element, if there is one.\n *\n * @see https://reactrouter.com/components/outlet\n */\nexport function Outlet(props: OutletProps): React.ReactElement | null {\n  return useOutlet(props.context);\n}\n\nexport interface PathRouteProps {\n  caseSensitive?: NonIndexRouteObject[\"caseSensitive\"];\n  path?: NonIndexRouteObject[\"path\"];\n  id?: NonIndexRouteObject[\"id\"];\n  lazy?: LazyRouteFunction<NonIndexRouteObject>;\n  loader?: NonIndexRouteObject[\"loader\"];\n  action?: NonIndexRouteObject[\"action\"];\n  hasErrorBoundary?: NonIndexRouteObject[\"hasErrorBoundary\"];\n  shouldRevalidate?: NonIndexRouteObject[\"shouldRevalidate\"];\n  handle?: NonIndexRouteObject[\"handle\"];\n  index?: false;\n  children?: React.ReactNode;\n  element?: React.ReactNode | null;\n  hydrateFallbackElement?: React.ReactNode | null;\n  errorElement?: React.ReactNode | null;\n  Component?: React.ComponentType | null;\n  HydrateFallback?: React.ComponentType | null;\n  ErrorBoundary?: React.ComponentType | null;\n}\n\nexport interface LayoutRouteProps extends PathRouteProps {}\n\nexport interface IndexRouteProps {\n  caseSensitive?: IndexRouteObject[\"caseSensitive\"];\n  path?: IndexRouteObject[\"path\"];\n  id?: IndexRouteObject[\"id\"];\n  lazy?: LazyRouteFunction<IndexRouteObject>;\n  loader?: IndexRouteObject[\"loader\"];\n  action?: IndexRouteObject[\"action\"];\n  hasErrorBoundary?: IndexRouteObject[\"hasErrorBoundary\"];\n  shouldRevalidate?: IndexRouteObject[\"shouldRevalidate\"];\n  handle?: IndexRouteObject[\"handle\"];\n  index: true;\n  children?: undefined;\n  element?: React.ReactNode | null;\n  hydrateFallbackElement?: React.ReactNode | null;\n  errorElement?: React.ReactNode | null;\n  Component?: React.ComponentType | null;\n  HydrateFallback?: React.ComponentType | null;\n  ErrorBoundary?: React.ComponentType | null;\n}\n\nexport type RouteProps = PathRouteProps | LayoutRouteProps | IndexRouteProps;\n\n/**\n * Declares an element that should be rendered at a certain URL path.\n *\n * @see https://reactrouter.com/components/route\n */\nexport function Route(_props: RouteProps): React.ReactElement | null {\n  invariant(\n    false,\n    `A <Route> is only ever to be used as the child of <Routes> element, ` +\n      `never rendered directly. Please wrap your <Route> in a <Routes>.`\n  );\n}\n\nexport interface RouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  location: Partial<Location> | string;\n  navigationType?: NavigationType;\n  navigator: Navigator;\n  static?: boolean;\n  future?: Partial<Pick<FutureConfig, \"v7_relativeSplatPath\">>;\n}\n\n/**\n * Provides location context for the rest of the app.\n *\n * Note: You usually won't render a `<Router>` directly. Instead, you'll render a\n * router that is more specific to your environment such as a `<BrowserRouter>`\n * in web browsers or a `<StaticRouter>` for server rendering.\n *\n * @see https://reactrouter.com/router-components/router\n */\nexport function Router({\n  basename: basenameProp = \"/\",\n  children = null,\n  location: locationProp,\n  navigationType = NavigationType.Pop,\n  navigator,\n  static: staticProp = false,\n  future,\n}: RouterProps): React.ReactElement | null {\n  invariant(\n    !useInRouterContext(),\n    `You cannot render a <Router> inside another <Router>.` +\n      ` You should never have more than one in your app.`\n  );\n\n  // Preserve trailing slashes on basename, so we can let the user control\n  // the enforcement of trailing slashes throughout the app\n  let basename = basenameProp.replace(/^\\/*/, \"/\");\n  let navigationContext = React.useMemo(\n    () => ({\n      basename,\n      navigator,\n      static: staticProp,\n      future: {\n        v7_relativeSplatPath: false,\n        ...future,\n      },\n    }),\n    [basename, future, navigator, staticProp]\n  );\n\n  if (typeof locationProp === \"string\") {\n    locationProp = parsePath(locationProp);\n  }\n\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\",\n    state = null,\n    key = \"default\",\n  } = locationProp;\n\n  let locationContext = React.useMemo(() => {\n    let trailingPathname = stripBasename(pathname, basename);\n\n    if (trailingPathname == null) {\n      return null;\n    }\n\n    return {\n      location: {\n        pathname: trailingPathname,\n        search,\n        hash,\n        state,\n        key,\n      },\n      navigationType,\n    };\n  }, [basename, pathname, search, hash, state, key, navigationType]);\n\n  warning(\n    locationContext != null,\n    `<Router basename=\"${basename}\"> is not able to match the URL ` +\n      `\"${pathname}${search}${hash}\" because it does not start with the ` +\n      `basename, so the <Router> won't render anything.`\n  );\n\n  if (locationContext == null) {\n    return null;\n  }\n\n  return (\n    <NavigationContext.Provider value={navigationContext}>\n      <LocationContext.Provider children={children} value={locationContext} />\n    </NavigationContext.Provider>\n  );\n}\n\nexport interface RoutesProps {\n  children?: React.ReactNode;\n  location?: Partial<Location> | string;\n}\n\n/**\n * A container for a nested tree of `<Route>` elements that renders the branch\n * that best matches the current location.\n *\n * @see https://reactrouter.com/components/routes\n */\nexport function Routes({\n  children,\n  location,\n}: RoutesProps): React.ReactElement | null {\n  return useRoutes(createRoutesFromChildren(children), location);\n}\n\nexport interface AwaitResolveRenderFunction {\n  (data: Awaited<any>): React.ReactNode;\n}\n\nexport interface AwaitProps {\n  children: React.ReactNode | AwaitResolveRenderFunction;\n  errorElement?: React.ReactNode;\n  resolve: TrackedPromise | any;\n}\n\n/**\n * Component to use for rendering lazily loaded data from returning defer()\n * in a loader function\n */\nexport function Await({ children, errorElement, resolve }: AwaitProps) {\n  return (\n    <AwaitErrorBoundary resolve={resolve} errorElement={errorElement}>\n      <ResolveAwait>{children}</ResolveAwait>\n    </AwaitErrorBoundary>\n  );\n}\n\ntype AwaitErrorBoundaryProps = React.PropsWithChildren<{\n  errorElement?: React.ReactNode;\n  resolve: TrackedPromise | any;\n}>;\n\ntype AwaitErrorBoundaryState = {\n  error: any;\n};\n\nenum AwaitRenderStatus {\n  pending,\n  success,\n  error,\n}\n\nconst neverSettledPromise = new Promise(() => {});\n\nclass AwaitErrorBoundary extends React.Component<\n  AwaitErrorBoundaryProps,\n  AwaitErrorBoundaryState\n> {\n  constructor(props: AwaitErrorBoundaryProps) {\n    super(props);\n    this.state = { error: null };\n  }\n\n  static getDerivedStateFromError(error: any) {\n    return { error };\n  }\n\n  componentDidCatch(error: any, errorInfo: any) {\n    console.error(\n      \"<Await> caught the following error during render\",\n      error,\n      errorInfo\n    );\n  }\n\n  render() {\n    let { children, errorElement, resolve } = this.props;\n\n    let promise: TrackedPromise | null = null;\n    let status: AwaitRenderStatus = AwaitRenderStatus.pending;\n\n    if (!(resolve instanceof Promise)) {\n      // Didn't get a promise - provide as a resolved promise\n      status = AwaitRenderStatus.success;\n      promise = Promise.resolve();\n      Object.defineProperty(promise, \"_tracked\", { get: () => true });\n      Object.defineProperty(promise, \"_data\", { get: () => resolve });\n    } else if (this.state.error) {\n      // Caught a render error, provide it as a rejected promise\n      status = AwaitRenderStatus.error;\n      let renderError = this.state.error;\n      promise = Promise.reject().catch(() => {}); // Avoid unhandled rejection warnings\n      Object.defineProperty(promise, \"_tracked\", { get: () => true });\n      Object.defineProperty(promise, \"_error\", { get: () => renderError });\n    } else if ((resolve as TrackedPromise)._tracked) {\n      // Already tracked promise - check contents\n      promise = resolve;\n      status =\n        promise._error !== undefined\n          ? AwaitRenderStatus.error\n          : promise._data !== undefined\n          ? AwaitRenderStatus.success\n          : AwaitRenderStatus.pending;\n    } else {\n      // Raw (untracked) promise - track it\n      status = AwaitRenderStatus.pending;\n      Object.defineProperty(resolve, \"_tracked\", { get: () => true });\n      promise = resolve.then(\n        (data: any) =>\n          Object.defineProperty(resolve, \"_data\", { get: () => data }),\n        (error: any) =>\n          Object.defineProperty(resolve, \"_error\", { get: () => error })\n      );\n    }\n\n    if (\n      status === AwaitRenderStatus.error &&\n      promise._error instanceof AbortedDeferredError\n    ) {\n      // Freeze the UI by throwing a never resolved promise\n      throw neverSettledPromise;\n    }\n\n    if (status === AwaitRenderStatus.error && !errorElement) {\n      // No errorElement, throw to the nearest route-level error boundary\n      throw promise._error;\n    }\n\n    if (status === AwaitRenderStatus.error) {\n      // Render via our errorElement\n      return <AwaitContext.Provider value={promise} children={errorElement} />;\n    }\n\n    if (status === AwaitRenderStatus.success) {\n      // Render children with resolved value\n      return <AwaitContext.Provider value={promise} children={children} />;\n    }\n\n    // Throw to the suspense boundary\n    throw promise;\n  }\n}\n\n/**\n * @private\n * Indirection to leverage useAsyncValue for a render-prop API on `<Await>`\n */\nfunction ResolveAwait({\n  children,\n}: {\n  children: React.ReactNode | AwaitResolveRenderFunction;\n}) {\n  let data = useAsyncValue();\n  let toRender = typeof children === \"function\" ? children(data) : children;\n  return <>{toRender}</>;\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// UTILS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Creates a route config from a React \"children\" object, which is usually\n * either a `<Route>` element or an array of them. Used internally by\n * `<Routes>` to create a route config from its children.\n *\n * @see https://reactrouter.com/utils/create-routes-from-children\n */\nexport function createRoutesFromChildren(\n  children: React.ReactNode,\n  parentPath: number[] = []\n): RouteObject[] {\n  let routes: RouteObject[] = [];\n\n  React.Children.forEach(children, (element, index) => {\n    if (!React.isValidElement(element)) {\n      // Ignore non-elements. This allows people to more easily inline\n      // conditionals in their route config.\n      return;\n    }\n\n    let treePath = [...parentPath, index];\n\n    if (element.type === React.Fragment) {\n      // Transparently support React.Fragment and its children.\n      routes.push.apply(\n        routes,\n        createRoutesFromChildren(element.props.children, treePath)\n      );\n      return;\n    }\n\n    invariant(\n      element.type === Route,\n      `[${\n        typeof element.type === \"string\" ? element.type : element.type.name\n      }] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>`\n    );\n\n    invariant(\n      !element.props.index || !element.props.children,\n      \"An index route cannot have child routes.\"\n    );\n\n    let route: RouteObject = {\n      id: element.props.id || treePath.join(\"-\"),\n      caseSensitive: element.props.caseSensitive,\n      element: element.props.element,\n      Component: element.props.Component,\n      index: element.props.index,\n      path: element.props.path,\n      loader: element.props.loader,\n      action: element.props.action,\n      errorElement: element.props.errorElement,\n      ErrorBoundary: element.props.ErrorBoundary,\n      hasErrorBoundary:\n        element.props.ErrorBoundary != null ||\n        element.props.errorElement != null,\n      shouldRevalidate: element.props.shouldRevalidate,\n      handle: element.props.handle,\n      lazy: element.props.lazy,\n    };\n\n    if (element.props.children) {\n      route.children = createRoutesFromChildren(\n        element.props.children,\n        treePath\n      );\n    }\n\n    routes.push(route);\n  });\n\n  return routes;\n}\n\n/**\n * Renders the result of `matchRoutes()` into a React element.\n */\nexport function renderMatches(\n  matches: RouteMatch[] | null\n): React.ReactElement | null {\n  return _renderMatches(matches);\n}\n","import React, { useState } from \"react\";\nimport OccupationStep from \"./steps/OccupationStep\";\nimport InterestStep from \"./steps/InterestStep\";\nimport HaltStep from \"./steps/HaltStep3\";\nimport MathLevelStep from \"./steps/MathLevelStep\";\nimport FinalStep from \"./steps/FinalStep\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst DemoComponent = () => {\n  const navigate = useNavigate();\n\n  const [currentStep, setCurrentStep] = useState(1);\n\n  // Input values\n  const [occupation, setOccupation] = useState(\"\");\n  const [interest, setInterest] = useState(\"\");\n  const [level, setLevel] = useState(\"\");\n\n  const handleNext = (e) => {\n    e.preventDefault();\n    if (currentStep !== 5) {\n      setCurrentStep(currentStep + 1);\n    } else {\n      const formData = new FormData();\n      formData.append(\"occupation\", occupation);\n      formData.append(\"interest\", interest);\n      formData.append(\"mathLevel\", level);\n      let data = Object.fromEntries(formData);\n      console.log(data);\n\n      navigate(\"/learning-path\");\n    }\n  };\n  const handlePrev = (e) => {\n    e.preventDefault();\n    if (currentStep !== 1) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  return (\n    <div className=\"h-screen my-10 px-2 md:px-24 \">\n      <div className=\"flex items-center relative\">\n        {currentStep > 1 && (\n          <div\n            onClick={handlePrev}\n            className=\"cursor-pointer font-light text-4xl absolute left 2 md:left-10\"\n          >\n            &#60;\n          </div>\n        )}\n        <ol className=\"ml-6 md:ml-16 flex items-center w-full \">\n          {[1, 2, 3, 4, 5].map((step) => (\n            <li\n              key={step}\n              className={`flex-1 flex items-center justify-center ${\n                currentStep >= step\n                  ? \"text-blue-600 dark:text-blue-500\"\n                  : \"text-gray-400 dark:text-gray-600\"\n              }`}\n              style={{\n                position: \"relative\",\n              }}\n            >\n              <div\n                className={`absolute top-1/2 transform -translate-y-1/2 w-full h-1 ${\n                  currentStep >= step\n                    ? \"bg-blue-600\"\n                    : \"bg-gray-300 dark:bg-gray-700\"\n                }`}\n                style={{\n                  zIndex: -1,\n                  width: `100%`,\n                }}\n              />\n            </li>\n          ))}\n        </ol>\n      </div>\n      <form onSubmit={handleNext}>\n        <div className=\"flex flex-col justify-center items-center  py-10\">\n          {currentStep === 1 && (\n            <>\n              <OccupationStep\n                occupation={occupation}\n                setOccupation={setOccupation}\n              />\n              <button\n                disabled={!occupation}\n                type=\"submit\"\n                className=\"mt-4 text-white w-24 self-center bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800 disabled:bg-blue-400\"\n              >\n                Continue\n              </button>\n            </>\n          )}\n\n          {currentStep === 2 && (\n            <>\n              <InterestStep interest={interest} setInterest={setInterest} />\n\n              <button\n                disabled={!interest}\n                type=\"submit\"\n                className=\"mt-4 text-white w-24 self-center bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800 disabled:bg-blue-400\"\n              >\n                Continue\n              </button>\n            </>\n          )}\n          {currentStep === 3 && (\n            <>\n              {\" \"}\n              <HaltStep />\n              <button\n                type=\"submit\"\n                className=\"mt-4 text-white w-24 self-center bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800 disabled:bg-blue-400\"\n              >\n                Continue\n              </button>\n            </>\n          )}\n          {currentStep === 4 && (\n            <>\n              <MathLevelStep level={level} setLevel={setLevel} />\n              <button\n                disabled={!level}\n                type=\"submit\"\n                className=\"mt-4 text-white w-24 self-center bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800 disabled:bg-blue-400\"\n              >\n                Continue\n              </button>\n            </>\n          )}\n          {currentStep === 5 && (\n            <>\n              <FinalStep />\n              <button\n                type=\"submit\"\n                className=\"mt-4 text-white w-24 self-center bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800 disabled:bg-blue-400\"\n              >\n                Continue\n              </button>\n            </>\n          )}\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default DemoComponent;\n","import type {\n  FormEncType,\n  HTMLFormMethod,\n  RelativeRoutingType,\n} from \"@remix-run/router\";\nimport { stripBasename, UNSAFE_warning as warning } from \"@remix-run/router\";\n\nexport const defaultMethod: HTMLFormMethod = \"get\";\nconst defaultEncType: FormEncType = \"application/x-www-form-urlencoded\";\n\nexport function isHtmlElement(object: any): object is HTMLElement {\n  return object != null && typeof object.tagName === \"string\";\n}\n\nexport function isButtonElement(object: any): object is HTMLButtonElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"button\";\n}\n\nexport function isFormElement(object: any): object is HTMLFormElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"form\";\n}\n\nexport function isInputElement(object: any): object is HTMLInputElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"input\";\n}\n\ntype LimitedMouseEvent = Pick<\n  MouseEvent,\n  \"button\" | \"metaKey\" | \"altKey\" | \"ctrlKey\" | \"shiftKey\"\n>;\n\nfunction isModifiedEvent(event: LimitedMouseEvent) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\n\nexport function shouldProcessLinkClick(\n  event: LimitedMouseEvent,\n  target?: string\n) {\n  return (\n    event.button === 0 && // Ignore everything but left clicks\n    (!target || target === \"_self\") && // Let browser handle \"target=_blank\" etc.\n    !isModifiedEvent(event) // Ignore clicks with modifier keys\n  );\n}\n\nexport type ParamKeyValuePair = [string, string];\n\nexport type URLSearchParamsInit =\n  | string\n  | ParamKeyValuePair[]\n  | Record<string, string | string[]>\n  | URLSearchParams;\n\n/**\n * Creates a URLSearchParams object using the given initializer.\n *\n * This is identical to `new URLSearchParams(init)` except it also\n * supports arrays as values in the object form of the initializer\n * instead of just strings. This is convenient when you need multiple\n * values for a given key, but don't want to use an array initializer.\n *\n * For example, instead of:\n *\n *   let searchParams = new URLSearchParams([\n *     ['sort', 'name'],\n *     ['sort', 'price']\n *   ]);\n *\n * you can do:\n *\n *   let searchParams = createSearchParams({\n *     sort: ['name', 'price']\n *   });\n */\nexport function createSearchParams(\n  init: URLSearchParamsInit = \"\"\n): URLSearchParams {\n  return new URLSearchParams(\n    typeof init === \"string\" ||\n    Array.isArray(init) ||\n    init instanceof URLSearchParams\n      ? init\n      : Object.keys(init).reduce((memo, key) => {\n          let value = init[key];\n          return memo.concat(\n            Array.isArray(value) ? value.map((v) => [key, v]) : [[key, value]]\n          );\n        }, [] as ParamKeyValuePair[])\n  );\n}\n\nexport function getSearchParamsForLocation(\n  locationSearch: string,\n  defaultSearchParams: URLSearchParams | null\n) {\n  let searchParams = createSearchParams(locationSearch);\n\n  if (defaultSearchParams) {\n    // Use `defaultSearchParams.forEach(...)` here instead of iterating of\n    // `defaultSearchParams.keys()` to work-around a bug in Firefox related to\n    // web extensions. Relevant Bugzilla tickets:\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1414602\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1023984\n    defaultSearchParams.forEach((_, key) => {\n      if (!searchParams.has(key)) {\n        defaultSearchParams.getAll(key).forEach((value) => {\n          searchParams.append(key, value);\n        });\n      }\n    });\n  }\n\n  return searchParams;\n}\n\n// Thanks https://github.com/sindresorhus/type-fest!\ntype JsonObject = { [Key in string]: JsonValue } & {\n  [Key in string]?: JsonValue | undefined;\n};\ntype JsonArray = JsonValue[] | readonly JsonValue[];\ntype JsonPrimitive = string | number | boolean | null;\ntype JsonValue = JsonPrimitive | JsonObject | JsonArray;\n\nexport type SubmitTarget =\n  | HTMLFormElement\n  | HTMLButtonElement\n  | HTMLInputElement\n  | FormData\n  | URLSearchParams\n  | JsonValue\n  | null;\n\n// One-time check for submitter support\nlet _formDataSupportsSubmitter: boolean | null = null;\n\nfunction isFormDataSubmitterSupported() {\n  if (_formDataSupportsSubmitter === null) {\n    try {\n      new FormData(\n        document.createElement(\"form\"),\n        // @ts-expect-error if FormData supports the submitter parameter, this will throw\n        0\n      );\n      _formDataSupportsSubmitter = false;\n    } catch (e) {\n      _formDataSupportsSubmitter = true;\n    }\n  }\n  return _formDataSupportsSubmitter;\n}\n\nexport interface SubmitOptions {\n  /**\n   * The HTTP method used to submit the form. Overrides `<form method>`.\n   * Defaults to \"GET\".\n   */\n  method?: HTMLFormMethod;\n\n  /**\n   * The action URL path used to submit the form. Overrides `<form action>`.\n   * Defaults to the path of the current route.\n   */\n  action?: string;\n\n  /**\n   * The encoding used to submit the form. Overrides `<form encType>`.\n   * Defaults to \"application/x-www-form-urlencoded\".\n   */\n  encType?: FormEncType;\n\n  /**\n   * Indicate a specific fetcherKey to use when using navigate=false\n   */\n  fetcherKey?: string;\n\n  /**\n   * navigate=false will use a fetcher instead of a navigation\n   */\n  navigate?: boolean;\n\n  /**\n   * Set `true` to replace the current entry in the browser's history stack\n   * instead of creating a new one (i.e. stay on \"the same page\"). Defaults\n   * to `false`.\n   */\n  replace?: boolean;\n\n  /**\n   * State object to add to the history stack entry for this navigation\n   */\n  state?: any;\n\n  /**\n   * Determines whether the form action is relative to the route hierarchy or\n   * the pathname.  Use this if you want to opt out of navigating the route\n   * hierarchy and want to instead route based on /-delimited URL segments\n   */\n  relative?: RelativeRoutingType;\n\n  /**\n   * In browser-based environments, prevent resetting scroll after this\n   * navigation when using the <ScrollRestoration> component\n   */\n  preventScrollReset?: boolean;\n\n  /**\n   * Enable flushSync for this navigation's state updates\n   */\n  unstable_flushSync?: boolean;\n\n  /**\n   * Enable view transitions on this submission navigation\n   */\n  unstable_viewTransition?: boolean;\n}\n\nconst supportedFormEncTypes: Set<FormEncType> = new Set([\n  \"application/x-www-form-urlencoded\",\n  \"multipart/form-data\",\n  \"text/plain\",\n]);\n\nfunction getFormEncType(encType: string | null) {\n  if (encType != null && !supportedFormEncTypes.has(encType as FormEncType)) {\n    warning(\n      false,\n      `\"${encType}\" is not a valid \\`encType\\` for \\`<Form>\\`/\\`<fetcher.Form>\\` ` +\n        `and will default to \"${defaultEncType}\"`\n    );\n\n    return null;\n  }\n  return encType;\n}\n\nexport function getFormSubmissionInfo(\n  target: SubmitTarget,\n  basename: string\n): {\n  action: string | null;\n  method: string;\n  encType: string;\n  formData: FormData | undefined;\n  body: any;\n} {\n  let method: string;\n  let action: string | null;\n  let encType: string;\n  let formData: FormData | undefined;\n  let body: any;\n\n  if (isFormElement(target)) {\n    // When grabbing the action from the element, it will have had the basename\n    // prefixed to ensure non-JS scenarios work, so strip it since we'll\n    // re-prefix in the router\n    let attr = target.getAttribute(\"action\");\n    action = attr ? stripBasename(attr, basename) : null;\n    method = target.getAttribute(\"method\") || defaultMethod;\n    encType = getFormEncType(target.getAttribute(\"enctype\")) || defaultEncType;\n\n    formData = new FormData(target);\n  } else if (\n    isButtonElement(target) ||\n    (isInputElement(target) &&\n      (target.type === \"submit\" || target.type === \"image\"))\n  ) {\n    let form = target.form;\n\n    if (form == null) {\n      throw new Error(\n        `Cannot submit a <button> or <input type=\"submit\"> without a <form>`\n      );\n    }\n\n    // <button>/<input type=\"submit\"> may override attributes of <form>\n\n    // When grabbing the action from the element, it will have had the basename\n    // prefixed to ensure non-JS scenarios work, so strip it since we'll\n    // re-prefix in the router\n    let attr = target.getAttribute(\"formaction\") || form.getAttribute(\"action\");\n    action = attr ? stripBasename(attr, basename) : null;\n\n    method =\n      target.getAttribute(\"formmethod\") ||\n      form.getAttribute(\"method\") ||\n      defaultMethod;\n    encType =\n      getFormEncType(target.getAttribute(\"formenctype\")) ||\n      getFormEncType(form.getAttribute(\"enctype\")) ||\n      defaultEncType;\n\n    // Build a FormData object populated from a form and submitter\n    formData = new FormData(form, target);\n\n    // If this browser doesn't support the `FormData(el, submitter)` format,\n    // then tack on the submitter value at the end.  This is a lightweight\n    // solution that is not 100% spec compliant.  For complete support in older\n    // browsers, consider using the `formdata-submitter-polyfill` package\n    if (!isFormDataSubmitterSupported()) {\n      let { name, type, value } = target;\n      if (type === \"image\") {\n        let prefix = name ? `${name}.` : \"\";\n        formData.append(`${prefix}x`, \"0\");\n        formData.append(`${prefix}y`, \"0\");\n      } else if (name) {\n        formData.append(name, value);\n      }\n    }\n  } else if (isHtmlElement(target)) {\n    throw new Error(\n      `Cannot submit element that is not <form>, <button>, or ` +\n        `<input type=\"submit|image\">`\n    );\n  } else {\n    method = defaultMethod;\n    action = null;\n    encType = defaultEncType;\n    body = target;\n  }\n\n  // Send body for <Form encType=\"text/plain\" so we encode it into text\n  if (formData && encType === \"text/plain\") {\n    body = formData;\n    formData = undefined;\n  }\n\n  return { action, method: method.toLowerCase(), encType, formData, body };\n}\n","/**\n * NOTE: If you refactor this to split up the modules into separate files,\n * you'll need to update the rollup config for react-router-dom-v5-compat.\n */\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport type {\n  DataRouteObject,\n  FutureConfig,\n  Location,\n  NavigateOptions,\n  NavigationType,\n  Navigator,\n  RelativeRoutingType,\n  RouteObject,\n  RouterProviderProps,\n  To,\n} from \"react-router\";\nimport {\n  Router,\n  createPath,\n  useHref,\n  useLocation,\n  useMatches,\n  useNavigate,\n  useNavigation,\n  useResolvedPath,\n  useBlocker,\n  UNSAFE_DataRouterContext as DataRouterContext,\n  UNSAFE_DataRouterStateContext as DataRouterStateContext,\n  UNSAFE_NavigationContext as NavigationContext,\n  UNSAFE_RouteContext as RouteContext,\n  UNSAFE_mapRouteProperties as mapRouteProperties,\n  UNSAFE_useRouteId as useRouteId,\n  UNSAFE_useRoutesImpl as useRoutesImpl,\n} from \"react-router\";\nimport type {\n  BrowserHistory,\n  Fetcher,\n  FormEncType,\n  FormMethod,\n  FutureConfig as RouterFutureConfig,\n  GetScrollRestorationKeyFunction,\n  HashHistory,\n  History,\n  HTMLFormMethod,\n  HydrationState,\n  Router as RemixRouter,\n  V7_FormMethod,\n  RouterState,\n  RouterSubscriber,\n  BlockerFunction,\n} from \"@remix-run/router\";\nimport {\n  createRouter,\n  createBrowserHistory,\n  createHashHistory,\n  joinPaths,\n  stripBasename,\n  UNSAFE_ErrorResponseImpl as ErrorResponseImpl,\n  UNSAFE_invariant as invariant,\n  UNSAFE_warning as warning,\n  matchPath,\n  IDLE_FETCHER,\n} from \"@remix-run/router\";\n\nimport type {\n  SubmitOptions,\n  ParamKeyValuePair,\n  URLSearchParamsInit,\n  SubmitTarget,\n} from \"./dom\";\nimport {\n  createSearchParams,\n  defaultMethod,\n  getFormSubmissionInfo,\n  getSearchParamsForLocation,\n  shouldProcessLinkClick,\n} from \"./dom\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Re-exports\n////////////////////////////////////////////////////////////////////////////////\n\nexport type {\n  FormEncType,\n  FormMethod,\n  GetScrollRestorationKeyFunction,\n  ParamKeyValuePair,\n  SubmitOptions,\n  URLSearchParamsInit,\n  V7_FormMethod,\n};\nexport { createSearchParams };\n\n// Note: Keep in sync with react-router exports!\nexport type {\n  ActionFunction,\n  ActionFunctionArgs,\n  AwaitProps,\n  Blocker,\n  BlockerFunction,\n  DataRouteMatch,\n  DataRouteObject,\n  ErrorResponse,\n  Fetcher,\n  FutureConfig,\n  Hash,\n  IndexRouteObject,\n  IndexRouteProps,\n  JsonFunction,\n  LazyRouteFunction,\n  LayoutRouteProps,\n  LoaderFunction,\n  LoaderFunctionArgs,\n  Location,\n  MemoryRouterProps,\n  NavigateFunction,\n  NavigateOptions,\n  NavigateProps,\n  Navigation,\n  Navigator,\n  NonIndexRouteObject,\n  OutletProps,\n  Params,\n  ParamParseKey,\n  Path,\n  PathMatch,\n  Pathname,\n  PathParam,\n  PathPattern,\n  PathRouteProps,\n  RedirectFunction,\n  RelativeRoutingType,\n  RouteMatch,\n  RouteObject,\n  RouteProps,\n  RouterProps,\n  RouterProviderProps,\n  RoutesProps,\n  Search,\n  ShouldRevalidateFunction,\n  ShouldRevalidateFunctionArgs,\n  To,\n  UIMatch,\n} from \"react-router\";\nexport {\n  AbortedDeferredError,\n  Await,\n  MemoryRouter,\n  Navigate,\n  NavigationType,\n  Outlet,\n  Route,\n  Router,\n  Routes,\n  createMemoryRouter,\n  createPath,\n  createRoutesFromChildren,\n  createRoutesFromElements,\n  defer,\n  isRouteErrorResponse,\n  generatePath,\n  json,\n  matchPath,\n  matchRoutes,\n  parsePath,\n  redirect,\n  redirectDocument,\n  renderMatches,\n  resolvePath,\n  useActionData,\n  useAsyncError,\n  useAsyncValue,\n  useBlocker,\n  useHref,\n  useInRouterContext,\n  useLoaderData,\n  useLocation,\n  useMatch,\n  useMatches,\n  useNavigate,\n  useNavigation,\n  useNavigationType,\n  useOutlet,\n  useOutletContext,\n  useParams,\n  useResolvedPath,\n  useRevalidator,\n  useRouteError,\n  useRouteLoaderData,\n  useRoutes,\n} from \"react-router\";\n\n///////////////////////////////////////////////////////////////////////////////\n// DANGER! PLEASE READ ME!\n// We provide these exports as an escape hatch in the event that you need any\n// routing data that we don't provide an explicit API for. With that said, we\n// want to cover your use case if we can, so if you feel the need to use these\n// we want to hear from you. Let us know what you're building and we'll do our\n// best to make sure we can support you!\n//\n// We consider these exports an implementation detail and do not guarantee\n// against any breaking changes, regardless of the semver release. Use with\n// extreme caution and only if you understand the consequences. Godspeed.\n///////////////////////////////////////////////////////////////////////////////\n\n/** @internal */\nexport {\n  UNSAFE_DataRouterContext,\n  UNSAFE_DataRouterStateContext,\n  UNSAFE_NavigationContext,\n  UNSAFE_LocationContext,\n  UNSAFE_RouteContext,\n  UNSAFE_useRouteId,\n} from \"react-router\";\n//#endregion\n\ndeclare global {\n  var __staticRouterHydrationData: HydrationState | undefined;\n  var __reactRouterVersion: string;\n  interface Document {\n    startViewTransition(cb: () => Promise<void> | void): ViewTransition;\n  }\n}\n\n// HEY YOU! DON'T TOUCH THIS VARIABLE!\n//\n// It is replaced with the proper version at build time via a babel plugin in\n// the rollup config.\n//\n// Export a global property onto the window for React Router detection by the\n// Core Web Vitals Technology Report.  This way they can configure the `wappalyzer`\n// to detect and properly classify live websites as being built with React Router:\n// https://github.com/HTTPArchive/wappalyzer/blob/main/src/technologies/r.json\nconst REACT_ROUTER_VERSION = \"0\";\ntry {\n  window.__reactRouterVersion = REACT_ROUTER_VERSION;\n} catch (e) {\n  // no-op\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Routers\n////////////////////////////////////////////////////////////////////////////////\n\ninterface DOMRouterOpts {\n  basename?: string;\n  future?: Partial<Omit<RouterFutureConfig, \"v7_prependBasename\">>;\n  hydrationData?: HydrationState;\n  window?: Window;\n}\n\nexport function createBrowserRouter(\n  routes: RouteObject[],\n  opts?: DOMRouterOpts\n): RemixRouter {\n  return createRouter({\n    basename: opts?.basename,\n    future: {\n      ...opts?.future,\n      v7_prependBasename: true,\n    },\n    history: createBrowserHistory({ window: opts?.window }),\n    hydrationData: opts?.hydrationData || parseHydrationData(),\n    routes,\n    mapRouteProperties,\n    window: opts?.window,\n  }).initialize();\n}\n\nexport function createHashRouter(\n  routes: RouteObject[],\n  opts?: DOMRouterOpts\n): RemixRouter {\n  return createRouter({\n    basename: opts?.basename,\n    future: {\n      ...opts?.future,\n      v7_prependBasename: true,\n    },\n    history: createHashHistory({ window: opts?.window }),\n    hydrationData: opts?.hydrationData || parseHydrationData(),\n    routes,\n    mapRouteProperties,\n    window: opts?.window,\n  }).initialize();\n}\n\nfunction parseHydrationData(): HydrationState | undefined {\n  let state = window?.__staticRouterHydrationData;\n  if (state && state.errors) {\n    state = {\n      ...state,\n      errors: deserializeErrors(state.errors),\n    };\n  }\n  return state;\n}\n\nfunction deserializeErrors(\n  errors: RemixRouter[\"state\"][\"errors\"]\n): RemixRouter[\"state\"][\"errors\"] {\n  if (!errors) return null;\n  let entries = Object.entries(errors);\n  let serialized: RemixRouter[\"state\"][\"errors\"] = {};\n  for (let [key, val] of entries) {\n    // Hey you!  If you change this, please change the corresponding logic in\n    // serializeErrors in react-router-dom/server.tsx :)\n    if (val && val.__type === \"RouteErrorResponse\") {\n      serialized[key] = new ErrorResponseImpl(\n        val.status,\n        val.statusText,\n        val.data,\n        val.internal === true\n      );\n    } else if (val && val.__type === \"Error\") {\n      // Attempt to reconstruct the right type of Error (i.e., ReferenceError)\n      if (val.__subType) {\n        let ErrorConstructor = window[val.__subType];\n        if (typeof ErrorConstructor === \"function\") {\n          try {\n            // @ts-expect-error\n            let error = new ErrorConstructor(val.message);\n            // Wipe away the client-side stack trace.  Nothing to fill it in with\n            // because we don't serialize SSR stack traces for security reasons\n            error.stack = \"\";\n            serialized[key] = error;\n          } catch (e) {\n            // no-op - fall through and create a normal Error\n          }\n        }\n      }\n\n      if (serialized[key] == null) {\n        let error = new Error(val.message);\n        // Wipe away the client-side stack trace.  Nothing to fill it in with\n        // because we don't serialize SSR stack traces for security reasons\n        error.stack = \"\";\n        serialized[key] = error;\n      }\n    } else {\n      serialized[key] = val;\n    }\n  }\n  return serialized;\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Contexts\n////////////////////////////////////////////////////////////////////////////////\n\ntype ViewTransitionContextObject =\n  | {\n      isTransitioning: false;\n    }\n  | {\n      isTransitioning: true;\n      flushSync: boolean;\n      currentLocation: Location;\n      nextLocation: Location;\n    };\n\nconst ViewTransitionContext = React.createContext<ViewTransitionContextObject>({\n  isTransitioning: false,\n});\nif (__DEV__) {\n  ViewTransitionContext.displayName = \"ViewTransition\";\n}\n\nexport { ViewTransitionContext as UNSAFE_ViewTransitionContext };\n\n// TODO: (v7) Change the useFetcher data from `any` to `unknown`\ntype FetchersContextObject = Map<string, any>;\n\nconst FetchersContext = React.createContext<FetchersContextObject>(new Map());\nif (__DEV__) {\n  FetchersContext.displayName = \"Fetchers\";\n}\n\nexport { FetchersContext as UNSAFE_FetchersContext };\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Components\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n  Webpack + React 17 fails to compile on any of the following because webpack\n  complains that `startTransition` doesn't exist in `React`:\n  * import { startTransition } from \"react\"\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React.startTransition(() => setState()) : setState()\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React[\"startTransition\"](() => setState()) : setState()\n\n  Moving it to a constant such as the following solves the Webpack/React 17 issue:\n  * import * as React from from \"react\";\n    const START_TRANSITION = \"startTransition\";\n    START_TRANSITION in React ? React[START_TRANSITION](() => setState()) : setState()\n\n  However, that introduces webpack/terser minification issues in production builds\n  in React 18 where minification/obfuscation ends up removing the call of\n  React.startTransition entirely from the first half of the ternary.  Grabbing\n  this exported reference once up front resolves that issue.\n\n  See https://github.com/remix-run/react-router/issues/10579\n*/\nconst START_TRANSITION = \"startTransition\";\nconst startTransitionImpl = React[START_TRANSITION];\nconst FLUSH_SYNC = \"flushSync\";\nconst flushSyncImpl = ReactDOM[FLUSH_SYNC];\nconst USE_ID = \"useId\";\nconst useIdImpl = React[USE_ID];\n\nfunction startTransitionSafe(cb: () => void) {\n  if (startTransitionImpl) {\n    startTransitionImpl(cb);\n  } else {\n    cb();\n  }\n}\n\nfunction flushSyncSafe(cb: () => void) {\n  if (flushSyncImpl) {\n    flushSyncImpl(cb);\n  } else {\n    cb();\n  }\n}\n\ninterface ViewTransition {\n  finished: Promise<void>;\n  ready: Promise<void>;\n  updateCallbackDone: Promise<void>;\n  skipTransition(): void;\n}\n\nclass Deferred<T> {\n  status: \"pending\" | \"resolved\" | \"rejected\" = \"pending\";\n  promise: Promise<T>;\n  // @ts-expect-error - no initializer\n  resolve: (value: T) => void;\n  // @ts-expect-error - no initializer\n  reject: (reason?: unknown) => void;\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = (value) => {\n        if (this.status === \"pending\") {\n          this.status = \"resolved\";\n          resolve(value);\n        }\n      };\n      this.reject = (reason) => {\n        if (this.status === \"pending\") {\n          this.status = \"rejected\";\n          reject(reason);\n        }\n      };\n    });\n  }\n}\n\n/**\n * Given a Remix Router instance, render the appropriate UI\n */\nexport function RouterProvider({\n  fallbackElement,\n  router,\n  future,\n}: RouterProviderProps): React.ReactElement {\n  let [state, setStateImpl] = React.useState(router.state);\n  let [pendingState, setPendingState] = React.useState<RouterState>();\n  let [vtContext, setVtContext] = React.useState<ViewTransitionContextObject>({\n    isTransitioning: false,\n  });\n  let [renderDfd, setRenderDfd] = React.useState<Deferred<void>>();\n  let [transition, setTransition] = React.useState<ViewTransition>();\n  let [interruption, setInterruption] = React.useState<{\n    state: RouterState;\n    currentLocation: Location;\n    nextLocation: Location;\n  }>();\n  let fetcherData = React.useRef<Map<string, any>>(new Map());\n  let { v7_startTransition } = future || {};\n\n  let optInStartTransition = React.useCallback(\n    (cb: () => void) => {\n      if (v7_startTransition) {\n        startTransitionSafe(cb);\n      } else {\n        cb();\n      }\n    },\n    [v7_startTransition]\n  );\n\n  let setState = React.useCallback<RouterSubscriber>(\n    (\n      newState: RouterState,\n      {\n        deletedFetchers,\n        unstable_flushSync: flushSync,\n        unstable_viewTransitionOpts: viewTransitionOpts,\n      }\n    ) => {\n      deletedFetchers.forEach((key) => fetcherData.current.delete(key));\n      newState.fetchers.forEach((fetcher, key) => {\n        if (fetcher.data !== undefined) {\n          fetcherData.current.set(key, fetcher.data);\n        }\n      });\n\n      let isViewTransitionUnavailable =\n        router.window == null ||\n        typeof router.window.document.startViewTransition !== \"function\";\n\n      // If this isn't a view transition or it's not available in this browser,\n      // just update and be done with it\n      if (!viewTransitionOpts || isViewTransitionUnavailable) {\n        if (flushSync) {\n          flushSyncSafe(() => setStateImpl(newState));\n        } else {\n          optInStartTransition(() => setStateImpl(newState));\n        }\n        return;\n      }\n\n      // flushSync + startViewTransition\n      if (flushSync) {\n        // Flush through the context to mark DOM elements as transition=ing\n        flushSyncSafe(() => {\n          // Cancel any pending transitions\n          if (transition) {\n            renderDfd && renderDfd.resolve();\n            transition.skipTransition();\n          }\n          setVtContext({\n            isTransitioning: true,\n            flushSync: true,\n            currentLocation: viewTransitionOpts.currentLocation,\n            nextLocation: viewTransitionOpts.nextLocation,\n          });\n        });\n\n        // Update the DOM\n        let t = router.window!.document.startViewTransition(() => {\n          flushSyncSafe(() => setStateImpl(newState));\n        });\n\n        // Clean up after the animation completes\n        t.finished.finally(() => {\n          flushSyncSafe(() => {\n            setRenderDfd(undefined);\n            setTransition(undefined);\n            setPendingState(undefined);\n            setVtContext({ isTransitioning: false });\n          });\n        });\n\n        flushSyncSafe(() => setTransition(t));\n        return;\n      }\n\n      // startTransition + startViewTransition\n      if (transition) {\n        // Interrupting an in-progress transition, cancel and let everything flush\n        // out, and then kick off a new transition from the interruption state\n        renderDfd && renderDfd.resolve();\n        transition.skipTransition();\n        setInterruption({\n          state: newState,\n          currentLocation: viewTransitionOpts.currentLocation,\n          nextLocation: viewTransitionOpts.nextLocation,\n        });\n      } else {\n        // Completed navigation update with opted-in view transitions, let 'er rip\n        setPendingState(newState);\n        setVtContext({\n          isTransitioning: true,\n          flushSync: false,\n          currentLocation: viewTransitionOpts.currentLocation,\n          nextLocation: viewTransitionOpts.nextLocation,\n        });\n      }\n    },\n    [router.window, transition, renderDfd, fetcherData, optInStartTransition]\n  );\n\n  // Need to use a layout effect here so we are subscribed early enough to\n  // pick up on any render-driven redirects/navigations (useEffect/<Navigate>)\n  React.useLayoutEffect(() => router.subscribe(setState), [router, setState]);\n\n  // When we start a view transition, create a Deferred we can use for the\n  // eventual \"completed\" render\n  React.useEffect(() => {\n    if (vtContext.isTransitioning && !vtContext.flushSync) {\n      setRenderDfd(new Deferred<void>());\n    }\n  }, [vtContext]);\n\n  // Once the deferred is created, kick off startViewTransition() to update the\n  // DOM and then wait on the Deferred to resolve (indicating the DOM update has\n  // happened)\n  React.useEffect(() => {\n    if (renderDfd && pendingState && router.window) {\n      let newState = pendingState;\n      let renderPromise = renderDfd.promise;\n      let transition = router.window.document.startViewTransition(async () => {\n        optInStartTransition(() => setStateImpl(newState));\n        await renderPromise;\n      });\n      transition.finished.finally(() => {\n        setRenderDfd(undefined);\n        setTransition(undefined);\n        setPendingState(undefined);\n        setVtContext({ isTransitioning: false });\n      });\n      setTransition(transition);\n    }\n  }, [optInStartTransition, pendingState, renderDfd, router.window]);\n\n  // When the new location finally renders and is committed to the DOM, this\n  // effect will run to resolve the transition\n  React.useEffect(() => {\n    if (\n      renderDfd &&\n      pendingState &&\n      state.location.key === pendingState.location.key\n    ) {\n      renderDfd.resolve();\n    }\n  }, [renderDfd, transition, state.location, pendingState]);\n\n  // If we get interrupted with a new navigation during a transition, we skip\n  // the active transition, let it cleanup, then kick it off again here\n  React.useEffect(() => {\n    if (!vtContext.isTransitioning && interruption) {\n      setPendingState(interruption.state);\n      setVtContext({\n        isTransitioning: true,\n        flushSync: false,\n        currentLocation: interruption.currentLocation,\n        nextLocation: interruption.nextLocation,\n      });\n      setInterruption(undefined);\n    }\n  }, [vtContext.isTransitioning, interruption]);\n\n  React.useEffect(() => {\n    warning(\n      fallbackElement == null || !router.future.v7_partialHydration,\n      \"`<RouterProvider fallbackElement>` is deprecated when using \" +\n        \"`v7_partialHydration`, use a `HydrateFallback` component instead\"\n    );\n    // Only log this once on initial mount\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  let navigator = React.useMemo((): Navigator => {\n    return {\n      createHref: router.createHref,\n      encodeLocation: router.encodeLocation,\n      go: (n) => router.navigate(n),\n      push: (to, state, opts) =>\n        router.navigate(to, {\n          state,\n          preventScrollReset: opts?.preventScrollReset,\n        }),\n      replace: (to, state, opts) =>\n        router.navigate(to, {\n          replace: true,\n          state,\n          preventScrollReset: opts?.preventScrollReset,\n        }),\n    };\n  }, [router]);\n\n  let basename = router.basename || \"/\";\n\n  let dataRouterContext = React.useMemo(\n    () => ({\n      router,\n      navigator,\n      static: false,\n      basename,\n    }),\n    [router, navigator, basename]\n  );\n\n  // The fragment and {null} here are important!  We need them to keep React 18's\n  // useId happy when we are server-rendering since we may have a <script> here\n  // containing the hydrated server-side staticContext (from StaticRouterProvider).\n  // useId relies on the component tree structure to generate deterministic id's\n  // so we need to ensure it remains the same on the client even though\n  // we don't need the <script> tag\n  return (\n    <>\n      <DataRouterContext.Provider value={dataRouterContext}>\n        <DataRouterStateContext.Provider value={state}>\n          <FetchersContext.Provider value={fetcherData.current}>\n            <ViewTransitionContext.Provider value={vtContext}>\n              <Router\n                basename={basename}\n                location={state.location}\n                navigationType={state.historyAction}\n                navigator={navigator}\n                future={{\n                  v7_relativeSplatPath: router.future.v7_relativeSplatPath,\n                }}\n              >\n                {state.initialized || router.future.v7_partialHydration ? (\n                  <DataRoutes\n                    routes={router.routes}\n                    future={router.future}\n                    state={state}\n                  />\n                ) : (\n                  fallbackElement\n                )}\n              </Router>\n            </ViewTransitionContext.Provider>\n          </FetchersContext.Provider>\n        </DataRouterStateContext.Provider>\n      </DataRouterContext.Provider>\n      {null}\n    </>\n  );\n}\n\nfunction DataRoutes({\n  routes,\n  future,\n  state,\n}: {\n  routes: DataRouteObject[];\n  future: RemixRouter[\"future\"];\n  state: RouterState;\n}): React.ReactElement | null {\n  return useRoutesImpl(routes, undefined, state, future);\n}\n\nexport interface BrowserRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  future?: Partial<FutureConfig>;\n  window?: Window;\n}\n\n/**\n * A `<Router>` for use in web browsers. Provides the cleanest URLs.\n */\nexport function BrowserRouter({\n  basename,\n  children,\n  future,\n  window,\n}: BrowserRouterProps) {\n  let historyRef = React.useRef<BrowserHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createBrowserHistory({ window, v5Compat: true });\n  }\n\n  let history = historyRef.current;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n  let { v7_startTransition } = future || {};\n  let setState = React.useCallback(\n    (newState: { action: NavigationType; location: Location }) => {\n      v7_startTransition && startTransitionImpl\n        ? startTransitionImpl(() => setStateImpl(newState))\n        : setStateImpl(newState);\n    },\n    [setStateImpl, v7_startTransition]\n  );\n\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n      future={future}\n    />\n  );\n}\n\nexport interface HashRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  future?: Partial<FutureConfig>;\n  window?: Window;\n}\n\n/**\n * A `<Router>` for use in web browsers. Stores the location in the hash\n * portion of the URL so it is not sent to the server.\n */\nexport function HashRouter({\n  basename,\n  children,\n  future,\n  window,\n}: HashRouterProps) {\n  let historyRef = React.useRef<HashHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createHashHistory({ window, v5Compat: true });\n  }\n\n  let history = historyRef.current;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n  let { v7_startTransition } = future || {};\n  let setState = React.useCallback(\n    (newState: { action: NavigationType; location: Location }) => {\n      v7_startTransition && startTransitionImpl\n        ? startTransitionImpl(() => setStateImpl(newState))\n        : setStateImpl(newState);\n    },\n    [setStateImpl, v7_startTransition]\n  );\n\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n      future={future}\n    />\n  );\n}\n\nexport interface HistoryRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  future?: FutureConfig;\n  history: History;\n}\n\n/**\n * A `<Router>` that accepts a pre-instantiated history object. It's important\n * to note that using your own history object is highly discouraged and may add\n * two versions of the history library to your bundles unless you use the same\n * version of the history library that React Router uses internally.\n */\nfunction HistoryRouter({\n  basename,\n  children,\n  future,\n  history,\n}: HistoryRouterProps) {\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n  let { v7_startTransition } = future || {};\n  let setState = React.useCallback(\n    (newState: { action: NavigationType; location: Location }) => {\n      v7_startTransition && startTransitionImpl\n        ? startTransitionImpl(() => setStateImpl(newState))\n        : setStateImpl(newState);\n    },\n    [setStateImpl, v7_startTransition]\n  );\n\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n      future={future}\n    />\n  );\n}\n\nif (__DEV__) {\n  HistoryRouter.displayName = \"unstable_HistoryRouter\";\n}\n\nexport { HistoryRouter as unstable_HistoryRouter };\n\nexport interface LinkProps\n  extends Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, \"href\"> {\n  reloadDocument?: boolean;\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  to: To;\n  unstable_viewTransition?: boolean;\n}\n\nconst isBrowser =\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\";\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\n/**\n * The public API for rendering a history-aware `<a>`.\n */\nexport const Link = React.forwardRef<HTMLAnchorElement, LinkProps>(\n  function LinkWithRef(\n    {\n      onClick,\n      relative,\n      reloadDocument,\n      replace,\n      state,\n      target,\n      to,\n      preventScrollReset,\n      unstable_viewTransition,\n      ...rest\n    },\n    ref\n  ) {\n    let { basename } = React.useContext(NavigationContext);\n\n    // Rendered into <a href> for absolute URLs\n    let absoluteHref;\n    let isExternal = false;\n\n    if (typeof to === \"string\" && ABSOLUTE_URL_REGEX.test(to)) {\n      // Render the absolute href server- and client-side\n      absoluteHref = to;\n\n      // Only check for external origins client-side\n      if (isBrowser) {\n        try {\n          let currentUrl = new URL(window.location.href);\n          let targetUrl = to.startsWith(\"//\")\n            ? new URL(currentUrl.protocol + to)\n            : new URL(to);\n          let path = stripBasename(targetUrl.pathname, basename);\n\n          if (targetUrl.origin === currentUrl.origin && path != null) {\n            // Strip the protocol/origin/basename for same-origin absolute URLs\n            to = path + targetUrl.search + targetUrl.hash;\n          } else {\n            isExternal = true;\n          }\n        } catch (e) {\n          // We can't do external URL detection without a valid URL\n          warning(\n            false,\n            `<Link to=\"${to}\"> contains an invalid URL which will probably break ` +\n              `when clicked - please update to a valid URL path.`\n          );\n        }\n      }\n    }\n\n    // Rendered into <a href> for relative URLs\n    let href = useHref(to, { relative });\n\n    let internalOnClick = useLinkClickHandler(to, {\n      replace,\n      state,\n      target,\n      preventScrollReset,\n      relative,\n      unstable_viewTransition,\n    });\n    function handleClick(\n      event: React.MouseEvent<HTMLAnchorElement, MouseEvent>\n    ) {\n      if (onClick) onClick(event);\n      if (!event.defaultPrevented) {\n        internalOnClick(event);\n      }\n    }\n\n    return (\n      // eslint-disable-next-line jsx-a11y/anchor-has-content\n      <a\n        {...rest}\n        href={absoluteHref || href}\n        onClick={isExternal || reloadDocument ? onClick : handleClick}\n        ref={ref}\n        target={target}\n      />\n    );\n  }\n);\n\nif (__DEV__) {\n  Link.displayName = \"Link\";\n}\n\ntype NavLinkRenderProps = {\n  isActive: boolean;\n  isPending: boolean;\n  isTransitioning: boolean;\n};\n\nexport interface NavLinkProps\n  extends Omit<LinkProps, \"className\" | \"style\" | \"children\"> {\n  children?: React.ReactNode | ((props: NavLinkRenderProps) => React.ReactNode);\n  caseSensitive?: boolean;\n  className?: string | ((props: NavLinkRenderProps) => string | undefined);\n  end?: boolean;\n  style?:\n    | React.CSSProperties\n    | ((props: NavLinkRenderProps) => React.CSSProperties | undefined);\n}\n\n/**\n * A `<Link>` wrapper that knows if it's \"active\" or not.\n */\nexport const NavLink = React.forwardRef<HTMLAnchorElement, NavLinkProps>(\n  function NavLinkWithRef(\n    {\n      \"aria-current\": ariaCurrentProp = \"page\",\n      caseSensitive = false,\n      className: classNameProp = \"\",\n      end = false,\n      style: styleProp,\n      to,\n      unstable_viewTransition,\n      children,\n      ...rest\n    },\n    ref\n  ) {\n    let path = useResolvedPath(to, { relative: rest.relative });\n    let location = useLocation();\n    let routerState = React.useContext(DataRouterStateContext);\n    let { navigator, basename } = React.useContext(NavigationContext);\n    let isTransitioning =\n      routerState != null &&\n      // Conditional usage is OK here because the usage of a data router is static\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      useViewTransitionState(path) &&\n      unstable_viewTransition === true;\n\n    let toPathname = navigator.encodeLocation\n      ? navigator.encodeLocation(path).pathname\n      : path.pathname;\n    let locationPathname = location.pathname;\n    let nextLocationPathname =\n      routerState && routerState.navigation && routerState.navigation.location\n        ? routerState.navigation.location.pathname\n        : null;\n\n    if (!caseSensitive) {\n      locationPathname = locationPathname.toLowerCase();\n      nextLocationPathname = nextLocationPathname\n        ? nextLocationPathname.toLowerCase()\n        : null;\n      toPathname = toPathname.toLowerCase();\n    }\n\n    if (nextLocationPathname && basename) {\n      nextLocationPathname =\n        stripBasename(nextLocationPathname, basename) || nextLocationPathname;\n    }\n\n    // If the `to` has a trailing slash, look at that exact spot.  Otherwise,\n    // we're looking for a slash _after_ what's in `to`.  For example:\n    //\n    // <NavLink to=\"/users\"> and <NavLink to=\"/users/\">\n    // both want to look for a / at index 6 to match URL `/users/matt`\n    const endSlashPosition =\n      toPathname !== \"/\" && toPathname.endsWith(\"/\")\n        ? toPathname.length - 1\n        : toPathname.length;\n    let isActive =\n      locationPathname === toPathname ||\n      (!end &&\n        locationPathname.startsWith(toPathname) &&\n        locationPathname.charAt(endSlashPosition) === \"/\");\n\n    let isPending =\n      nextLocationPathname != null &&\n      (nextLocationPathname === toPathname ||\n        (!end &&\n          nextLocationPathname.startsWith(toPathname) &&\n          nextLocationPathname.charAt(toPathname.length) === \"/\"));\n\n    let renderProps = {\n      isActive,\n      isPending,\n      isTransitioning,\n    };\n\n    let ariaCurrent = isActive ? ariaCurrentProp : undefined;\n\n    let className: string | undefined;\n    if (typeof classNameProp === \"function\") {\n      className = classNameProp(renderProps);\n    } else {\n      // If the className prop is not a function, we use a default `active`\n      // class for <NavLink />s that are active. In v5 `active` was the default\n      // value for `activeClassName`, but we are removing that API and can still\n      // use the old default behavior for a cleaner upgrade path and keep the\n      // simple styling rules working as they currently do.\n      className = [\n        classNameProp,\n        isActive ? \"active\" : null,\n        isPending ? \"pending\" : null,\n        isTransitioning ? \"transitioning\" : null,\n      ]\n        .filter(Boolean)\n        .join(\" \");\n    }\n\n    let style =\n      typeof styleProp === \"function\" ? styleProp(renderProps) : styleProp;\n\n    return (\n      <Link\n        {...rest}\n        aria-current={ariaCurrent}\n        className={className}\n        ref={ref}\n        style={style}\n        to={to}\n        unstable_viewTransition={unstable_viewTransition}\n      >\n        {typeof children === \"function\" ? children(renderProps) : children}\n      </Link>\n    );\n  }\n);\n\nif (__DEV__) {\n  NavLink.displayName = \"NavLink\";\n}\n\nexport interface FetcherFormProps\n  extends React.FormHTMLAttributes<HTMLFormElement> {\n  /**\n   * The HTTP verb to use when the form is submit. Supports \"get\", \"post\",\n   * \"put\", \"delete\", \"patch\".\n   */\n  method?: HTMLFormMethod;\n\n  /**\n   * `<form encType>` - enhancing beyond the normal string type and limiting\n   * to the built-in browser supported values\n   */\n  encType?:\n    | \"application/x-www-form-urlencoded\"\n    | \"multipart/form-data\"\n    | \"text/plain\";\n\n  /**\n   * Normal `<form action>` but supports React Router's relative paths.\n   */\n  action?: string;\n\n  /**\n   * Determines whether the form action is relative to the route hierarchy or\n   * the pathname.  Use this if you want to opt out of navigating the route\n   * hierarchy and want to instead route based on /-delimited URL segments\n   */\n  relative?: RelativeRoutingType;\n\n  /**\n   * Prevent the scroll position from resetting to the top of the viewport on\n   * completion of the navigation when using the <ScrollRestoration> component\n   */\n  preventScrollReset?: boolean;\n\n  /**\n   * A function to call when the form is submitted. If you call\n   * `event.preventDefault()` then this form will not do anything.\n   */\n  onSubmit?: React.FormEventHandler<HTMLFormElement>;\n}\n\nexport interface FormProps extends FetcherFormProps {\n  /**\n   * Indicate a specific fetcherKey to use when using navigate=false\n   */\n  fetcherKey?: string;\n\n  /**\n   * navigate=false will use a fetcher instead of a navigation\n   */\n  navigate?: boolean;\n\n  /**\n   * Forces a full document navigation instead of a fetch.\n   */\n  reloadDocument?: boolean;\n\n  /**\n   * Replaces the current entry in the browser history stack when the form\n   * navigates. Use this if you don't want the user to be able to click \"back\"\n   * to the page with the form on it.\n   */\n  replace?: boolean;\n\n  /**\n   * State object to add to the history stack entry for this navigation\n   */\n  state?: any;\n\n  /**\n   * Enable view transitions on this Form navigation\n   */\n  unstable_viewTransition?: boolean;\n}\n\ntype HTMLSubmitEvent = React.BaseSyntheticEvent<\n  SubmitEvent,\n  Event,\n  HTMLFormElement\n>;\n\ntype HTMLFormSubmitter = HTMLButtonElement | HTMLInputElement;\n\n/**\n * A `@remix-run/router`-aware `<form>`. It behaves like a normal form except\n * that the interaction with the server is with `fetch` instead of new document\n * requests, allowing components to add nicer UX to the page as the form is\n * submitted and returns with data.\n */\nexport const Form = React.forwardRef<HTMLFormElement, FormProps>(\n  (\n    {\n      fetcherKey,\n      navigate,\n      reloadDocument,\n      replace,\n      state,\n      method = defaultMethod,\n      action,\n      onSubmit,\n      relative,\n      preventScrollReset,\n      unstable_viewTransition,\n      ...props\n    },\n    forwardedRef\n  ) => {\n    let submit = useSubmit();\n    let formAction = useFormAction(action, { relative });\n    let formMethod: HTMLFormMethod =\n      method.toLowerCase() === \"get\" ? \"get\" : \"post\";\n\n    let submitHandler: React.FormEventHandler<HTMLFormElement> = (event) => {\n      onSubmit && onSubmit(event);\n      if (event.defaultPrevented) return;\n      event.preventDefault();\n\n      let submitter = (event as unknown as HTMLSubmitEvent).nativeEvent\n        .submitter as HTMLFormSubmitter | null;\n\n      let submitMethod =\n        (submitter?.getAttribute(\"formmethod\") as HTMLFormMethod | undefined) ||\n        method;\n\n      submit(submitter || event.currentTarget, {\n        fetcherKey,\n        method: submitMethod,\n        navigate,\n        replace,\n        state,\n        relative,\n        preventScrollReset,\n        unstable_viewTransition,\n      });\n    };\n\n    return (\n      <form\n        ref={forwardedRef}\n        method={formMethod}\n        action={formAction}\n        onSubmit={reloadDocument ? onSubmit : submitHandler}\n        {...props}\n      />\n    );\n  }\n);\n\nif (__DEV__) {\n  Form.displayName = \"Form\";\n}\n\nexport interface ScrollRestorationProps {\n  getKey?: GetScrollRestorationKeyFunction;\n  storageKey?: string;\n}\n\n/**\n * This component will emulate the browser's scroll restoration on location\n * changes.\n */\nexport function ScrollRestoration({\n  getKey,\n  storageKey,\n}: ScrollRestorationProps) {\n  useScrollRestoration({ getKey, storageKey });\n  return null;\n}\n\nif (__DEV__) {\n  ScrollRestoration.displayName = \"ScrollRestoration\";\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hooks\n////////////////////////////////////////////////////////////////////////////////\n\nenum DataRouterHook {\n  UseScrollRestoration = \"useScrollRestoration\",\n  UseSubmit = \"useSubmit\",\n  UseSubmitFetcher = \"useSubmitFetcher\",\n  UseFetcher = \"useFetcher\",\n  useViewTransitionState = \"useViewTransitionState\",\n}\n\nenum DataRouterStateHook {\n  UseFetcher = \"useFetcher\",\n  UseFetchers = \"useFetchers\",\n  UseScrollRestoration = \"useScrollRestoration\",\n}\n\n// Internal hooks\n\nfunction getDataRouterConsoleError(\n  hookName: DataRouterHook | DataRouterStateHook\n) {\n  return `${hookName} must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.`;\n}\n\nfunction useDataRouterContext(hookName: DataRouterHook) {\n  let ctx = React.useContext(DataRouterContext);\n  invariant(ctx, getDataRouterConsoleError(hookName));\n  return ctx;\n}\n\nfunction useDataRouterState(hookName: DataRouterStateHook) {\n  let state = React.useContext(DataRouterStateContext);\n  invariant(state, getDataRouterConsoleError(hookName));\n  return state;\n}\n\n// External hooks\n\n/**\n * Handles the click behavior for router `<Link>` components. This is useful if\n * you need to create custom `<Link>` components with the same click behavior we\n * use in our exported `<Link>`.\n */\nexport function useLinkClickHandler<E extends Element = HTMLAnchorElement>(\n  to: To,\n  {\n    target,\n    replace: replaceProp,\n    state,\n    preventScrollReset,\n    relative,\n    unstable_viewTransition,\n  }: {\n    target?: React.HTMLAttributeAnchorTarget;\n    replace?: boolean;\n    state?: any;\n    preventScrollReset?: boolean;\n    relative?: RelativeRoutingType;\n    unstable_viewTransition?: boolean;\n  } = {}\n): (event: React.MouseEvent<E, MouseEvent>) => void {\n  let navigate = useNavigate();\n  let location = useLocation();\n  let path = useResolvedPath(to, { relative });\n\n  return React.useCallback(\n    (event: React.MouseEvent<E, MouseEvent>) => {\n      if (shouldProcessLinkClick(event, target)) {\n        event.preventDefault();\n\n        // If the URL hasn't changed, a regular <a> will do a replace instead of\n        // a push, so do the same here unless the replace prop is explicitly set\n        let replace =\n          replaceProp !== undefined\n            ? replaceProp\n            : createPath(location) === createPath(path);\n\n        navigate(to, {\n          replace,\n          state,\n          preventScrollReset,\n          relative,\n          unstable_viewTransition,\n        });\n      }\n    },\n    [\n      location,\n      navigate,\n      path,\n      replaceProp,\n      state,\n      target,\n      to,\n      preventScrollReset,\n      relative,\n      unstable_viewTransition,\n    ]\n  );\n}\n\n/**\n * A convenient wrapper for reading and writing search parameters via the\n * URLSearchParams interface.\n */\nexport function useSearchParams(\n  defaultInit?: URLSearchParamsInit\n): [URLSearchParams, SetURLSearchParams] {\n  warning(\n    typeof URLSearchParams !== \"undefined\",\n    `You cannot use the \\`useSearchParams\\` hook in a browser that does not ` +\n      `support the URLSearchParams API. If you need to support Internet ` +\n      `Explorer 11, we recommend you load a polyfill such as ` +\n      `https://github.com/ungap/url-search-params\\n\\n` +\n      `If you're unsure how to load polyfills, we recommend you check out ` +\n      `https://polyfill.io/v3/ which provides some recommendations about how ` +\n      `to load polyfills only for users that need them, instead of for every ` +\n      `user.`\n  );\n\n  let defaultSearchParamsRef = React.useRef(createSearchParams(defaultInit));\n  let hasSetSearchParamsRef = React.useRef(false);\n\n  let location = useLocation();\n  let searchParams = React.useMemo(\n    () =>\n      // Only merge in the defaults if we haven't yet called setSearchParams.\n      // Once we call that we want those to take precedence, otherwise you can't\n      // remove a param with setSearchParams({}) if it has an initial value\n      getSearchParamsForLocation(\n        location.search,\n        hasSetSearchParamsRef.current ? null : defaultSearchParamsRef.current\n      ),\n    [location.search]\n  );\n\n  let navigate = useNavigate();\n  let setSearchParams = React.useCallback<SetURLSearchParams>(\n    (nextInit, navigateOptions) => {\n      const newSearchParams = createSearchParams(\n        typeof nextInit === \"function\" ? nextInit(searchParams) : nextInit\n      );\n      hasSetSearchParamsRef.current = true;\n      navigate(\"?\" + newSearchParams, navigateOptions);\n    },\n    [navigate, searchParams]\n  );\n\n  return [searchParams, setSearchParams];\n}\n\nexport type SetURLSearchParams = (\n  nextInit?:\n    | URLSearchParamsInit\n    | ((prev: URLSearchParams) => URLSearchParamsInit),\n  navigateOpts?: NavigateOptions\n) => void;\n\n/**\n * Submits a HTML `<form>` to the server without reloading the page.\n */\nexport interface SubmitFunction {\n  (\n    /**\n     * Specifies the `<form>` to be submitted to the server, a specific\n     * `<button>` or `<input type=\"submit\">` to use to submit the form, or some\n     * arbitrary data to submit.\n     *\n     * Note: When using a `<button>` its `name` and `value` will also be\n     * included in the form data that is submitted.\n     */\n    target: SubmitTarget,\n\n    /**\n     * Options that override the `<form>`'s own attributes. Required when\n     * submitting arbitrary data without a backing `<form>`.\n     */\n    options?: SubmitOptions\n  ): void;\n}\n\n/**\n * Submits a fetcher `<form>` to the server without reloading the page.\n */\nexport interface FetcherSubmitFunction {\n  (\n    target: SubmitTarget,\n    // Fetchers cannot replace or set state because they are not navigation events\n    options?: Omit<SubmitOptions, \"replace\" | \"state\">\n  ): void;\n}\n\nfunction validateClientSideSubmission() {\n  if (typeof document === \"undefined\") {\n    throw new Error(\n      \"You are calling submit during the server render. \" +\n        \"Try calling submit within a `useEffect` or callback instead.\"\n    );\n  }\n}\n\nlet fetcherId = 0;\nlet getUniqueFetcherId = () => `__${String(++fetcherId)}__`;\n\n/**\n * Returns a function that may be used to programmatically submit a form (or\n * some arbitrary data) to the server.\n */\nexport function useSubmit(): SubmitFunction {\n  let { router } = useDataRouterContext(DataRouterHook.UseSubmit);\n  let { basename } = React.useContext(NavigationContext);\n  let currentRouteId = useRouteId();\n\n  return React.useCallback<SubmitFunction>(\n    (target, options = {}) => {\n      validateClientSideSubmission();\n\n      let { action, method, encType, formData, body } = getFormSubmissionInfo(\n        target,\n        basename\n      );\n\n      if (options.navigate === false) {\n        let key = options.fetcherKey || getUniqueFetcherId();\n        router.fetch(key, currentRouteId, options.action || action, {\n          preventScrollReset: options.preventScrollReset,\n          formData,\n          body,\n          formMethod: options.method || (method as HTMLFormMethod),\n          formEncType: options.encType || (encType as FormEncType),\n          unstable_flushSync: options.unstable_flushSync,\n        });\n      } else {\n        router.navigate(options.action || action, {\n          preventScrollReset: options.preventScrollReset,\n          formData,\n          body,\n          formMethod: options.method || (method as HTMLFormMethod),\n          formEncType: options.encType || (encType as FormEncType),\n          replace: options.replace,\n          state: options.state,\n          fromRouteId: currentRouteId,\n          unstable_flushSync: options.unstable_flushSync,\n          unstable_viewTransition: options.unstable_viewTransition,\n        });\n      }\n    },\n    [router, basename, currentRouteId]\n  );\n}\n\n// v7: Eventually we should deprecate this entirely in favor of using the\n// router method directly?\nexport function useFormAction(\n  action?: string,\n  { relative }: { relative?: RelativeRoutingType } = {}\n): string {\n  let { basename } = React.useContext(NavigationContext);\n  let routeContext = React.useContext(RouteContext);\n  invariant(routeContext, \"useFormAction must be used inside a RouteContext\");\n\n  let [match] = routeContext.matches.slice(-1);\n  // Shallow clone path so we can modify it below, otherwise we modify the\n  // object referenced by useMemo inside useResolvedPath\n  let path = { ...useResolvedPath(action ? action : \".\", { relative }) };\n\n  // If no action was specified, browsers will persist current search params\n  // when determining the path, so match that behavior\n  // https://github.com/remix-run/remix/issues/927\n  let location = useLocation();\n  if (action == null) {\n    // Safe to write to this directly here since if action was undefined, we\n    // would have called useResolvedPath(\".\") which will never include a search\n    path.search = location.search;\n\n    // When grabbing search params from the URL, remove any included ?index param\n    // since it might not apply to our contextual route.  We add it back based\n    // on match.route.index below\n    let params = new URLSearchParams(path.search);\n    if (params.has(\"index\") && params.get(\"index\") === \"\") {\n      params.delete(\"index\");\n      path.search = params.toString() ? `?${params.toString()}` : \"\";\n    }\n  }\n\n  if ((!action || action === \".\") && match.route.index) {\n    path.search = path.search\n      ? path.search.replace(/^\\?/, \"?index&\")\n      : \"?index\";\n  }\n\n  // If we're operating within a basename, prepend it to the pathname prior\n  // to creating the form action.  If this is a root navigation, then just use\n  // the raw basename which allows the basename to have full control over the\n  // presence of a trailing slash on root actions\n  if (basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\nexport type FetcherWithComponents<TData> = Fetcher<TData> & {\n  Form: React.ForwardRefExoticComponent<\n    FetcherFormProps & React.RefAttributes<HTMLFormElement>\n  >;\n  submit: FetcherSubmitFunction;\n  load: (href: string, opts?: { unstable_flushSync?: boolean }) => void;\n};\n\n// TODO: (v7) Change the useFetcher generic default from `any` to `unknown`\n\n/**\n * Interacts with route loaders and actions without causing a navigation. Great\n * for any interaction that stays on the same page.\n */\nexport function useFetcher<TData = any>({\n  key,\n}: { key?: string } = {}): FetcherWithComponents<TData> {\n  let { router } = useDataRouterContext(DataRouterHook.UseFetcher);\n  let state = useDataRouterState(DataRouterStateHook.UseFetcher);\n  let fetcherData = React.useContext(FetchersContext);\n  let route = React.useContext(RouteContext);\n  let routeId = route.matches[route.matches.length - 1]?.route.id;\n\n  invariant(fetcherData, `useFetcher must be used inside a FetchersContext`);\n  invariant(route, `useFetcher must be used inside a RouteContext`);\n  invariant(\n    routeId != null,\n    `useFetcher can only be used on routes that contain a unique \"id\"`\n  );\n\n  // Fetcher key handling\n  // OK to call conditionally to feature detect `useId`\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  let defaultKey = useIdImpl ? useIdImpl() : \"\";\n  let [fetcherKey, setFetcherKey] = React.useState<string>(key || defaultKey);\n  if (key && key !== fetcherKey) {\n    setFetcherKey(key);\n  } else if (!fetcherKey) {\n    // We will only fall through here when `useId` is not available\n    setFetcherKey(getUniqueFetcherId());\n  }\n\n  // Registration/cleanup\n  React.useEffect(() => {\n    router.getFetcher(fetcherKey);\n    return () => {\n      // Tell the router we've unmounted - if v7_fetcherPersist is enabled this\n      // will not delete immediately but instead queue up a delete after the\n      // fetcher returns to an `idle` state\n      router.deleteFetcher(fetcherKey);\n    };\n  }, [router, fetcherKey]);\n\n  // Fetcher additions\n  let load = React.useCallback(\n    (href: string, opts?: { unstable_flushSync?: boolean }) => {\n      invariant(routeId, \"No routeId available for fetcher.load()\");\n      router.fetch(fetcherKey, routeId, href, opts);\n    },\n    [fetcherKey, routeId, router]\n  );\n\n  let submitImpl = useSubmit();\n  let submit = React.useCallback<FetcherSubmitFunction>(\n    (target, opts) => {\n      submitImpl(target, {\n        ...opts,\n        navigate: false,\n        fetcherKey,\n      });\n    },\n    [fetcherKey, submitImpl]\n  );\n\n  let FetcherForm = React.useMemo(() => {\n    let FetcherForm = React.forwardRef<HTMLFormElement, FetcherFormProps>(\n      (props, ref) => {\n        return (\n          <Form {...props} navigate={false} fetcherKey={fetcherKey} ref={ref} />\n        );\n      }\n    );\n    if (__DEV__) {\n      FetcherForm.displayName = \"fetcher.Form\";\n    }\n    return FetcherForm;\n  }, [fetcherKey]);\n\n  // Exposed FetcherWithComponents\n  let fetcher = state.fetchers.get(fetcherKey) || IDLE_FETCHER;\n  let data = fetcherData.get(fetcherKey);\n  let fetcherWithComponents = React.useMemo(\n    () => ({\n      Form: FetcherForm,\n      submit,\n      load,\n      ...fetcher,\n      data,\n    }),\n    [FetcherForm, submit, load, fetcher, data]\n  );\n\n  return fetcherWithComponents;\n}\n\n/**\n * Provides all fetchers currently on the page. Useful for layouts and parent\n * routes that need to provide pending/optimistic UI regarding the fetch.\n */\nexport function useFetchers(): (Fetcher & { key: string })[] {\n  let state = useDataRouterState(DataRouterStateHook.UseFetchers);\n  return Array.from(state.fetchers.entries()).map(([key, fetcher]) => ({\n    ...fetcher,\n    key,\n  }));\n}\n\nconst SCROLL_RESTORATION_STORAGE_KEY = \"react-router-scroll-positions\";\nlet savedScrollPositions: Record<string, number> = {};\n\n/**\n * When rendered inside a RouterProvider, will restore scroll positions on navigations\n */\nfunction useScrollRestoration({\n  getKey,\n  storageKey,\n}: {\n  getKey?: GetScrollRestorationKeyFunction;\n  storageKey?: string;\n} = {}) {\n  let { router } = useDataRouterContext(DataRouterHook.UseScrollRestoration);\n  let { restoreScrollPosition, preventScrollReset } = useDataRouterState(\n    DataRouterStateHook.UseScrollRestoration\n  );\n  let { basename } = React.useContext(NavigationContext);\n  let location = useLocation();\n  let matches = useMatches();\n  let navigation = useNavigation();\n\n  // Trigger manual scroll restoration while we're active\n  React.useEffect(() => {\n    window.history.scrollRestoration = \"manual\";\n    return () => {\n      window.history.scrollRestoration = \"auto\";\n    };\n  }, []);\n\n  // Save positions on pagehide\n  usePageHide(\n    React.useCallback(() => {\n      if (navigation.state === \"idle\") {\n        let key = (getKey ? getKey(location, matches) : null) || location.key;\n        savedScrollPositions[key] = window.scrollY;\n      }\n      try {\n        sessionStorage.setItem(\n          storageKey || SCROLL_RESTORATION_STORAGE_KEY,\n          JSON.stringify(savedScrollPositions)\n        );\n      } catch (error) {\n        warning(\n          false,\n          `Failed to save scroll positions in sessionStorage, <ScrollRestoration /> will not work properly (${error}).`\n        );\n      }\n      window.history.scrollRestoration = \"auto\";\n    }, [storageKey, getKey, navigation.state, location, matches])\n  );\n\n  // Read in any saved scroll locations\n  if (typeof document !== \"undefined\") {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      try {\n        let sessionPositions = sessionStorage.getItem(\n          storageKey || SCROLL_RESTORATION_STORAGE_KEY\n        );\n        if (sessionPositions) {\n          savedScrollPositions = JSON.parse(sessionPositions);\n        }\n      } catch (e) {\n        // no-op, use default empty object\n      }\n    }, [storageKey]);\n\n    // Enable scroll restoration in the router\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      let getKeyWithoutBasename: GetScrollRestorationKeyFunction | undefined =\n        getKey && basename !== \"/\"\n          ? (location, matches) =>\n              getKey(\n                // Strip the basename to match useLocation()\n                {\n                  ...location,\n                  pathname:\n                    stripBasename(location.pathname, basename) ||\n                    location.pathname,\n                },\n                matches\n              )\n          : getKey;\n      let disableScrollRestoration = router?.enableScrollRestoration(\n        savedScrollPositions,\n        () => window.scrollY,\n        getKeyWithoutBasename\n      );\n      return () => disableScrollRestoration && disableScrollRestoration();\n    }, [router, basename, getKey]);\n\n    // Restore scrolling when state.restoreScrollPosition changes\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      // Explicit false means don't do anything (used for submissions)\n      if (restoreScrollPosition === false) {\n        return;\n      }\n\n      // been here before, scroll to it\n      if (typeof restoreScrollPosition === \"number\") {\n        window.scrollTo(0, restoreScrollPosition);\n        return;\n      }\n\n      // try to scroll to the hash\n      if (location.hash) {\n        let el = document.getElementById(\n          decodeURIComponent(location.hash.slice(1))\n        );\n        if (el) {\n          el.scrollIntoView();\n          return;\n        }\n      }\n\n      // Don't reset if this navigation opted out\n      if (preventScrollReset === true) {\n        return;\n      }\n\n      // otherwise go to the top on new locations\n      window.scrollTo(0, 0);\n    }, [location, restoreScrollPosition, preventScrollReset]);\n  }\n}\n\nexport { useScrollRestoration as UNSAFE_useScrollRestoration };\n\n/**\n * Setup a callback to be fired on the window's `beforeunload` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nexport function useBeforeUnload(\n  callback: (event: BeforeUnloadEvent) => any,\n  options?: { capture?: boolean }\n): void {\n  let { capture } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? { capture } : undefined;\n    window.addEventListener(\"beforeunload\", callback, opts);\n    return () => {\n      window.removeEventListener(\"beforeunload\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n\n/**\n * Setup a callback to be fired on the window's `pagehide` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.  This event is better supported than beforeunload across browsers.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nfunction usePageHide(\n  callback: (event: PageTransitionEvent) => any,\n  options?: { capture?: boolean }\n): void {\n  let { capture } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? { capture } : undefined;\n    window.addEventListener(\"pagehide\", callback, opts);\n    return () => {\n      window.removeEventListener(\"pagehide\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n\n/**\n * Wrapper around useBlocker to show a window.confirm prompt to users instead\n * of building a custom UI with useBlocker.\n *\n * Warning: This has *a lot of rough edges* and behaves very differently (and\n * very incorrectly in some cases) across browsers if user click addition\n * back/forward navigations while the confirm is open.  Use at your own risk.\n */\nfunction usePrompt({\n  when,\n  message,\n}: {\n  when: boolean | BlockerFunction;\n  message: string;\n}) {\n  let blocker = useBlocker(when);\n\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\") {\n      let proceed = window.confirm(message);\n      if (proceed) {\n        // This timeout is needed to avoid a weird \"race\" on POP navigations\n        // between the `window.history` revert navigation and the result of\n        // `window.confirm`\n        setTimeout(blocker.proceed, 0);\n      } else {\n        blocker.reset();\n      }\n    }\n  }, [blocker, message]);\n\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\" && !when) {\n      blocker.reset();\n    }\n  }, [blocker, when]);\n}\n\nexport { usePrompt as unstable_usePrompt };\n\n/**\n * Return a boolean indicating if there is an active view transition to the\n * given href.  You can use this value to render CSS classes or viewTransitionName\n * styles onto your elements\n *\n * @param href The destination href\n * @param [opts.relative] Relative routing type (\"route\" | \"path\")\n */\nfunction useViewTransitionState(\n  to: To,\n  opts: { relative?: RelativeRoutingType } = {}\n) {\n  let vtContext = React.useContext(ViewTransitionContext);\n\n  invariant(\n    vtContext != null,\n    \"`unstable_useViewTransitionState` must be used within `react-router-dom`'s `RouterProvider`.  \" +\n      \"Did you accidentally import `RouterProvider` from `react-router`?\"\n  );\n\n  let { basename } = useDataRouterContext(\n    DataRouterHook.useViewTransitionState\n  );\n  let path = useResolvedPath(to, { relative: opts.relative });\n  if (!vtContext.isTransitioning) {\n    return false;\n  }\n\n  let currentPath =\n    stripBasename(vtContext.currentLocation.pathname, basename) ||\n    vtContext.currentLocation.pathname;\n  let nextPath =\n    stripBasename(vtContext.nextLocation.pathname, basename) ||\n    vtContext.nextLocation.pathname;\n\n  // Transition is active if we're going to or coming from the indicated\n  // destination.  This ensures that other PUSH navigations that reverse\n  // an indicated transition apply.  I.e., on the list view you have:\n  //\n  //   <NavLink to=\"/details/1\" unstable_viewTransition>\n  //\n  // If you click the breadcrumb back to the list view:\n  //\n  //   <NavLink to=\"/list\" unstable_viewTransition>\n  //\n  // We should apply the transition because it's indicated as active going\n  // from /list -> /details/1 and therefore should be active on the reverse\n  // (even though this isn't strictly a POP reverse)\n  return (\n    matchPath(path.pathname, nextPath) != null ||\n    matchPath(path.pathname, currentPath) != null\n  );\n}\n\nexport { useViewTransitionState as unstable_useViewTransitionState };\n\n//#endregion\n","import React, { Suspense, useEffect, useState } from \"react\";\n\nconst inputs = [\n  {\n    value: \"fundamental-math\",\n    label: \"Fundamental Math\",\n    placeholder:\n      \"Build your foundation skills in algebra, geometry and probability\",\n    icon: \"/icons/learning-path/learning-path.png\",\n    popular: true,\n  },\n  {\n    value: \"mathematical-thinking\",\n    label: \"Mathematical Thinking\",\n    placeholder:\n      \"Build your foundation skills in algebra, geometry and probability\",\n    icon: \"/icons/learning-path/learning-path.png\",\n    popular: false,\n  },\n];\n\nexport default function LearningPath() {\n  const [learningPath, setLearningPath] = useState();\n  const [loading, setLoading] = useState(true);\n  const handleClick = (value) => {\n    setLearningPath(value);\n  };\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setLoading(false);\n    }, 3000);\n\n    return () => clearTimeout(timer);\n  }, []);\n\n  if (loading) {\n    return <Loading />;\n  }\n  return (\n    <Suspense fallback={<Loading />}>\n      <div className=\"pt-20 px-2 flex flex-col gap-4\">\n        <h3 className=\"mt-4 mb-4 text-2xl font-medium leading-none text-gray-900 dark:text-white text-center\">\n          Learning path based on your answers\n        </h3>\n        <p className=\"mb-8 text-xs font-medium leading-none text-gray-500 dark:text-white text-center\">\n          Choose one to get started. You can switch anytime.\n        </p>\n        <div className=\"md:flex space-y-4 md:space-y-0 md:gap-3 justify-center \">\n          {inputs.map((item, i) => (\n            <>\n              {\" \"}\n              <div\n                className={`relative p-4 flex items-center gap-2 border-[1px] min-w-38 w-auto border-slate-300 pl-4 py-4 rounded-lg  hover:border-slate-400  ${\n                  learningPath == item.value\n                    ? \"border-slate-600 shadow-md\"\n                    : null\n                }`}\n                onClick={(e) => handleClick(item.value)}\n              >\n                {\" \"}\n                <div\n                  className={`${\n                    !item.popular && \"hidden\"\n                  }  text-xs bg-yellow-300 rounded-xl px-4 py-1 absolute top-0 left-1/2 transform -translate-x-1/2 -translate-y-1/2`}\n                >\n                  MOST POPULAR\n                </div>\n                <div className=\"flex items-center max-w-52\">\n                  <p className=\"text-sm font-light\">\n                    <span className=\"font-semibold\">{item.label}</span>&nbsp;\n                    {item.placeholder}\n                  </p>\n                </div>\n                <img src={item.icon} alt={item.value} className=\"h-28\" />\n              </div>\n            </>\n          ))}\n        </div>\n      </div>\n    </Suspense>\n  );\n}\n\nfunction Loading() {\n  return (\n    <>\n      <div className=\"h-screen flex flex-col gap-2 justify-center items-center px-10 md:px-44\">\n        <svg\n          aria-hidden=\"true\"\n          class=\"inline w-20 h-20 text-gray-200 animate-spin dark:text-gray-600 fill-yellow-400\"\n          viewBox=\"0 0 100 101\"\n          fill=\"none\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <path\n            d=\"M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z\"\n            fill=\"currentColor\"\n          />\n          <path\n            d=\"M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z\"\n            fill=\"currentFill\"\n          />\n        </svg>\n        <h1 className=\"text-sm md:text-xl font-medium\">\n          Finding learning path recomendations for you based on your selection\n        </h1>\n      </div>\n    </>\n  );\n}\n","import DemoComponent from \"./components/DemoComponent\";\nimport { BrowserRouter, Route, Routes } from \"react-router-dom\";\nimport LearningPath from \"./components/LearningPath\";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Routes>\n        <Route path=\"/\" element={<DemoComponent />} />\n        <Route path=\"/learning-path\" element={<LearningPath />} />\n      </Routes>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport './styles.css';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n"],"names":["aa","require","ba","ca","da","usingClientEntryPoint","Events","ReactDOMCurrentDispatcher","current","prefetchDNS","preconnect","preload","preloadModule","preinitScript","preinitStyle","preinitModuleScript","findDOMNode","u","a","b","arguments","length","encodeURIComponent","c","D","Object","assign","fa","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","ha","ReactCurrentDispatcher","ia","pending","data","method","action","ja","ka","la","E","F","ma","Symbol","for","na","oa","pa","qa","ra","sa","ta","ua","va","wa","xa","ya","za","Aa","Ba","Ca","Da","iterator","Ea","Fa","Ga","Ha","Ia","Ja","$$typeof","Provider","Consumer","_currentValue","_currentValue2","_threadCount","Ka","nodeType","documentElement","namespaceURI","La","parentNode","tagName","Ma","Na","Oa","memoizedState","type","Pa","Qa","unstable_scheduleCallback","Ra","unstable_cancelCallback","Sa","unstable_shouldYield","Ta","unstable_requestPaint","Ua","unstable_now","Va","unstable_getCurrentPriorityLevel","Wa","unstable_ImmediatePriority","Xa","unstable_UserBlockingPriority","Ya","unstable_NormalPriority","Za","unstable_LowPriority","$a","unstable_IdlePriority","ab","log","bb","unstable_setDisableYieldValue","cb","db","fb","setStrictMode","hb","Math","clz32","ib","jb","LN2","kb","lb","mb","nb","pendingLanes","d","e","suspendedLanes","pingedLanes","f","ob","pb","errorRecoveryDisabledLanes","qb","rb","sb","push","ub","entangledLanes","entanglements","vb","G","yb","zb","prototype","hasOwnProperty","Ab","random","toString","slice","Bb","Cb","Db","Eb","Fb","Gb","Ib","Jb","Kb","Lb","alternate","child","Mb","Nb","tag","Ob","stateNode","Error","Pb","Qb","hoistableStyles","Map","hoistableScripts","Rb","Sb","Set","Tb","Ub","Vb","add","dc","Wb","window","document","createElement","Xb","RegExp","Yb","Zb","ac","call","test","$b","removeAttribute","toLowerCase","setAttribute","bc","cc","setAttributeNS","ec","stack","trim","match","fc","gc","prepareStackTrace","DetermineComponentFrameRoot","w","defineProperty","set","Reflect","construct","r","q","catch","displayName","getOwnPropertyDescriptor","configurable","value","g","h","k","split","n","includes","t","replace","name","hc","render","ic","return","message","jc","kc","_context","_payload","_init","lc","mc","nc","nodeName","pc","_valueTracker","constructor","get","this","enumerable","getValue","setValue","stopTracking","oc","qc","checked","rc","activeElement","body","sc","tc","charCodeAt","uc","vc","defaultChecked","wc","defaultValue","ownerDocument","Bc","xc","Array","isArray","yc","options","selected","defaultSelected","disabled","zc","Ac","textContent","Cc","innerHTML","valueOf","firstChild","removeChild","appendChild","Dc","MSApp","execUnsafeLocalFunction","Ec","Fc","lastChild","nodeValue","Gc","Hc","indexOf","setProperty","cssFloat","has","Ic","style","Jc","Kc","Lc","Mc","Nc","Oc","target","srcElement","correspondingUseElement","Pc","Qc","Rc","querySelectorAll","form","multiple","Sc","Tc","Uc","flags","Vc","dehydrated","Wc","Yc","sibling","Xc","Zc","$c","ad","bd","cd","dd","contextTypes","__reactInternalMemoizedUnmaskedChildContext","__reactInternalMemoizedMaskedChildContext","ed","childContextTypes","fd","gd","hd","getChildContext","id","__reactInternalMemoizedMergedChildContext","jd","ld","is","md","nd","od","pd","qd","rd","sd","td","ud","vd","wd","xd","yd","zd","Ad","H","Bd","Cd","Dd","Ed","memoizedProps","J","Fd","children","suppressHydrationWarning","Gd","onScroll","onScrollEnd","onClick","onclick","Hd","Id","Jd","Kd","nextSibling","Ld","Md","Nd","Od","Pd","Qd","Rd","next","Sd","Td","lanes","Ud","Vd","Wd","childLanes","_visibility","hiddenUpdates","lane","Xd","Yd","Zd","$d","ae","be","ce","de","le","N","ee","fe","ge","K","L","he","ie","je","expirationTimes","expiredLanes","callbackNode","M","cancelPendingCommit","callbackPriority","ke","bind","me","ne","oe","pe","qe","se","status","ue","ve","updateQueue","baseState","firstBaseUpdate","lastBaseUpdate","shared","hiddenCallbacks","callbacks","we","xe","payload","callback","ye","ze","Ae","Be","Ce","De","y","C","R","Ee","Fe","Ge","He","keys","Ie","Je","Ke","then","Le","Me","Ne","reason","shellSuspendCounter","Oe","Pe","Qe","Re","Se","Ue","ref","refs","_owner","_stringRef","Te","Ve","join","We","Xe","m","l","p","deletions","key","index","Ye","v","Ze","mode","x","props","elementType","$e","containerInfo","implementation","af","bf","cf","z","A","B","ea","I","delete","forEach","Hb","done","Vm","df","ef","ff","gf","hf","jf","baseLanes","kf","lf","mf","nf","of","pf","qf","rf","sf","tf","revealOrder","Sf","uf","vf","ReactCurrentBatchConfig","wf","O","P","Q","xf","yf","zf","Af","Bf","Cf","Df","S","Ef","Ff","Gf","Hf","If","Jf","Kf","Lf","Mf","useState","Nf","Of","Pf","Qf","queue","Rf","baseQueue","T","Tf","Uf","String","Vf","Wf","Xf","lastRenderedReducer","revertLane","hasEagerState","eagerState","Yf","lastRenderedState","dispatch","Zf","$f","ag","bg","getSnapshot","cg","dg","destroy","eg","stores","fg","gg","hg","ig","jg","kg","lg","mg","state","transition","_callbacks","ng","og","pg","qg","formState","rg","sg","tg","ug","vg","wg","create","inst","deps","lastEffect","xg","yg","zg","Ag","Bg","Cg","Dg","Eg","concat","Fg","Gg","Hg","Ig","Jg","Kg","te","Lg","Mg","Ng","Og","Pg","Qg","cache","Rg","Sg","Tg","Ug","Vg","events","readContext","use","useCallback","useContext","useEffect","useImperativeHandle","useLayoutEffect","useInsertionEffect","useMemo","useReducer","useRef","useDebugValue","useDeferredValue","useTransition","useSyncExternalStore","useId","useCacheRefresh","useHostTransitionStatus","useFormState","useActionState","useOptimistic","identifierPrefix","Wg","defaultProps","Xg","Yg","isMounted","_reactInternals","enqueueSetState","enqueueReplaceState","enqueueForceUpdate","Zg","shouldComponentUpdate","isPureReactComponent","$g","contextType","updater","ah","componentWillReceiveProps","UNSAFE_componentWillReceiveProps","bh","context","getDerivedStateFromProps","getSnapshotBeforeUpdate","UNSAFE_componentWillMount","componentWillMount","componentDidMount","ch","WeakMap","dh","source","digest","eh","fh","reportError","ErrorEvent","bubbles","cancelable","error","dispatchEvent","process","emit","console","gh","hh","ih","jh","onUncaughtError","componentStack","setTimeout","kh","onCaughtError","errorBoundary","lh","element","mh","nh","getDerivedStateFromError","componentDidCatch","oh","ph","uh","ReactCurrentOwner","vh","wh","xh","yh","zh","Ah","Bh","compare","Ch","pendingProps","Dh","Eh","_pendingVisibility","Fh","Gh","cachePool","Hh","Ih","parent","V","pool","Jh","Kh","Lh","UNSAFE_componentWillUpdate","componentWillUpdate","componentDidUpdate","Mh","Nh","pendingContext","Oh","Ph","treeContext","retryLane","Qh","Rh","Sh","Th","overflow","Uh","fallback","Vh","Wh","Xh","dataset","dgst","rh","Yh","_reactRetry","subtreeFlags","Zh","$h","ai","isBackwards","rendering","renderingStartTime","last","tail","tailMode","bi","dependencies","ei","di","ci","fi","gi","isDehydrated","Hj","precedence","href","to","instance","count","rel","loading","ho","querySelector","vo","addEventListener","ji","head","Ao","as","crossOrigin","integrity","media","hrefLang","referrerPolicy","src","async","uo","hi","ii","ki","hasAttribute","getAttribute","title","li","mi","pooledCache","refCount","pooledCacheLanes","ni","oi","pi","qi","ri","si","firstContext","ti","memoizedValue","ui","AbortController","signal","aborted","abort","vi","wi","controller","xi","yi","zi","re","Ai","Bi","Ci","Di","Ei","Fi","W","Gi","Hi","createElementNS","size","autoFocus","createTextNode","Ii","U","Ji","Ki","retryQueue","Li","Mi","Ni","Oi","Pi","WeakSet","Qi","Ri","refCleanup","X","Si","Ti","Ui","bj","cj","dj","ej","fj","focus","gj","hj","__reactInternalSnapshotBeforeUpdate","ij","jj","kj","lj","mj","nj","insertBefore","_reactRootContainer","oj","pj","qj","rj","sj","onCommitFiberUnmount","attributes","removeAttributeNode","tj","uj","componentWillUnmount","wj","_retryCache","vj","xj","yj","zj","Aj","Bj","getElementsByTagName","Cj","splice","content","property","httpEquiv","charSet","Dj","Ej","Fj","Gj","Ij","_current","Jj","display","Kj","Lj","Mj","Nj","Oj","Pj","Qj","Rj","Sj","Tj","Gk","matchMedia","matches","_p","Co","Bo","xo","Promise","onload","onerror","stylesheets","Uj","Vj","Wj","Xj","Yj","Zj","ak","getCacheSignal","getCacheForType","bk","ck","dk","ReactCurrentCache","ek","fk","Y","gk","hk","ik","jk","th","kk","lk","mk","Infinity","nk","ok","pk","qk","rk","sk","tk","uk","event","vk","wk","xk","yk","zk","Ok","Pk","Qk","Tk","Uk","Lk","Vk","Nk","Ak","Bk","Ck","Dk","finishedWork","finishedLanes","timeoutHandle","Ek","Fk","apply","unsuspend","Hk","Do","clearTimeout","Ik","Jk","Kk","Mk","Rk","Sk","sh","transitions","markerInstances","qh","tb","Xk","Wi","Xi","Zi","Yi","start","selectionStart","end","selectionEnd","defaultView","getSelection","rangeCount","anchorNode","anchorOffset","focusNode","focusOffset","$i","focusedElem","selectionRange","aj","Vi","un","min","extend","tn","node","offset","createRange","setStart","removeAllRanges","addRange","setEnd","left","scrollLeft","top","scrollTop","Yk","Zk","onCommitFiberRoot","eb","onRecoverableError","Wk","onPostCommitFiberRoot","$k","pingCache","al","bl","cl","isReactComponent","itemProp","onLoad","onError","dl","_pendingMarkers","_transitions","detach","attach","pendingChildren","el","incompleteTransitions","fl","hl","il","jl","kl","ll","wb","ml","nl","ol","ql","rl","sl","tl","ul","removeEventListener","vl","keyCode","charCode","wl","xl","yl","_reactName","_targetInst","nativeEvent","currentTarget","isDefaultPrevented","defaultPrevented","returnValue","isPropagationStopped","preventDefault","stopPropagation","cancelBubble","persist","isPersistent","Dl","El","Fl","zl","eventPhase","timeStamp","Date","now","isTrusted","Al","Bl","view","detail","Cl","Hl","screenX","screenY","clientX","clientY","pageX","pageY","ctrlKey","shiftKey","altKey","metaKey","getModifierState","Gl","button","buttons","relatedTarget","fromElement","toElement","movementX","movementY","Il","Kl","dataTransfer","Ml","Ol","animationName","elapsedTime","pseudoElement","Ql","clipboardData","Sl","Tl","Esc","Spacebar","Left","Up","Right","Down","Del","Win","Menu","Apps","Scroll","MozPrintableKey","Ul","Vl","Alt","Control","Meta","Shift","Wl","Yl","fromCharCode","code","location","repeat","locale","which","$l","pointerId","width","height","pressure","tangentialPressure","tiltX","tiltY","twist","pointerType","isPrimary","bm","touches","targetTouches","changedTouches","dm","propertyName","fm","deltaX","wheelDeltaX","deltaY","wheelDeltaY","wheelDelta","deltaZ","deltaMode","hm","im","jm","km","lm","mm","nm","om","pm","qm","blockedOn","domEventName","eventSystemFlags","targetContainers","sm","xb","priority","tm","um","shift","vm","wm","xm","ym","zm","Am","$$reactFormReplay","formAction","Bm","Cm","Dm","Em","Fm","Gm","rm","Hm","Im","Jm","Km","Lm","Mm","Nm","documentMode","Om","Pm","Qm","Rm","Sm","Tm","Um","Ym","color","date","datetime","email","month","number","password","range","search","tel","text","time","url","week","Zm","$m","an","listeners","bn","cn","dn","en","fn","gn","hn","jn","kn","ln","oninput","mn","detachEvent","nn","on","attachEvent","pn","qn","rn","sn","contains","compareDocumentPosition","HTMLIFrameElement","contentWindow","contentEditable","vn","wn","xn","yn","zn","An","Bn","Cn","animationend","animationiteration","animationstart","transitionend","Dn","En","Fn","animation","Gn","Hn","In","Jn","Kn","Ln","Mn","Nn","On","toUpperCase","Rn","listener","Sn","Tn","Un","capture","passive","Vn","parentWindow","Wn","Xn","Wm","char","Xm","submitter","FormData","gm","unshift","Yn","Zn","$n","Z","formEncType","formMethod","formTarget","encType","__html","muted","isNaN","ao","bo","dangerouslySetInnerHTML","co","eo","queueMicrotask","resolve","fo","go","previousSibling","io","getRootNode","jo","so","ro","imageSrcSet","imageSizes","wo","yo","zo","Eo","Fo","Go","_internalRoot","Ho","Io","Jo","Ko","Mo","Lo","No","unmount","unstable_scheduleHydration","Oo","Po","Qo","findFiberByHostInstance","bundleType","version","rendererPackageName","Ro","rendererConfig","overrideHookState","overrideHookStateDeletePath","overrideHookStateRenamePath","overrideProps","overridePropsDeletePath","overridePropsRenamePath","setErrorHandler","setSuspenseHandler","scheduleUpdate","currentDispatcherRef","findHostInstanceByFiber","findHostInstancesForRefresh","scheduleRefresh","scheduleRoot","setRefreshHandler","getCurrentFiber","reconcilerVersion","__REACT_DEVTOOLS_GLOBAL_HOOK__","So","isDisabled","supportsFiber","inject","exports","gl","unstable_strictMode","unstable_transitionCallbacks","flushSync","fetchPriority","nonce","unmountComponentAtNode","unstable_batchedUpdates","unstable_renderSubtreeIntoContainer","useFormStatus","createRoot","hydrateRoot","checkDCE","err","module","Fragment","jsx","jsxs","setState","forceUpdate","escape","_status","_result","default","Children","map","toArray","only","Component","Profiler","PureComponent","StrictMode","Suspense","act","s","o","createContext","createFactory","createRef","forwardRef","lazy","memo","startTransition","pop","sortIndex","performance","setImmediate","startTime","expirationTime","priorityLevel","MessageChannel","port2","port1","onmessage","postMessage","unstable_Profiling","unstable_continueExecution","unstable_forceFrameRate","floor","unstable_getFirstCallbackNode","unstable_pauseExecution","unstable_runWithPriority","delay","unstable_wrapCallback","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","leafPrototypes","getProto","getPrototypeOf","obj","__esModule","ns","def","getOwnPropertyNames","definition","prop","toStringTag","Action","OccupationStep","_ref","occupation","setOccupation","_jsxs","_Fragment","_jsx","className","label","placeholder","icon","item","i","handleClick","alt","InterestStep","interest","setInterest","HaltStep","autoPlay","loop","LevelStep","level","setLevel","FinalStep","PopStateEventType","invariant","warning","cond","warn","getHistoryState","usr","idx","createLocation","_extends","pathname","hash","parsePath","substr","createPath","charAt","path","parsedPath","hashIndex","searchIndex","getUrlBasedHistory","getLocation","createHref","validateLocation","v5Compat","globalHistory","history","Pop","getIndex","handlePop","nextIndex","delta","createURL","base","origin","URL","replaceState","listen","encodeLocation","Push","historyState","pushState","DOMException","Replace","ResultType","matchRoutes","routes","locationArg","basename","stripBasename","branches","flattenRoutes","sort","score","siblings","every","compareIndexes","routesMeta","meta","childrenIndex","rankRouteBranches","decoded","decodePath","matchRouteBranch","parentsMeta","parentPath","flattenRoute","route","relativePath","caseSensitive","startsWith","joinPaths","computeScore","_route$path","exploded","explodeOptionalSegments","segments","first","rest","isOptional","endsWith","required","restExploded","result","subpath","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","initialScore","some","filter","reduce","segment","branch","matchedParams","matchedPathname","remainingPathname","matchPath","params","pathnameBase","normalizePathname","pattern","matcher","compiledParams","regexpSource","_","paramName","compilePath","captureGroups","splatValue","decodeURIComponent","startIndex","nextChar","getInvalidPathError","field","dest","JSON","stringify","getPathContributingMatches","getResolveToMatches","v7_relativeSplatPath","pathMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","from","isEmptyPath","toPathname","routePathnameIndex","toSegments","fromPathname","resolvePathname","normalizeSearch","normalizeHash","resolvePath","hasExplicitTrailingSlash","hasCurrentTrailingSlash","paths","isRouteErrorResponse","statusText","internal","validMutationMethodsArr","validRequestMethodsArr","DataRouterContext","React","DataRouterStateContext","NavigationContext","LocationContext","RouteContext","outlet","isDataRoute","RouteErrorContext","useInRouterContext","useLocation","UNSAFE_invariant","useIsomorphicLayoutEffect","static","useNavigate","router","useDataRouterContext","DataRouterHook","UseNavigateStable","useCurrentRouteId","DataRouterStateHook","activeRef","navigate","fromRouteId","useNavigateStable","dataRouterContext","future","navigator","routePathnamesJson","UNSAFE_getResolveToMatches","parse","relative","useNavigateUnstable","useRoutesImpl","dataRouterState","parentMatches","routeMatch","parentParams","parentPathnameBase","locationFromContext","_parsedLocationArg$pa","parsedLocationArg","parentSegments","renderedMatches","_renderMatches","navigationType","DefaultErrorComponent","_state$errors","useDataRouterState","UseRouteError","routeId","errors","useRouteError","lightgrey","preStyles","padding","backgroundColor","fontStyle","defaultErrorElement","RenderErrorBoundary","super","revalidation","errorInfo","routeContext","component","RenderedRoute","staticContext","errorElement","ErrorBoundary","_deepestRenderedBoundaryId","_dataRouterState2","_dataRouterState","errorIndex","findIndex","renderFallback","fallbackIndex","v7_partialHydration","HydrateFallback","hydrateFallbackElement","loaderData","needsToRunLoader","loader","reduceRight","shouldRenderHydrateFallback","alreadyWarned","getChildren","hookName","ctx","useRouteContext","thisRoute","Route","_props","Router","_ref5","basenameProp","locationProp","staticProp","navigationContext","locationContext","trailingPathname","Routes","_ref6","createRoutesFromChildren","treePath","hasErrorBoundary","shouldRevalidate","handle","DemoComponent","currentStep","setCurrentStep","step","position","zIndex","onSubmit","formData","append","fromEntries","MathLevelStep","__reactRouterVersion","startTransitionImpl","ReactDOM","BrowserRouter","_ref4","historyRef","setStateImpl","v7_startTransition","newState","inputs","popular","LearningPath","learningPath","setLearningPath","setLoading","timer","Loading","class","viewBox","fill","xmlns","getElementById","App"],"sourceRoot":""}